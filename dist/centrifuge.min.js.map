{"version":3,"sources":["webpack://Centrifuge/webpack/universalModuleDefinition","webpack://Centrifuge/./node_modules/events/events.js","webpack://Centrifuge/./src/utils.js","webpack://Centrifuge/./src/subscription.js","webpack://Centrifuge/./src/json.js","webpack://Centrifuge/./src/centrifuge.js","webpack://Centrifuge/./src/index.js","webpack://Centrifuge/webpack/bootstrap","webpack://Centrifuge/webpack/startup","webpack://Centrifuge/webpack/runtime/compat get default export","webpack://Centrifuge/webpack/runtime/define property getters","webpack://Centrifuge/webpack/runtime/global","webpack://Centrifuge/webpack/runtime/hasOwnProperty shorthand","webpack://Centrifuge/webpack/runtime/make namespace object"],"names":["root","factory","exports","module","define","amd","this","ReflectOwnKeys","R","Reflect","ReflectApply","apply","target","receiver","args","Function","prototype","call","ownKeys","Object","getOwnPropertySymbols","getOwnPropertyNames","concat","NumberIsNaN","Number","isNaN","value","EventEmitter","init","once","emitter","name","Promise","resolve","reject","eventListener","undefined","errorListener","removeListener","slice","arguments","err","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","listener","TypeError","_getMaxListeners","that","_addListener","type","prepend","m","events","existing","warning","create","newListener","emit","unshift","push","length","warned","w","Error","String","count","console","warn","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","bind","_listeners","unwrap","evlistener","arr","ret","Array","i","unwrapListeners","arrayClone","listenerCount","n","copy","defineProperty","enumerable","get","set","arg","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","error","er","message","context","handler","len","listeners","addListener","on","prependListener","prependOnceListener","list","position","originalListener","shift","index","pop","spliceOne","off","removeAllListeners","key","keys","rawListeners","eventNames","startsWith","prefix","lastIndexOf","isFunction","log","level","g","logger","Subscription","centrifuge","channel","super","_centrifuge","_status","_error","_isResubscribe","_ready","_subscriptionPromise","_noResubscribe","_recoverable","_recover","_setEvents","_initializePromise","_promises","_promiseId","errContext","_debug","_resolve","_reject","then","toString","knownEvents","l","ev","isResubscribe","subscribeResult","successContext","_getSubscribeSuccessContext","id","clearTimeout","timeout","_getSubscribeErrorContext","noResubscribe","_clearSubRefreshTimeout","needTrigger","_lastSeq","_lastGen","_lastEpoch","_triggerUnsubscribe","ctx","_expandSubscribeContext","subscribeErrorContext","callback","errback","_isSuccess","_subscribe","_setUnsubscribed","_unsubscribe","subPromise","_isError","res","rej","setTimeout","_config","_nextPromiseId","_call","resolveCtx","_decoder","decodeCommandResult","result","next","rejectCtx","data","_methodCall","method","_methodType","PUBLISH","params","PRESENCE","PRESENCE_STATS","options","_getHistoryParams","HISTORY","JsonMethodType","CONNECT","SUBSCRIBE","UNSUBSCRIBE","PING","SEND","RPC","REFRESH","SUB_REFRESH","JsonPushType","PUBLICATION","JOIN","LEAVE","UNSUB","MESSAGE","SUB","JsonEncoder","commands","encodedCommands","hasOwnProperty","JSON","stringify","join","JsonDecoder","replies","encodedReplies","split","reply","parse","methodType","pushType","_errorTimeout","_errorConnectionClosed","Centrifuge","url","_url","_websocket","_sockjs","_isSockjs","_binary","_pushType","_encoder","_reconnect","_reconnecting","_transport","_transportName","_transportClosed","_messageId","_clientID","_refreshRequired","_subs","_serverSubs","_lastOffset","_messages","_isBatching","_isSubscribeBatching","_privateChannels","_numRefreshFailed","_refreshTimeout","_pingTimeout","_pongTimeout","_subRefreshTimeouts","_retries","_callbacks","_latency","_latencyStart","_connectData","_token","_xhrID","_xhrs","_dispatchPromise","debug","version","websocket","sockjs","minRetry","maxRetry","ping","pingInterval","pongWaitTimeout","privateChannelPrefix","onTransportClose","sockjsServer","sockjsTransports","refreshEndpoint","refreshHeaders","refreshParams","refreshData","refreshAttempts","refreshInterval","onRefreshFailed","onRefresh","subscribeEndpoint","subscribeHeaders","subscribeParams","subRefreshInterval","onPrivateSubscribe","_configure","token","headers","query","xhr","XMLHttpRequest","ActiveXObject","encodeURIComponent","open","withCredentials","setRequestHeader","headerName","onreadystatechange","readyState","status","parsed","responseText","e","_log","send","WebSocket","format","_formatOverride","configuration","a","b","extend","indexOf","_setFormat","SockJS","newStatus","interval","step","min","max","jitter","Math","random","pow","floor","backoff","xhrID","abort","reconnect","_stopPing","callbacks","_createErrorObject","sub","_shouldResubscribe","_setSubscribing","_abortInflightXHRs","transport","OPEN","_isTransportOpen","command","encodeCommands","sockjsOptions","transports","server","_websocketSupported","binaryType","onopen","onheartbeat","_restartPing","msg","subs","hasSubs","recoverable","seq","gen","offset","epoch","Date","_connectResponse","code","_disconnect","onerror","onclose","closeEvent","reason","needReconnect","advice","event","_getRetryInterval","_refresh","_connect","onmessage","_dataReceived","_rpc","isConnected","_transportSend","since","limit","resultCB","decodeReplies","finishDispatch","_dispatchSynchronized","p","_dispatchReply","_handleReply","_handlePush","_addMessage","_registerCall","_setStatus","_setupTransport","shouldReconnect","_isDisconnected","_clearConnectedState","close","_refreshFailed","clientID","_newXHRID","cb","resp","round","_refreshResponse","_refreshError","_ajax","expires","client","_getTTLMilliseconds","ttl","channelsData","channels","channelData","_getSub","_subRefreshResponse","_subRefreshError","subRefreshTimeout","_subRefresh","_setNew","startSubscribeBatching","stopSubscribeBatching","recover","_needRecover","_getLastSeq","_getLastGen","_getLastOffset","_getLastEpoch","_subscribeResponse","_subscribeError","isRecover","wasReconnecting","_resetRetry","getTime","startBatching","stopBatching","_startPing","latency","_processServerSubs","subCtx","recovered","pubs","publications","reverse","_handlePublication","_isSubscribing","_setSubscribeError","positioned","streamPosition","_setSubscribeSuccess","info","_isServerSub","leave","unsub","unsubscribe","resubscribe","subscribe","pub","decodePush","decodePushData","_handleMessage","_handleJoin","_handleLeave","_handleUnsub","_handleSub","messages","_pingResponse","_nextMessageId","_isConnected","_ping","_flush","authChannels","batch","currentSub","_isUnsubscribed","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","getter","__esModule","d","definition","o","globalThis","window","obj","prop","r","Symbol","toStringTag"],"mappings":"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","file":"centrifuge.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Centrifuge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Centrifuge\"] = factory();\n\telse\n\t\troot[\"Centrifuge\"] = factory();\n})(this, function() {\nreturn ","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function eventListener() {\n      if (errorListener !== undefined) {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n    var errorListener;\n\n    // Adding an error listener is not optional because\n    // if an error is thrown on an event emitter we cannot\n    // guarantee that the actual event we are waiting will\n    // be fired. The result could be a silent way to create\n    // memory or file descriptor leaks, which is something\n    // we should avoid.\n    if (name !== 'error') {\n      errorListener = function errorListener(err) {\n        emitter.removeListener(name, eventListener);\n        reject(err);\n      };\n\n      emitter.once('error', errorListener);\n    }\n\n    emitter.once(name, eventListener);\n  });\n}\n","export function startsWith(value, prefix) {\n  return value.lastIndexOf(prefix, 0) === 0;\n};\n\nexport function isFunction(value) {\n  if (value === undefined || value === null) {\n    return false;\n  }\n  return typeof value === 'function';\n};\n\nexport function log(level, args) {\n  if (global.console) {\n    const logger = global.console[level];\n\n    if (isFunction(logger)) {\n      logger.apply(global.console, args);\n    }\n  }\n};\n\nexport function backoff(step, min, max) {\n  const jitter = 0.5 * Math.random();\n  const interval = Math.min(max, min * Math.pow(2, step + 1));\n\n  return Math.floor((1 - jitter) * interval);\n};\n\nexport function errorExists(data) {\n  return 'error' in data && data.error !== null;\n};\n\nexport function extend(a, b) {\n  for (const key in b) {\n    if (b.hasOwnProperty(key)) {\n      a[key] = b[key];\n    }\n  }\n  return a;\n};\n","import EventEmitter from 'events';\n\nimport {\n  isFunction\n} from './utils';\n\nconst _STATE_NEW = 0;\nconst _STATE_SUBSCRIBING = 1;\nconst _STATE_SUCCESS = 2;\nconst _STATE_ERROR = 3;\nconst _STATE_UNSUBSCRIBED = 4;\n\nexport default class Subscription extends EventEmitter {\n  constructor(centrifuge, channel, events) {\n    super();\n    this.channel = channel;\n    this._centrifuge = centrifuge;\n    this._status = _STATE_NEW;\n    this._error = null;\n    this._isResubscribe = false;\n    this._ready = false;\n    this._subscriptionPromise = null;\n    this._noResubscribe = false;\n    this._recoverable = false;\n    this._recover = false;\n    this._setEvents(events);\n    this._initializePromise();\n    this._promises = {};\n    this._promiseId = 0;\n    this.on('error', function (errContext) {\n      this._centrifuge._debug('subscription error', errContext);\n    });\n  }\n\n  _nextPromiseId() {\n    return ++this._promiseId;\n  }\n\n  _initializePromise() {\n    // this helps us to wait until subscription will successfully\n    // subscribe and call actions such as presence, history etc in\n    // synchronous way.\n    this._ready = false;\n\n    this._subscriptionPromise = new Promise((resolve, reject) => {\n      this._resolve = value => {\n        this._ready = true;\n        resolve(value);\n      };\n      this._reject = err => {\n        this._ready = true;\n        reject(err);\n      };\n    }).then(function () {}, function () {});\n  };\n\n  _needRecover() {\n    return this._recoverable === true && this._recover === true;\n  };\n\n  _setEvents(events) {\n    if (!events) {\n      return;\n    }\n    if (isFunction(events)) {\n      // events is just a function to handle publication received from channel.\n      this.on('publish', events);\n    } else if (Object.prototype.toString.call(events) === Object.prototype.toString.call({})) {\n      const knownEvents = ['publish', 'join', 'leave', 'unsubscribe', 'subscribe', 'error'];\n      for (let i = 0, l = knownEvents.length; i < l; i++) {\n        const ev = knownEvents[i];\n        if (ev in events) {\n          this.on(ev, events[ev]);\n        }\n      }\n    }\n  };\n\n  _isNew() {\n    return this._status === _STATE_NEW;\n  };\n\n  _isUnsubscribed() {\n    return this._status === _STATE_UNSUBSCRIBED;\n  };\n\n  _isSubscribing() {\n    return this._status === _STATE_SUBSCRIBING;\n  };\n\n  _isReady() {\n    return this._status === _STATE_SUCCESS || this._status === _STATE_ERROR;\n  };\n\n  _isSuccess() {\n    return this._status === _STATE_SUCCESS;\n  };\n\n  _isError() {\n    return this._status === _STATE_ERROR;\n  };\n\n  _setNew() {\n    this._status = _STATE_NEW;\n  };\n\n  _setSubscribing(isResubscribe) {\n    this._isResubscribe = isResubscribe || false;\n    if (this._ready === true) {\n      // new promise for this subscription\n      this._initializePromise();\n    }\n    this._status = _STATE_SUBSCRIBING;\n  };\n\n  _setSubscribeSuccess(subscribeResult) {\n    if (this._status === _STATE_SUCCESS) {\n      return;\n    }\n    this._status = _STATE_SUCCESS;\n    const successContext = this._getSubscribeSuccessContext(subscribeResult);\n    this._recover = false;\n    this.emit('subscribe', successContext);\n    this._resolve(successContext);\n    for (const id in this._promises) {\n      clearTimeout(this._promises[id].timeout);\n      this._promises[id].resolve();\n      delete this._promises[id];\n    }\n  };\n\n  _setSubscribeError(err) {\n    if (this._status === _STATE_ERROR) {\n      return;\n    }\n    this._status = _STATE_ERROR;\n    this._error = err;\n    const errContext = this._getSubscribeErrorContext();\n    this.emit('error', errContext);\n    this._reject(errContext);\n    for (const id in this._promises) {\n      clearTimeout(this._promises[id].timeout);\n      this._promises[id].reject(err);\n      delete this._promises[id];\n    }\n  };\n\n  _triggerUnsubscribe() {\n    this.emit('unsubscribe', {\n      channel: this.channel\n    });\n  };\n\n  _setUnsubscribed(noResubscribe) {\n    this._centrifuge._clearSubRefreshTimeout(this.channel);\n    if (this._status === _STATE_UNSUBSCRIBED) {\n      return;\n    }\n    const needTrigger = this._status === _STATE_SUCCESS;\n    this._status = _STATE_UNSUBSCRIBED;\n    if (noResubscribe === true) {\n      this._recover = false;\n      this._noResubscribe = true;\n      delete this._centrifuge._lastSeq[this.channel];\n      delete this._centrifuge._lastGen[this.channel];\n      delete this._centrifuge._lastEpoch[this.channel];\n    }\n    if (needTrigger) {\n      this._triggerUnsubscribe();\n    }\n  };\n\n  _shouldResubscribe() {\n    return !this._noResubscribe;\n  };\n\n  _getSubscribeSuccessContext(subscribeResult) {\n    let ctx = {\n      channel: this.channel,\n      isResubscribe: this._isResubscribe\n    };\n    if (subscribeResult) {\n      // subscribeResult not available when called from Subscription.ready method at the moment.\n      ctx = this._centrifuge._expandSubscribeContext(ctx, subscribeResult);\n    }\n    return ctx;\n  };\n\n  _getSubscribeErrorContext() {\n    const subscribeErrorContext = this._error;\n    subscribeErrorContext.channel = this.channel;\n    subscribeErrorContext.isResubscribe = this._isResubscribe;\n    return subscribeErrorContext;\n  };\n\n  ready(callback, errback) {\n    if (this._ready) {\n      if (this._isSuccess()) {\n        callback(this._getSubscribeSuccessContext());\n      } else {\n        errback(this._getSubscribeErrorContext());\n      }\n    }\n  };\n\n  subscribe() {\n    if (this._status === _STATE_SUCCESS) {\n      return;\n    }\n    this._noResubscribe = false;\n    this._centrifuge._subscribe(this);\n  };\n\n  unsubscribe() {\n    this._setUnsubscribed(true);\n    this._centrifuge._unsubscribe(this);\n  };\n\n  _methodCall(message, type) {\n    const methodCallPromise = new Promise((resolve, reject) => {\n      let subPromise;\n      if (this._isSuccess()) {\n        subPromise = Promise.resolve();\n      } else if (this._isError()) {\n        subPromise = Promise.reject(this._error);\n      } else {\n        subPromise = new Promise((res, rej) => {\n          const timeout = setTimeout(function () {\n            rej({'code': 0, 'message': 'timeout'});\n          }, this._centrifuge._config.timeout);\n          this._promises[this._nextPromiseId()] = {\n            timeout: timeout,\n            resolve: res,\n            reject: rej\n          };\n        });\n      }\n      subPromise.then(\n        () => {\n          return this._centrifuge._call(message).then(\n            resolveCtx => {\n              resolve(this._centrifuge._decoder.decodeCommandResult(type, resolveCtx.result));\n              if (resolveCtx.next) {\n                resolveCtx.next();\n              }\n            },\n            rejectCtx => {\n              reject(rejectCtx.error);\n              if (rejectCtx.next) {\n                rejectCtx.next();\n              }\n            }\n          );\n        },\n        error => {\n          reject(error);\n        }\n      );\n    });\n    return methodCallPromise;\n  }\n\n  publish(data) {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PUBLISH,\n      params: {\n        channel: this.channel,\n        data: data\n      }\n    }, this._centrifuge._methodType.PUBLISH);\n  };\n\n  presence() {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PRESENCE,\n      params: {\n        channel: this.channel\n      }\n    }, this._centrifuge._methodType.PRESENCE);\n  };\n\n  presenceStats() {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PRESENCE_STATS,\n      params: {\n        channel: this.channel\n      }\n    }, this._centrifuge._methodType.PRESENCE_STATS);\n  };\n\n  history(options) {\n    const params = this._centrifuge._getHistoryParams(this.channel, options);\n    return this._methodCall({\n      method: this._centrifuge._methodType.HISTORY,\n      params: params\n    }, this._centrifuge._methodType.HISTORY);\n  };\n}\n","export const JsonMethodType = {\n  CONNECT: 0,\n  SUBSCRIBE: 1,\n  UNSUBSCRIBE: 2,\n  PUBLISH: 3,\n  PRESENCE: 4,\n  PRESENCE_STATS: 5,\n  HISTORY: 6,\n  PING: 7,\n  SEND: 8,\n  RPC: 9,\n  REFRESH: 10,\n  SUB_REFRESH: 11\n};\n\nexport const JsonPushType = {\n  PUBLICATION: 0,\n  JOIN: 1,\n  LEAVE: 2,\n  UNSUB: 3,\n  MESSAGE: 4,\n  SUB: 5\n};\n\nexport class JsonEncoder {\n  encodeCommands(commands) {\n    const encodedCommands = [];\n    for (const i in commands) {\n      if (commands.hasOwnProperty(i)) {\n        encodedCommands.push(JSON.stringify(commands[i]));\n      }\n    }\n    return encodedCommands.join('\\n');\n  }\n}\n\nexport class JsonDecoder {\n  decodeReplies(data) {\n    const replies = [];\n    const encodedReplies = data.split('\\n');\n    for (const i in encodedReplies) {\n      if (encodedReplies.hasOwnProperty(i)) {\n        if (!encodedReplies[i]) {\n          continue;\n        }\n        const reply = JSON.parse(encodedReplies[i]);\n        replies.push(reply);\n      }\n    }\n    return replies;\n  }\n\n  decodeCommandResult(methodType, data) {\n    return data;\n  }\n\n  decodePush(data) {\n    return data;\n  }\n\n  decodePushData(pushType, data) {\n    return data;\n  }\n}\n\n","import EventEmitter from 'events';\nimport Subscription from './subscription';\n\nimport {\n  JsonEncoder,\n  JsonDecoder,\n  JsonMethodType,\n  JsonPushType\n} from './json';\n\nimport {\n  isFunction,\n  log,\n  startsWith,\n  errorExists,\n  backoff,\n  extend\n} from './utils';\n\nconst _errorTimeout = 'timeout';\nconst _errorConnectionClosed = 'connection closed';\n\nexport class Centrifuge extends EventEmitter {\n\n  constructor(url, options) {\n    super();\n    this._url = url;\n    this._websocket = null;\n    this._sockjs = null;\n    this._isSockjs = false;\n    this._binary = false;\n    this._methodType = null;\n    this._pushType = null;\n    this._encoder = null;\n    this._decoder = null;\n    this._status = 'disconnected';\n    this._reconnect = true;\n    this._reconnecting = false;\n    this._transport = null;\n    this._transportName = null;\n    this._transportClosed = true;\n    this._messageId = 0;\n    this._clientID = null;\n    this._refreshRequired = false;\n    this._subs = {};\n    this._serverSubs = {};\n    this._lastSeq = {};\n    this._lastGen = {};\n    this._lastOffset = {};\n    this._lastEpoch = {};\n    this._messages = [];\n    this._isBatching = false;\n    this._isSubscribeBatching = false;\n    this._privateChannels = {};\n    this._numRefreshFailed = 0;\n    this._refreshTimeout = null;\n    this._pingTimeout = null;\n    this._pongTimeout = null;\n    this._subRefreshTimeouts = {};\n    this._retries = 0;\n    this._callbacks = {};\n    this._latency = null;\n    this._latencyStart = null;\n    this._connectData = null;\n    this._token = null;\n    this._xhrID = 0;\n    this._xhrs = {};\n    this._dispatchPromise = Promise.resolve();\n    this._config = {\n      debug: false,\n      name: '',\n      version: '',\n      websocket: null,\n      sockjs: null,\n      minRetry: 1000,\n      maxRetry: 20000,\n      timeout: 5000,\n      ping: true,\n      pingInterval: 25000,\n      pongWaitTimeout: 5000,\n      privateChannelPrefix: '$',\n      onTransportClose: null,\n      sockjsServer: null,\n      sockjsTransports: [\n        'websocket',\n        'xdr-streaming',\n        'xhr-streaming',\n        'eventsource',\n        'iframe-eventsource',\n        'iframe-htmlfile',\n        'xdr-polling',\n        'xhr-polling',\n        'iframe-xhr-polling',\n        'jsonp-polling'\n      ],\n      refreshEndpoint: '/centrifuge/refresh',\n      refreshHeaders: {},\n      refreshParams: {},\n      refreshData: {},\n      refreshAttempts: null,\n      refreshInterval: 1000,\n      onRefreshFailed: null,\n      onRefresh: null,\n      subscribeEndpoint: '/centrifuge/subscribe',\n      subscribeHeaders: {},\n      subscribeParams: {},\n      subRefreshInterval: 1000,\n      onPrivateSubscribe: null\n    };\n    this._configure(options);\n  }\n\n  setToken(token) {\n    this._token = token;\n  }\n\n  setConnectData(data) {\n    this._connectData = data;\n  }\n\n  setRefreshHeaders(headers) {\n    this._config.refreshHeaders = headers;\n  }\n  setRefreshParams(params) {\n    this._config.refreshParams = params;\n  }\n  setRefreshData(data) {\n    this._config.refreshData = data;\n  }\n\n  setSubscribeHeaders(headers) {\n    this._config.subscribeHeaders = headers;\n  }\n  setSubscribeParams(params) {\n    this._config.subscribeParams = params;\n  }\n\n  _ajax(url, params, headers, data, callback) {\n    let query = '';\n    this._debug('sending AJAX request to', url, 'with data', JSON.stringify(data));\n\n    const xhr = (global.XMLHttpRequest ? new global.XMLHttpRequest() : new global.ActiveXObject('Microsoft.XMLHTTP'));\n\n    for (const i in params) {\n      if (params.hasOwnProperty(i)) {\n        if (query.length > 0) {\n          query += '&';\n        }\n        query += encodeURIComponent(i) + '=' + encodeURIComponent(params[i]);\n      }\n    }\n    if (query.length > 0) {\n      query = '?' + query;\n    }\n    xhr.open('POST', url + query, true);\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = true;\n    }\n\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    for (const headerName in headers) {\n      if (headers.hasOwnProperty(headerName)) {\n        xhr.setRequestHeader(headerName, headers[headerName]);\n      }\n    }\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          let data, parsed = false;\n          try {\n            data = JSON.parse(xhr.responseText);\n            parsed = true;\n          } catch (e) {\n            callback({\n              error: 'Invalid JSON. Data was: ' + xhr.responseText,\n              status: 200,\n              data: null\n            });\n          }\n          if (parsed) { // prevents double execution.\n            callback({\n              data: data,\n              status: 200\n            });\n          }\n        } else {\n          this._log('wrong status code in AJAX response', xhr.status);\n          callback({\n            status: xhr.status,\n            data: null\n          });\n        }\n      }\n    };\n    setTimeout(() => xhr.send(JSON.stringify(data)), 20);\n    return xhr;\n  };\n\n  _log() {\n    log('info', arguments);\n  };\n\n  _debug() {\n    if (this._config.debug === true) {\n      log('debug', arguments);\n    }\n  };\n\n  _websocketSupported() {\n    if (this._config.websocket !== null) {\n      return true;\n    }\n    return !(typeof WebSocket !== 'function' && typeof WebSocket !== 'object');\n  };\n\n  _setFormat(format) {\n    if (this._formatOverride(format)) {\n      return;\n    }\n    if (format === 'protobuf') {\n      throw new Error('not implemented by JSON only Centrifuge client – use client with Protobuf');\n    }\n    this._binary = false;\n    this._methodType = JsonMethodType;\n    this._pushType = JsonPushType;\n    this._encoder = new JsonEncoder();\n    this._decoder = new JsonDecoder();\n  }\n\n  _formatOverride(format) {\n    return false;\n  }\n\n  _configure(configuration) {\n    if (!('Promise' in global)) {\n      throw new Error('Promise polyfill required');\n    }\n\n    extend(this._config, configuration || {});\n    this._debug('centrifuge config', this._config);\n\n    if (!this._url) {\n      throw new Error('url required');\n    }\n\n    if (startsWith(this._url, 'ws') && this._url.indexOf('format=protobuf') > -1) {\n      this._setFormat('protobuf');\n    } else {\n      this._setFormat('json');\n    }\n\n    if (startsWith(this._url, 'http')) {\n      this._debug('client will try to connect to SockJS endpoint');\n      if (this._config.sockjs !== null) {\n        this._debug('SockJS explicitly provided in options');\n        this._sockjs = this._config.sockjs;\n      } else {\n        if (typeof global.SockJS === 'undefined') {\n          throw new Error('SockJS not found, use ws:// in url or include SockJS');\n        }\n        this._debug('use globally defined SockJS');\n        this._sockjs = global.SockJS;\n      }\n    } else {\n      this._debug('client will connect to websocket endpoint');\n    }\n  };\n\n  _setStatus(newStatus) {\n    if (this._status !== newStatus) {\n      this._debug('Status', this._status, '->', newStatus);\n      this._status = newStatus;\n    }\n  };\n\n  _isDisconnected() {\n    return this._status === 'disconnected';\n  };\n\n  _isConnecting() {\n    return this._status === 'connecting';\n  };\n\n  _isConnected() {\n    return this._status === 'connected';\n  };\n\n  _nextMessageId() {\n    return ++this._messageId;\n  };\n\n  _resetRetry() {\n    this._debug('reset retries count to 0');\n    this._retries = 0;\n  };\n\n  _getRetryInterval() {\n    const interval = backoff(this._retries, this._config.minRetry, this._config.maxRetry);\n\n    this._retries += 1;\n    return interval;\n  };\n\n  _abortInflightXHRs() {\n    for (const xhrID in this._xhrs) {\n      try {\n        this._xhrs[xhrID].abort();\n      } catch (e) {\n        this._debug('error aborting xhr', e);\n      }\n      delete this._xhrs[xhrID];\n    }\n  };\n\n  _clearConnectedState(reconnect) {\n    this._clientID = null;\n    this._stopPing();\n\n    // fire errbacks of registered outgoing calls.\n    for (const id in this._callbacks) {\n      if (this._callbacks.hasOwnProperty(id)) {\n        const callbacks = this._callbacks[id];\n        clearTimeout(callbacks.timeout);\n        const errback = callbacks.errback;\n        if (!errback) {\n          continue;\n        }\n        errback({error: this._createErrorObject('disconnected')});\n      }\n    }\n    this._callbacks = {};\n\n    // fire unsubscribe events\n    for (const channel in this._subs) {\n      if (this._subs.hasOwnProperty(channel)) {\n        const sub = this._subs[channel];\n\n        if (reconnect) {\n          if (sub._isSuccess()) {\n            sub._triggerUnsubscribe();\n            sub._recover = true;\n          }\n          if (sub._shouldResubscribe()) {\n            sub._setSubscribing();\n          }\n        } else {\n          sub._setUnsubscribed();\n        }\n      }\n    }\n\n    this._abortInflightXHRs();\n\n    // clear refresh timer\n    if (this._refreshTimeout !== null) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n\n    // clear sub refresh timers\n    for (const channel in this._subRefreshTimeouts) {\n      if (this._subRefreshTimeouts.hasOwnProperty(channel) && this._subRefreshTimeouts[channel]) {\n        this._clearSubRefreshTimeout(channel);\n      }\n    }\n    this._subRefreshTimeouts = {};\n\n    if (!this._reconnect) {\n      // completely clear subscriptions\n      this._subs = {};\n    }\n  };\n\n  _isTransportOpen() {\n    if (this._isSockjs) {\n      return this._transport &&\n        this._transport.transport &&\n        this._transport.transport.readyState === this._transport.transport.OPEN;\n    }\n    return this._transport && this._transport.readyState === this._transport.OPEN;\n  };\n\n  _transportSend(commands) {\n    if (!commands.length) {\n      return true;\n    }\n\n    if (!this._isTransportOpen()) {\n      // resolve pending commands with error if transport is not open\n      for (let command in commands) {\n        let id = command.id;\n        if (!(id in this._callbacks)) {\n          continue;\n        }\n        const callbacks = this._callbacks[id];\n        clearTimeout(this._callbacks[id].timeout);\n        delete this._callbacks[id];\n        const errback = callbacks.errback;\n        errback({error: this._createErrorObject(_errorConnectionClosed, 0)});\n      }\n      return false;\n    }\n    this._transport.send(this._encoder.encodeCommands(commands));\n    return true;\n  }\n\n  _setupTransport() {\n    this._isSockjs = false;\n\n    // detect transport to use - SockJS or Websocket\n    if (this._sockjs !== null) {\n      const sockjsOptions = {\n        transports: this._config.sockjsTransports\n      };\n\n      if (this._config.sockjsServer !== null) {\n        sockjsOptions.server = this._config.sockjsServer;\n      }\n      this._isSockjs = true;\n      this._transport = new this._sockjs(this._url, null, sockjsOptions);\n    } else {\n      if (!this._websocketSupported()) {\n        this._debug('No Websocket support and no SockJS configured, can not connect');\n        return;\n      }\n      if (this._config.websocket !== null) {\n        this._websocket = this._config.websocket;\n      } else {\n        this._websocket = WebSocket;\n      }\n      this._transport = new this._websocket(this._url);\n      if (this._binary === true) {\n        this._transport.binaryType = 'arraybuffer';\n      }\n    }\n\n    this._transport.onopen = () => {\n      this._transportClosed = false;\n\n      if (this._isSockjs) {\n        this._transportName = 'sockjs-' + this._transport.transport;\n        this._transport.onheartbeat = () => this._restartPing();\n      } else {\n        this._transportName = 'websocket';\n      }\n\n      // Can omit method here due to zero value.\n      const msg = {\n        // method: this._methodType.CONNECT\n      };\n\n      if (this._token || this._connectData || this._config.name || this._config.version) {\n        msg.params = {};\n      }\n      if (this._token) {\n        msg.params.token = this._token;\n      }\n      if (this._connectData) {\n        msg.params.data = this._connectData;\n      }\n      if (this._config.name) {\n        msg.params.name = this._config.name;\n      }\n      if (this._config.version) {\n        msg.params.version = this._config.version;\n      }\n\n      let subs = {};\n      let hasSubs = false;\n      for (const channel in this._serverSubs) {\n        if (this._serverSubs.hasOwnProperty(channel) && this._serverSubs[channel].recoverable) {\n          hasSubs = true;\n          let sub = {\n            'recover': true\n          };\n          if (this._serverSubs[channel].seq || this._serverSubs[channel].gen) {\n            if (this._serverSubs[channel].seq) {\n              sub['seq'] = this._serverSubs[channel].seq;\n            }\n            if (this._serverSubs[channel].gen) {\n              sub['gen'] = this._serverSubs[channel].gen;\n            }\n          } else {\n            if (this._serverSubs[channel].offset) {\n              sub['offset'] = this._serverSubs[channel].offset;\n            }\n          }\n          if (this._serverSubs[channel].epoch) {\n            sub['epoch'] = this._serverSubs[channel].epoch;\n          }\n          subs[channel] = sub;\n        }\n      }\n      if (hasSubs) {\n        if (!msg.params) {msg.params = {};}\n        msg.params.subs = subs;\n      }\n\n      this._latencyStart = new Date();\n      this._call(msg).then(resolveCtx => {\n        this._connectResponse(this._decoder.decodeCommandResult(this._methodType.CONNECT, resolveCtx.result), hasSubs);\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        const err = rejectCtx.error;\n        if (err.code === 109) { // token expired.\n          this._refreshRequired = true;\n        }\n        this._disconnect('connect error', true);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    };\n\n    this._transport.onerror = error => {\n      this._debug('transport level error', error);\n    };\n\n    this._transport.onclose = closeEvent => {\n      this._transportClosed = true;\n      let reason = _errorConnectionClosed;\n      let needReconnect = true;\n\n      if (closeEvent && 'reason' in closeEvent && closeEvent.reason) {\n        try {\n          const advice = JSON.parse(closeEvent.reason);\n          this._debug('reason is an advice object', advice);\n          reason = advice.reason;\n          needReconnect = advice.reconnect;\n        } catch (e) {\n          reason = closeEvent.reason;\n          this._debug('reason is a plain string', reason);\n        }\n      }\n\n      // onTransportClose callback should be executed every time transport was closed.\n      // This can be helpful to catch failed connection events (because our disconnect\n      // event only called once and every future attempts to connect do not fire disconnect\n      // event again).\n      if (this._config.onTransportClose !== null) {\n        this._config.onTransportClose({\n          event: closeEvent,\n          reason: reason,\n          reconnect: needReconnect\n        });\n      }\n\n      this._disconnect(reason, needReconnect);\n\n      if (this._reconnect === true) {\n        this._reconnecting = true;\n        const interval = this._getRetryInterval();\n\n        this._debug('reconnect after ' + interval + ' milliseconds');\n        setTimeout(() => {\n          if (this._reconnect === true) {\n            if (this._refreshRequired) {\n              this._refresh();\n            } else {\n              this._connect();\n            }\n          }\n        }, interval);\n      }\n    };\n\n    this._transport.onmessage = event => {\n      this._dataReceived(event.data);\n    };\n  };\n\n  rpc(data) {\n    return this._rpc('', data);\n  }\n\n  namedRPC(method, data) {\n    return this._rpc(method, data);\n  }\n\n  _rpc(method, data) {\n    let params = {\n      data: data\n    };\n    if (method !== '') {\n      params.method = method;\n    };\n    const msg = {\n      method: this._methodType.RPC,\n      params: params\n    };\n    return this._methodCall(msg, function (result) {\n      return result;\n    });\n  }\n\n  send(data) {\n    const msg = {\n      method: this._methodType.SEND,\n      params: {\n        data: data\n      }\n    };\n\n    if (!this.isConnected()) {\n      return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n    }\n\n    const sent = this._transportSend([msg]); // can send async message to server without id set\n    if (!sent) {\n      return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n    };\n    return Promise.resolve({});\n  }\n\n  _getHistoryParams(channel, options) {\n    let params = {\n      channel: channel\n    };\n    if (options !== undefined) {\n      if (options.since) {\n        params['use_since'] = true;\n        if (options.since.offset) {\n          params['offset'] = options.since.offset;\n        }\n        if (options.since.epoch) {\n          params['epoch'] = options.since.epoch;\n        }\n      };\n      if (options.limit !== undefined) {\n        params['use_limit'] = true;\n        params['limit'] = options.limit;\n      }\n    };\n    return params;\n  }\n\n  _methodCall(msg, resultCB) {\n    if (!this.isConnected()) {\n      return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n    }\n    return new Promise((resolve, reject) => {\n      this._call(msg).then(resolveCtx => {\n        resolve(resultCB(this._decoder.decodeCommandResult(msg.method, resolveCtx.result)));\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        reject(rejectCtx.error);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    });\n  }\n\n  publish(channel, data) {\n    const msg = {\n      method: this._methodType.PUBLISH,\n      params: {\n        channel: channel,\n        data: data\n      }\n    };\n    return this._methodCall(msg, function (result) {\n      return {};\n    });\n  }\n\n  history(channel, options) {\n    const params = this._getHistoryParams(channel, options);\n    const msg = {\n      method: this._methodType.HISTORY,\n      params: params\n    };\n    return this._methodCall(msg, function (result) {\n      return result;\n    });\n  }\n\n  presence(channel) {\n    const msg = {\n      method: this._methodType.PRESENCE,\n      params: {\n        channel: channel\n      }\n    };\n    return this._methodCall(msg, function (result) {\n      return result;\n    });\n  }\n\n  presenceStats(channel) {\n    const msg = {\n      method: this._methodType.PRESENCE_STATS,\n      params: {\n        channel: channel\n      }\n    };\n    return this._methodCall(msg, function (result) {\n      return result;\n    });\n  }\n\n  _dataReceived(data) {\n    const replies = this._decoder.decodeReplies(data);\n    // we have to guarantee order of events in replies processing - i.e. start processing\n    // next reply only when we finished processing of current one. Without syncing things in\n    // this way we could get wrong publication events order as reply promises resolve\n    // on next loop tick so for loop continues before we finished emitting all reply events.\n    this._dispatchPromise = this._dispatchPromise.then(() => {\n      let finishDispatch;\n      this._dispatchPromise = new Promise(resolve =>{\n        finishDispatch = resolve;\n      });\n      this._dispatchSynchronized(replies, finishDispatch);\n    });\n    this._restartPing();\n  }\n\n  _dispatchSynchronized(replies, finishDispatch) {\n    let p = Promise.resolve();\n    for (const i in replies) {\n      if (replies.hasOwnProperty(i)) {\n        p = p.then(() => {\n          return this._dispatchReply(replies[i]);\n        });\n      }\n    }\n    p = p.then(() => {\n      finishDispatch();\n    });\n  }\n\n  _dispatchReply(reply) {\n    var next;\n    const p = new Promise(resolve =>{\n      next = resolve;\n    });\n\n    if (reply === undefined || reply === null) {\n      this._debug('dispatch: got undefined or null reply');\n      next();\n      return p;\n    }\n\n    const id = reply.id;\n\n    if (id && id > 0) {\n      this._handleReply(reply, next);\n    } else {\n      this._handlePush(reply.result, next);\n    }\n\n    return p;\n  };\n\n  _call(msg) {\n    return new Promise((resolve, reject) => {\n      const id = this._addMessage(msg);\n      this._registerCall(id, resolve, reject);\n    });\n  }\n\n  _connect() {\n    if (this.isConnected()) {\n      this._debug('connect called when already connected');\n      return;\n    }\n    if (this._status === 'connecting') {\n      return;\n    }\n\n    this._debug('start connecting');\n    this._setStatus('connecting');\n    this._clientID = null;\n    this._reconnect = true;\n    this._setupTransport();\n  };\n\n  _disconnect(reason, shouldReconnect) {\n\n    const reconnect = shouldReconnect || false;\n    if (reconnect === false) {\n      this._reconnect = false;\n    }\n\n    if (this._isDisconnected()) {\n      if (!reconnect) {\n        this._clearConnectedState(reconnect);\n      }\n      return;\n    }\n\n    this._clearConnectedState(reconnect);\n\n    this._debug('disconnected:', reason, shouldReconnect);\n    this._setStatus('disconnected');\n\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    if (this._reconnecting === false) {\n      // fire unsubscribe events for server side subs.\n      for (const channel in this._serverSubs) {\n        if (this._serverSubs.hasOwnProperty(channel)) {\n          this.emit('unsubscribe', {channel: channel});\n        }\n      }\n      this.emit('disconnect', {\n        reason: reason,\n        reconnect: reconnect\n      });\n    }\n\n    if (reconnect === false) {\n      this._subs = {};\n      this._serverSubs = {};\n    }\n\n    if (!this._transportClosed) {\n      this._transport.close();\n    }\n  };\n\n  _refreshFailed() {\n    this._numRefreshFailed = 0;\n    if (!this._isDisconnected()) {\n      this._disconnect('refresh failed', false);\n    }\n    if (this._config.onRefreshFailed !== null) {\n      this._config.onRefreshFailed();\n    }\n  };\n\n  _refresh() {\n    // ask application for new connection token.\n    this._debug('refresh token');\n\n    if (this._config.refreshAttempts === 0) {\n      this._debug('refresh attempts set to 0, do not send refresh request at all');\n      this._refreshFailed();\n      return;\n    }\n\n    if (this._refreshTimeout !== null) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n\n    const clientID = this._clientID;\n    const xhrID = this._newXHRID();\n\n    const cb = (resp) => {\n      if (xhrID in this._xhrs) {\n        delete this._xhrs[xhrID];\n      }\n      if (this._clientID !== clientID) {\n        return;\n      }\n      if (resp.error || resp.status !== 200) {\n        // We don't perform any connection status related actions here as we are\n        // relying on server that must close connection eventually.\n        if (resp.error) {\n          this._debug('error refreshing connection token', resp.error);\n        } else {\n          this._debug('error refreshing connection token: wrong status code', resp.status);\n        }\n        this._numRefreshFailed++;\n        if (this._refreshTimeout !== null) {\n          clearTimeout(this._refreshTimeout);\n          this._refreshTimeout = null;\n        }\n        if (this._config.refreshAttempts !== null && this._numRefreshFailed >= this._config.refreshAttempts) {\n          this._refreshFailed();\n          return;\n        }\n        const jitter = Math.round(Math.random() * 1000 * Math.max(this._numRefreshFailed, 20));\n        const interval = this._config.refreshInterval + jitter;\n        this._refreshTimeout = setTimeout(() => this._refresh(), interval);\n        return;\n      }\n      this._numRefreshFailed = 0;\n      this._token = resp.data.token;\n      if (!this._token) {\n        this._refreshFailed();\n        return;\n      }\n      if (this._isDisconnected() && this._reconnect) {\n        this._debug('token refreshed, connect from scratch');\n        this._connect();\n      } else {\n        this._debug('send refreshed token');\n        const msg = {\n          method: this._methodType.REFRESH,\n          params: {\n            token: this._token\n          }\n        };\n        this._call(msg).then(resolveCtx => {\n          this._refreshResponse(this._decoder.decodeCommandResult(this._methodType.REFRESH, resolveCtx.result));\n          if (resolveCtx.next) {\n            resolveCtx.next();\n          }\n        }, rejectCtx => {\n          this._refreshError(rejectCtx.error);\n          if (rejectCtx.next) {\n            rejectCtx.next();\n          }\n        });\n      }\n    };\n\n    if (this._config.onRefresh !== null) {\n      const context = {};\n      this._config.onRefresh(context, cb);\n    } else {\n      const xhr = this._ajax(\n        this._config.refreshEndpoint,\n        this._config.refreshParams,\n        this._config.refreshHeaders,\n        this._config.refreshData,\n        cb\n      );\n      this._xhrs[xhrID] = xhr;\n    }\n  };\n\n  _refreshError(err) {\n    this._debug('refresh error', err);\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    const interval = this._config.refreshInterval + Math.round(Math.random() * 1000);\n    this._refreshTimeout = setTimeout(() => this._refresh(), interval);\n  }\n\n  _refreshResponse(result) {\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    if (result.expires) {\n      this._clientID = result.client;\n      this._refreshTimeout = setTimeout(() => this._refresh(), this._getTTLMilliseconds(result.ttl));\n    }\n  };\n\n  _newXHRID() {\n    this._xhrID++;\n    return this._xhrID;\n  }\n\n  _subRefresh(channel) {\n    this._debug('refresh subscription token for channel', channel);\n\n    if (this._subRefreshTimeouts[channel] !== undefined) {\n      this._clearSubRefreshTimeout(channel);\n    } else {\n      return;\n    }\n\n    const clientID = this._clientID;\n    const xhrID = this._newXHRID();\n\n    const cb = (resp) => {\n      if (xhrID in this._xhrs) {\n        delete this._xhrs[xhrID];\n      }\n      if (resp.error || resp.status !== 200 || this._clientID !== clientID) {\n        return;\n      }\n      let channelsData = {};\n      if (resp.data.channels) {\n        for (const i in resp.data.channels) {\n          const channelData = resp.data.channels[i];\n          if (!channelData.channel) {\n            continue;\n          }\n          channelsData[channelData.channel] = channelData.token;\n        }\n      }\n\n      const token = channelsData[channel];\n      if (!token) {\n        return;\n      }\n      const msg = {\n        method: this._methodType.SUB_REFRESH,\n        params: {\n          channel: channel,\n          token: token\n        }\n      };\n\n      const sub = this._getSub(channel);\n      if (sub === null) {\n        return;\n      }\n\n      this._call(msg).then(resolveCtx => {\n        this._subRefreshResponse(\n          channel,\n          this._decoder.decodeCommandResult(this._methodType.SUB_REFRESH, resolveCtx.result)\n        );\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        this._subRefreshError(channel, rejectCtx.error);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    };\n\n    const data = {\n      client: this._clientID,\n      channels: [channel]\n    };\n\n    if (this._config.onPrivateSubscribe !== null) {\n      this._config.onPrivateSubscribe({\n        data: data\n      }, cb);\n    } else {\n      const xhr = this._ajax(\n        this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n      this._xhrs[xhrID] = xhr;\n    }\n  };\n\n  _clearSubRefreshTimeout(channel) {\n    if (this._subRefreshTimeouts[channel] !== undefined) {\n      clearTimeout(this._subRefreshTimeouts[channel]);\n      delete this._subRefreshTimeouts[channel];\n    }\n  }\n\n  _subRefreshError(channel, err) {\n    this._debug('subscription refresh error', channel, err);\n    this._clearSubRefreshTimeout(channel);\n    const sub = this._getSub(channel);\n    if (sub === null) {\n      return;\n    }\n    const jitter = Math.round(Math.random() * 1000);\n    let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), this._config.subRefreshInterval + jitter);\n    this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    return;\n  }\n\n  _subRefreshResponse(channel, result) {\n    this._debug('subscription refresh success', channel);\n    this._clearSubRefreshTimeout(channel);\n    const sub = this._getSub(channel);\n    if (sub === null) {\n      return;\n    }\n    if (result.expires === true) {\n      let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), this._getTTLMilliseconds(result.ttl));\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    }\n    return;\n  };\n\n  _subscribe(sub, isResubscribe) {\n    this._debug('subscribing on', sub.channel);\n    const channel = sub.channel;\n\n    if (!(channel in this._subs)) {\n      this._subs[channel] = sub;\n    }\n\n    if (!this.isConnected()) {\n      // subscribe will be called later\n      sub._setNew();\n      return;\n    }\n\n    sub._setSubscribing(isResubscribe);\n\n    const msg = {\n      method: this._methodType.SUBSCRIBE,\n      params: {\n        channel: channel\n      }\n    };\n\n    // If channel name does not start with privateChannelPrefix - then we\n    // can just send subscription message to Centrifuge. If channel name\n    // starts with privateChannelPrefix - then this is a private channel\n    // and we should ask web application backend for permission first.\n    if (startsWith(channel, this._config.privateChannelPrefix)) {\n      // private channel.\n      if (this._isSubscribeBatching) {\n        this._privateChannels[channel] = true;\n      } else {\n        this.startSubscribeBatching();\n        this._subscribe(sub);\n        this.stopSubscribeBatching();\n      }\n    } else {\n      const recover = sub._needRecover();\n\n      if (recover === true) {\n        msg.params.recover = true;\n        const seq = this._getLastSeq(channel);\n        const gen = this._getLastGen(channel);\n        if (seq || gen) {\n          if (seq) {\n            msg.params.seq = seq;\n          }\n          if (gen) {\n            msg.params.gen = gen;\n          }\n        } else {\n          const offset = this._getLastOffset(channel);\n          if (offset) {\n            msg.params.offset = offset;\n          }\n        }\n        const epoch = this._getLastEpoch(channel);\n        if (epoch) {\n          msg.params.epoch = epoch;\n        }\n      }\n\n      this._call(msg).then(resolveCtx => {\n        this._subscribeResponse(\n          channel,\n          recover,\n          this._decoder.decodeCommandResult(this._methodType.SUBSCRIBE, resolveCtx.result)\n        );\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        this._subscribeError(channel, rejectCtx.error);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    }\n  };\n\n  _unsubscribe(sub) {\n    delete this._subs[sub.channel];\n    delete this._lastOffset[sub.channel];\n    delete this._lastSeq[sub.channel];\n    delete this._lastGen[sub.channel];\n    if (this.isConnected()) {\n      // No need to unsubscribe in disconnected state - i.e. client already unsubscribed.\n      this._addMessage({\n        method: this._methodType.UNSUBSCRIBE,\n        params: {\n          channel: sub.channel\n        }\n      });\n    }\n  };\n\n  _getTTLMilliseconds(ttl) {\n    // https://stackoverflow.com/questions/12633405/what-is-the-maximum-delay-for-setinterval\n    return Math.min(ttl * 1000, 2147483647);\n  }\n\n  getSub(channel) {\n    return this._getSub(channel);\n  }\n\n  _getSub(channel) {\n    const sub = this._subs[channel];\n    if (!sub) {\n      return null;\n    }\n    return sub;\n  };\n\n  _isServerSub(channel) {\n    return this._serverSubs[channel] !== undefined;\n  };\n\n  _connectResponse(result, isRecover) {\n    const wasReconnecting = this._reconnecting;\n    this._reconnecting = false;\n    this._resetRetry();\n    this._refreshRequired = false;\n\n    if (this.isConnected()) {\n      return;\n    }\n\n    if (this._latencyStart !== null) {\n      this._latency = (new Date()).getTime() - this._latencyStart.getTime();\n      this._latencyStart = null;\n    }\n\n    this._clientID = result.client;\n    this._setStatus('connected');\n\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n    }\n\n    if (result.expires) {\n      this._refreshTimeout = setTimeout(() => this._refresh(), this._getTTLMilliseconds(result.ttl));\n    }\n\n    this.startBatching();\n    this.startSubscribeBatching();\n    for (const channel in this._subs) {\n      if (this._subs.hasOwnProperty(channel)) {\n        const sub = this._subs[channel];\n        if (sub._shouldResubscribe()) {\n          this._subscribe(sub, wasReconnecting);\n        }\n      }\n    }\n    this.stopSubscribeBatching();\n    this.stopBatching();\n\n    this._startPing();\n\n    const ctx = {\n      client: result.client,\n      transport: this._transportName,\n      latency: this._latency\n    };\n    if (result.data) {\n      ctx.data = result.data;\n    }\n\n    this.emit('connect', ctx);\n\n    if (result.subs) {\n      this._processServerSubs(result.subs);\n    }\n  };\n\n  _processServerSubs(subs) {\n    for (const channel in subs) {\n      if (subs.hasOwnProperty(channel)) {\n        const sub = subs[channel];\n        const isResubscribe = this._serverSubs[channel] !== undefined;\n        let subCtx = {channel: channel, isResubscribe: isResubscribe};\n        subCtx = this._expandSubscribeContext(subCtx, sub);\n        this.emit('subscribe', subCtx);\n      }\n    }\n    for (const channel in subs) {\n      if (subs.hasOwnProperty(channel)) {\n        const sub = subs[channel];\n        if (sub.recovered) {\n          let pubs = sub.publications;\n          if (pubs && pubs.length > 0) {\n\n            // handle legacy order.\n            // TODO: remove as soon as Centrifuge v1 released.\n            if (pubs.length > 1 && (!pubs[0].offset || pubs[0].offset > pubs[1].offset)) {\n              pubs = pubs.reverse();\n            }\n\n            for (let i in pubs) {\n              if (pubs.hasOwnProperty(i)) {\n                this._handlePublication(channel, pubs[i]);\n              }\n            }\n          }\n        }\n        this._serverSubs[channel] = {\n          'seq': sub.seq,\n          'gen': sub.gen,\n          'offset': sub.offset,\n          'epoch': sub.epoch,\n          'recoverable': sub.recoverable\n        };\n      }\n    }\n  };\n\n  _stopPing() {\n    if (this._pongTimeout !== null) {\n      clearTimeout(this._pongTimeout);\n      this._pongTimeout = null;\n    }\n    if (this._pingTimeout !== null) {\n      clearTimeout(this._pingTimeout);\n      this._pingTimeout = null;\n    }\n  };\n\n  _startPing() {\n    if (this._config.ping !== true || this._config.pingInterval <= 0) {\n      return;\n    }\n    if (!this.isConnected()) {\n      return;\n    }\n\n    this._pingTimeout = setTimeout(() => {\n      if (!this.isConnected()) {\n        this._stopPing();\n        return;\n      }\n      this.ping();\n      this._pongTimeout = setTimeout(() => {\n        this._disconnect('no ping', true);\n      }, this._config.pongWaitTimeout);\n    }, this._config.pingInterval);\n  };\n\n  _restartPing() {\n    this._stopPing();\n    this._startPing();\n  };\n\n  _subscribeError(channel, error) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    if (!sub._isSubscribing()) {\n      return;\n    }\n    if (error.code === 0 && error.message === _errorTimeout) { // client side timeout.\n      this._disconnect('timeout', true);\n      return;\n    }\n    sub._setSubscribeError(error);\n  };\n\n  _expandSubscribeContext(ctx, result) {\n    let recovered = false;\n    if ('recovered' in result) {\n      recovered = result.recovered;\n    }\n    ctx.recovered = recovered;\n\n    let positioned = false;\n    if ('positioned' in result) {\n      positioned = result.positioned;\n    }\n    let epoch = '';\n    if ('epoch' in result) {\n      epoch = result.epoch;\n    }\n    let offset = 0;\n    if ('offset' in result) {\n      offset = result.offset;\n    }\n    if (positioned) {\n      ctx.streamPosition = {\n        'offset': offset,\n        'epoch': epoch\n      };\n    };\n    return ctx;\n  }\n\n  _subscribeResponse(channel, isRecover, result) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    if (!sub._isSubscribing()) {\n      return;\n    }\n    sub._setSubscribeSuccess(result);\n\n    let pubs = result.publications;\n    if (pubs && pubs.length > 0) {\n      if (pubs.length >= 2 && !pubs[0].offset && !pubs[1].offset) {\n        // handle legacy order.\n        pubs = pubs.reverse();\n      }\n      for (let i in pubs) {\n        if (pubs.hasOwnProperty(i)) {\n          this._handlePublication(channel, pubs[i]);\n        }\n      }\n    }\n\n    if (result.recoverable && (!isRecover || !result.recovered)) {\n      this._lastSeq[channel] = result.seq || 0;\n      this._lastGen[channel] = result.gen || 0;\n      this._lastOffset[channel] = result.offset || 0;\n    }\n\n    this._lastEpoch[channel] = result.epoch || '';\n\n    if (result.recoverable) {\n      sub._recoverable = true;\n    }\n\n    if (result.expires === true) {\n      let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), this._getTTLMilliseconds(result.ttl));\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    }\n  };\n\n  _handleReply(reply, next) {\n    const id = reply.id;\n    const result = reply.result;\n\n    if (!(id in this._callbacks)) {\n      next();\n      return;\n    }\n    const callbacks = this._callbacks[id];\n    clearTimeout(this._callbacks[id].timeout);\n    delete this._callbacks[id];\n\n    if (!errorExists(reply)) {\n      const callback = callbacks.callback;\n      if (!callback) {\n        return;\n      }\n      callback({result, next});\n    } else {\n      const errback = callbacks.errback;\n      if (!errback) {\n        next();\n        return;\n      }\n      const error = reply.error;\n      errback({error, next});\n    }\n  }\n\n  _handleJoin(channel, join) {\n    const ctx = {'info': join.info};\n    const sub = this._getSub(channel);\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        ctx.channel = channel;\n        this.emit('join', ctx);\n      }\n      return;\n    }\n    sub.emit('join', ctx);\n  };\n\n  _handleLeave(channel, leave) {\n    const ctx = {'info': leave.info};\n    const sub = this._getSub(channel);\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        ctx.channel = channel;\n        this.emit('leave', ctx);\n      }\n      return;\n    }\n    sub.emit('leave', ctx);\n  };\n\n  _handleUnsub(channel, unsub) {\n    const ctx = {};\n    const sub = this._getSub(channel);\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        delete this._serverSubs[channel];\n        ctx.channel = channel;\n        this.emit('unsubscribe', ctx);\n      }\n      return;\n    }\n    sub.unsubscribe();\n    if (unsub.resubscribe === true) {\n      sub.subscribe();\n    }\n  };\n\n  _handleSub(channel, sub) {\n    this._serverSubs[channel] = {\n      'seq': sub.seq,\n      'gen': sub.gen,\n      'offset': sub.offset,\n      'epoch': sub.epoch,\n      'recoverable': sub.recoverable\n    };\n    let ctx = {'channel': channel, isResubscribe: false};\n    ctx = this._expandSubscribeContext(ctx, sub);\n    this.emit('subscribe', ctx);\n  };\n\n  _handlePublication(channel, pub) {\n    const sub = this._getSub(channel);\n    const ctx = {\n      'data': pub.data,\n      'seq': pub.seq,\n      'gen': pub.gen,\n      'offset': pub.offset\n    };\n    if (pub.info) {\n      ctx.info = pub.info;\n    }\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        if (pub.seq !== undefined) {\n          this._serverSubs[channel].seq = pub.seq;\n        }\n        if (pub.gen !== undefined) {\n          this._serverSubs[channel].gen = pub.gen;\n        }\n        if (pub.offset !== undefined) {\n          this._serverSubs[channel].offset = pub.offset;\n        }\n        ctx.channel = channel;\n        this.emit('publish', ctx);\n      }\n      return;\n    }\n    if (pub.seq !== undefined) {\n      this._lastSeq[channel] = pub.seq;\n    }\n    if (pub.gen !== undefined) {\n      this._lastGen[channel] = pub.gen;\n    }\n    if (pub.offset !== undefined) {\n      this._lastOffset[channel] = pub.offset;\n    }\n    sub.emit('publish', ctx);\n  };\n\n  _handleMessage(message) {\n    this.emit('message', message.data);\n  };\n\n  _handlePush(data, next) {\n    const push = this._decoder.decodePush(data);\n    let type = 0;\n    if ('type' in push) {\n      type = push['type'];\n    }\n    const channel = push.channel;\n\n    if (type === this._pushType.PUBLICATION) {\n      const pub = this._decoder.decodePushData(this._pushType.PUBLICATION, push.data);\n      this._handlePublication(channel, pub);\n    } else if (type === this._pushType.MESSAGE) {\n      const message = this._decoder.decodePushData(this._pushType.MESSAGE, push.data);\n      this._handleMessage(message);\n    } else if (type === this._pushType.JOIN) {\n      const join = this._decoder.decodePushData(this._pushType.JOIN, push.data);\n      this._handleJoin(channel, join);\n    } else if (type === this._pushType.LEAVE) {\n      const leave = this._decoder.decodePushData(this._pushType.LEAVE, push.data);\n      this._handleLeave(channel, leave);\n    } else if (type === this._pushType.UNSUB) {\n      const unsub = this._decoder.decodePushData(this._pushType.UNSUB, push.data);\n      this._handleUnsub(channel, unsub);\n    } else if (type === this._pushType.SUB) {\n      const sub = this._decoder.decodePushData(this._pushType.SUB, push.data);\n      this._handleSub(channel, sub);\n    }\n    next();\n  }\n\n  _flush() {\n    const messages = this._messages.slice(0);\n    this._messages = [];\n    this._transportSend(messages);\n  };\n\n  _ping() {\n    const msg = {\n      method: this._methodType.PING\n    };\n    this._call(msg).then(resolveCtx => {\n      this._pingResponse(this._decoder.decodeCommandResult(this._methodType.PING, resolveCtx.result));\n      if (resolveCtx.next) {\n        resolveCtx.next();\n      }\n    }, rejectCtx => {\n      this._debug('ping error', rejectCtx.error);\n      if (rejectCtx.next) {\n        rejectCtx.next();\n      }\n    });\n  };\n\n  _pingResponse(result) {\n    if (!this.isConnected()) {\n      return;\n    }\n    this._stopPing();\n    this._startPing();\n  }\n\n  _getLastSeq(channel) {\n    const lastSeq = this._lastSeq[channel];\n    if (lastSeq) {\n      return lastSeq;\n    }\n    return 0;\n  };\n\n  _getLastOffset(channel) {\n    const lastOffset = this._lastOffset[channel];\n    if (lastOffset) {\n      return lastOffset;\n    }\n    return 0;\n  };\n\n  _getLastGen(channel) {\n    const lastGen = this._lastGen[channel];\n    if (lastGen) {\n      return lastGen;\n    }\n    return 0;\n  };\n\n  _getLastEpoch(channel) {\n    const lastEpoch = this._lastEpoch[channel];\n    if (lastEpoch) {\n      return lastEpoch;\n    }\n    return '';\n  };\n\n  _createErrorObject(message, code) {\n    const errObject = {\n      message: message,\n      code: code || 0\n    };\n\n    return errObject;\n  };\n\n  _registerCall(id, callback, errback) {\n    this._callbacks[id] = {\n      callback: callback,\n      errback: errback,\n      timeout: null\n    };\n    this._callbacks[id].timeout = setTimeout(() => {\n      delete this._callbacks[id];\n      if (isFunction(errback)) {\n        errback({error: this._createErrorObject(_errorTimeout)});\n      }\n    }, this._config.timeout);\n  };\n\n  _addMessage(message) {\n    let id = this._nextMessageId();\n    message.id = id;\n    if (this._isBatching === true) {\n      this._messages.push(message);\n    } else {\n      this._transportSend([message]);\n    }\n    return id;\n  };\n\n  isConnected() {\n    return this._isConnected();\n  }\n\n  connect() {\n    this._connect();\n  };\n\n  disconnect() {\n    this._disconnect('client', false);\n  };\n\n  ping() {\n    return this._ping();\n  }\n\n  startBatching() {\n    // start collecting messages without sending them to Centrifuge until flush\n    // method called\n    this._isBatching = true;\n  };\n\n  stopBatching() {\n    this._isBatching = false;\n    this._flush();\n  };\n\n  startSubscribeBatching() {\n    // start collecting private channels to create bulk authentication\n    // request to subscribeEndpoint when stopSubscribeBatching will be called\n    this._isSubscribeBatching = true;\n  };\n\n  stopSubscribeBatching() {\n    // create request to subscribeEndpoint with collected private channels\n    // to ask if this client can subscribe on each channel\n    this._isSubscribeBatching = false;\n    const authChannels = this._privateChannels;\n    this._privateChannels = {};\n\n    const channels = [];\n\n    for (const channel in authChannels) {\n      if (authChannels.hasOwnProperty(channel)) {\n        const sub = this._getSub(channel);\n        if (!sub) {\n          continue;\n        }\n        channels.push(channel);\n      }\n    }\n\n    if (channels.length === 0) {\n      this._debug('no private channels found, no need to make request');\n      return;\n    }\n\n    const data = {\n      client: this._clientID,\n      channels: channels\n    };\n\n    const clientID = this._clientID;\n    const xhrID = this._newXHRID();\n\n    const cb = (resp) => {\n      if (xhrID in this._xhrs) {\n        delete this._xhrs[xhrID];\n      }\n      if (this._clientID !== clientID) {\n        return;\n      }\n      if (resp.error || resp.status !== 200) {\n        this._debug('authorization request failed');\n        for (const i in channels) {\n          if (channels.hasOwnProperty(i)) {\n            const channel = channels[i];\n            this._subscribeError(channel, this._createErrorObject('authorization request failed'));\n          }\n        }\n        return;\n      }\n\n      let channelsData = {};\n      if (resp.data.channels) {\n        for (const i in resp.data.channels) {\n          const channelData = resp.data.channels[i];\n          if (!channelData.channel) {\n            continue;\n          }\n          channelsData[channelData.channel] = channelData.token;\n        }\n      }\n\n      // try to send all subscriptions in one request.\n      let batch = false;\n\n      if (!this._isBatching) {\n        this.startBatching();\n        batch = true;\n      }\n\n      for (const i in channels) {\n        if (channels.hasOwnProperty(i)) {\n          const channel = channels[i];\n          const token = channelsData[channel];\n\n          if (!token) {\n            // subscription:error\n            this._subscribeError(channel, this._createErrorObject('permission denied', 103));\n            continue;\n          } else {\n            const msg = {\n              method: this._methodType.SUBSCRIBE,\n              params: {\n                channel: channel,\n                token: token\n              }\n            };\n\n            const sub = this._getSub(channel);\n            if (sub === null) {\n              continue;\n            }\n\n            const recover = sub._needRecover();\n\n            if (recover === true) {\n              msg.params.recover = true;\n              const seq = this._getLastSeq(channel);\n              const gen = this._getLastGen(channel);\n              if (seq || gen) {\n                if (seq) {\n                  msg.params.seq = seq;\n                }\n                if (gen) {\n                  msg.params.gen = gen;\n                }\n              } else {\n                const offset = this._getLastOffset(channel);\n                if (offset) {\n                  msg.params.offset = offset;\n                }\n              }\n              const epoch = this._getLastEpoch(channel);\n              if (epoch) {\n                msg.params.epoch = epoch;\n              }\n            }\n            this._call(msg).then(resolveCtx => {\n              this._subscribeResponse(\n                channel,\n                recover,\n                this._decoder.decodeCommandResult(this._methodType.SUBSCRIBE, resolveCtx.result)\n              );\n              if (resolveCtx.next) {\n                resolveCtx.next();\n              }\n            }, rejectCtx => {\n              this._subscribeError(channel, rejectCtx.error);\n              if (rejectCtx.next) {\n                rejectCtx.next();\n              }\n            });\n          }\n        }\n      }\n\n      if (batch) {\n        this.stopBatching();\n      }\n\n    };\n\n    if (this._config.onPrivateSubscribe !== null) {\n      this._config.onPrivateSubscribe({\n        data: data\n      }, cb);\n    } else {\n      const xhr = this._ajax(\n        this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n      this._xhrs[xhrID] = xhr;\n    }\n  };\n\n  subscribe(channel, events) {\n    const currentSub = this._getSub(channel);\n    if (currentSub !== null) {\n      currentSub._setEvents(events);\n      if (currentSub._isUnsubscribed()) {\n        currentSub.subscribe();\n      }\n      return currentSub;\n    }\n    const sub = new Subscription(this, channel, events);\n    this._subs[channel] = sub;\n    sub.subscribe();\n    return sub;\n  };\n}\n","import {Centrifuge} from './centrifuge.js';\nexport default Centrifuge;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(889);\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}