{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///centrifuge.min.js","webpack:///webpack/bootstrap fe3a0c95ebde1c2cb254","webpack:///./src/centrifuge.js","webpack:///./src/subscription.js","webpack:///./src/json.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/index.js","webpack:///./node_modules/events/events.js","webpack:///./src/utils.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","10","global","_interopRequireDefault","obj","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","create","constructor","value","writable","setPrototypeOf","__proto__","Centrifuge","undefined","_typeof","Symbol","iterator","_createClass","defineProperties","target","props","length","descriptor","key","protoProps","staticProps","_events","_events2","_subscription","_subscription2","_json","_utils","_EventEmitter","url","options","_this","getPrototypeOf","_url","_websocket","_sockjs","_isSockjs","_binary","_methodType","_pushType","_encoder","_decoder","_status","_reconnect","_reconnecting","_transport","_transportName","_transportClosed","_messageId","_clientID","_refreshRequired","_subs","_serverSubs","_lastSeq","_lastGen","_lastOffset","_lastEpoch","_messages","_isBatching","_isSubscribeBatching","_privateChannels","_numRefreshFailed","_refreshTimeout","_pingTimeout","_pongTimeout","_subRefreshTimeouts","_retries","_callbacks","_latency","_latencyStart","_connectData","_token","_xhrID","_xhrs","_dispatchPromise","Promise","resolve","_config","debug","websocket","sockjs","promise","middleware","minRetry","maxRetry","timeout","ping","pingInterval","pongWaitTimeout","privateChannelPrefix","onTransportClose","sockjsServer","sockjsTransports","refreshEndpoint","refreshHeaders","refreshParams","refreshData","refreshAttempts","refreshInterval","onRefreshFailed","onRefresh","subscribeEndpoint","subscribeHeaders","subscribeParams","subRefreshInterval","onPrivateSubscribe","_configure","token","data","headers","params","_len","arguments","fns","Array","_key","callback","_this2","query","_debug","JSON","stringify","xhr","XMLHttpRequest","ActiveXObject","encodeURIComponent","open","withCredentials","setRequestHeader","headerName","onreadystatechange","readyState","status","parsed","parse","responseText","e","error","_log","setTimeout","send","log","WebSocket","format","_formatOverride","Error","JsonMethodType","JsonPushType","JsonEncoder","JsonDecoder","configuration","extend","startsWith","indexOf","_setFormat","SockJS","newStatus","interval","backoff","xhrID","abort","reconnect","_stopPing","id","callbacks","clearTimeout","errback","_createErrorObject","channel","sub","_isSuccess","_triggerUnsubscribe","_recover","_shouldResubscribe","_setSubscribing","_setUnsubscribed","_abortInflightXHRs","_clearSubRefreshTimeout","transport","OPEN","commands","_isTransportOpen","command","encodeCommands","_this3","sockjsOptions","transports","server","_websocketSupported","binaryType","onopen","onheartbeat","_restartPing","msg","subs","hasSubs","recoverable","recover","seq","gen","offset","epoch","Date","_call","then","resolveCtx","_connectResponse","decodeCommandResult","CONNECT","result","next","rejectCtx","code","_disconnect","onerror","onclose","closeEvent","reason","needReconnect","advice","event","_getRetryInterval","_refresh","_connect","onmessage","_dataReceived","_rpc","method","_this4","RPC","isConnected","reject","SEND","_transportSend","PUBLISH","_this5","replies","decodeReplies","finishDispatch","_dispatchSynchronized","isArray","forEach","mw","_this6","_hookMiddleware","_dispatchReply","reply","_handleReply","_handlePush","_this7","_addMessage","_registerCall","_setStatus","_setupTransport","shouldReconnect","_isDisconnected","_clearConnectedState","emit","close","_this8","_refreshFailed","clientID","_newXHRID","cb","resp","jitter","Math","round","random","max","REFRESH","_refreshResponse","_refreshError","context","_ajax","err","_this9","_this10","expires","client","_getTTLMilliseconds","ttl","_this11","channelsData","channels","channelData","SUB_REFRESH","_getSub","_subRefreshResponse","_subRefreshError","_this12","subRefreshTimeout","_subRefresh","_this13","isResubscribe","_this14","_setNew","SUBSCRIBE","startSubscribeBatching","_subscribe","stopSubscribeBatching","_needRecover","_getLastSeq","_getLastGen","_getLastOffset","_getLastEpoch","_subscribeResponse","_subscribeError","UNSUBSCRIBE","min","isRecover","_this15","wasReconnecting","_resetRetry","getTime","startBatching","stopBatching","_startPing","ctx","latency","_processServerSubs","recovered","subCtx","pubs","publications","reverse","_handlePublication","_this16","_isSubscribing","message","_setSubscribeError","_this17","_setSubscribeSuccess","_recoverable","errorExists","join","info","_isServerSub","leave","unsub","unsubscribe","resubscribe","subscribe","pub","push","decodePush","type","PUBLICATION","decodePushData","MESSAGE","_handleMessage","JOIN","_handleJoin","LEAVE","_handleLeave","UNSUB","_handleUnsub","SUB","_handleSub","messages","slice","_this18","PING","_pingResponse","lastSeq","lastOffset","lastGen","lastEpoch","_this19","isFunction","_nextMessageId","_isConnected","_ping","_flush","_this20","authChannels","batch","_ret2","events","currentSub","_setEvents","_isUnsubscribed","Subscription","EventEmitter","11","_STATE_NEW","centrifuge","_centrifuge","_error","_isResubscribe","_ready","_subscriptionPromise","_noResubscribe","_initializePromise","_promises","_promiseId","on","errContext","_resolve","_reject","toString","knownEvents","ev","successContext","_getSubscribeSuccessContext","_getSubscribeErrorContext","noResubscribe","needTrigger","subscribeErrorContext","_unsubscribe","subPromise","_isError","res","rej","_nextPromiseId","_methodCall","PRESENCE","PRESENCE_STATS","HISTORY","12","encodedCommands","encodedReplies","split","methodType","pushType","3","g","Function","eval","window","31","6","ProcessEmitWarning","warning","console","warn","init","$getMaxListeners","that","_maxListeners","defaultMaxListeners","_addListener","listener","prepend","existing","_eventsCount","newListener","unshift","warned","w","String","emitter","count","onceWrapper","args","fired","removeListener","wrapFn","ReflectApply","_onceWrap","state","wrapped","bind","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","listenerCount","arr","copy","spliceOne","list","index","pop","ret","ReflectOwnKeys","R","Reflect","apply","receiver","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","concat","NumberIsNaN","Number","isNaN","set","arg","RangeError","setMaxListeners","getMaxListeners","doError","er","handler","len","listeners","addListener","prependListener","once","prependOnceListener","position","originalListener","shift","off","removeAllListeners","keys","rawListeners","eventNames","7","prefix","lastIndexOf","level","logger","step","pow","floor","a","b"],"mappings":"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","file":"centrifuge.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Centrifuge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Centrifuge\"] = factory();\n\telse\n\t\troot[\"Centrifuge\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Centrifuge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Centrifuge\"] = factory();\n\telse\n\t\troot[\"Centrifuge\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 31);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 10:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Centrifuge = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = __webpack_require__(6);\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _subscription = __webpack_require__(11);\n\nvar _subscription2 = _interopRequireDefault(_subscription);\n\nvar _json = __webpack_require__(12);\n\nvar _utils = __webpack_require__(7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _errorTimeout = 'timeout';\nvar _errorConnectionClosed = 'connection closed';\n\nvar Centrifuge = exports.Centrifuge = function (_EventEmitter) {\n  _inherits(Centrifuge, _EventEmitter);\n\n  function Centrifuge(url, options) {\n    _classCallCheck(this, Centrifuge);\n\n    var _this = _possibleConstructorReturn(this, (Centrifuge.__proto__ || Object.getPrototypeOf(Centrifuge)).call(this));\n\n    _this._url = url;\n    _this._websocket = null;\n    _this._sockjs = null;\n    _this._isSockjs = false;\n    _this._binary = false;\n    _this._methodType = null;\n    _this._pushType = null;\n    _this._encoder = null;\n    _this._decoder = null;\n    _this._status = 'disconnected';\n    _this._reconnect = true;\n    _this._reconnecting = false;\n    _this._transport = null;\n    _this._transportName = null;\n    _this._transportClosed = true;\n    _this._messageId = 0;\n    _this._clientID = null;\n    _this._refreshRequired = false;\n    _this._subs = {};\n    _this._serverSubs = {};\n    _this._lastSeq = {};\n    _this._lastGen = {};\n    _this._lastOffset = {};\n    _this._lastEpoch = {};\n    _this._messages = [];\n    _this._isBatching = false;\n    _this._isSubscribeBatching = false;\n    _this._privateChannels = {};\n    _this._numRefreshFailed = 0;\n    _this._refreshTimeout = null;\n    _this._pingTimeout = null;\n    _this._pongTimeout = null;\n    _this._subRefreshTimeouts = {};\n    _this._retries = 0;\n    _this._callbacks = {};\n    _this._latency = null;\n    _this._latencyStart = null;\n    _this._connectData = null;\n    _this._token = null;\n    _this._xhrID = 0;\n    _this._xhrs = {};\n    _this._dispatchPromise = Promise.resolve();\n    _this._config = {\n      debug: false,\n      websocket: null,\n      sockjs: null,\n      promise: null,\n      middleware: [],\n      minRetry: 1000,\n      maxRetry: 20000,\n      timeout: 5000,\n      ping: true,\n      pingInterval: 25000,\n      pongWaitTimeout: 5000,\n      privateChannelPrefix: '$',\n      onTransportClose: null,\n      sockjsServer: null,\n      sockjsTransports: ['websocket', 'xdr-streaming', 'xhr-streaming', 'eventsource', 'iframe-eventsource', 'iframe-htmlfile', 'xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling'],\n      refreshEndpoint: '/centrifuge/refresh',\n      refreshHeaders: {},\n      refreshParams: {},\n      refreshData: {},\n      refreshAttempts: null,\n      refreshInterval: 1000,\n      onRefreshFailed: null,\n      onRefresh: null,\n      subscribeEndpoint: '/centrifuge/subscribe',\n      subscribeHeaders: {},\n      subscribeParams: {},\n      subRefreshInterval: 1000,\n      onPrivateSubscribe: null\n    };\n    _this._configure(options);\n    return _this;\n  }\n\n  _createClass(Centrifuge, [{\n    key: 'setToken',\n    value: function setToken(token) {\n      this._token = token;\n    }\n  }, {\n    key: 'setConnectData',\n    value: function setConnectData(data) {\n      this._connectData = data;\n    }\n  }, {\n    key: 'setRefreshHeaders',\n    value: function setRefreshHeaders(headers) {\n      this._config.refreshHeaders = headers;\n    }\n  }, {\n    key: 'setRefreshParams',\n    value: function setRefreshParams(params) {\n      this._config.refreshParams = params;\n    }\n  }, {\n    key: 'setRefreshData',\n    value: function setRefreshData(data) {\n      this._config.refreshData = data;\n    }\n  }, {\n    key: 'setSubscribeHeaders',\n    value: function setSubscribeHeaders(headers) {\n      this._config.subscribeHeaders = headers;\n    }\n  }, {\n    key: 'setSubscribeParams',\n    value: function setSubscribeParams(params) {\n      this._config.subscribeParams = params;\n    }\n  }, {\n    key: 'middleware',\n    value: function middleware() {\n      for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {\n        fns[_key] = arguments[_key];\n      }\n\n      this._config.middleware = fns;\n    }\n  }, {\n    key: '_ajax',\n    value: function _ajax(url, params, headers, data, callback) {\n      var _this2 = this;\n\n      var query = '';\n      this._debug('sending AJAX request to', url, 'with data', JSON.stringify(data));\n\n      var xhr = global.XMLHttpRequest ? new global.XMLHttpRequest() : new global.ActiveXObject('Microsoft.XMLHTTP');\n\n      for (var i in params) {\n        if (params.hasOwnProperty(i)) {\n          if (query.length > 0) {\n            query += '&';\n          }\n          query += encodeURIComponent(i) + '=' + encodeURIComponent(params[i]);\n        }\n      }\n      if (query.length > 0) {\n        query = '?' + query;\n      }\n      xhr.open('POST', url + query, true);\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = true;\n      }\n\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n      xhr.setRequestHeader('Content-Type', 'application/json');\n      for (var headerName in headers) {\n        if (headers.hasOwnProperty(headerName)) {\n          xhr.setRequestHeader(headerName, headers[headerName]);\n        }\n      }\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var _data = void 0,\n                parsed = false;\n            try {\n              _data = JSON.parse(xhr.responseText);\n              parsed = true;\n            } catch (e) {\n              callback({\n                error: 'Invalid JSON. Data was: ' + xhr.responseText,\n                status: 200,\n                data: null\n              });\n            }\n            if (parsed) {\n              // prevents double execution.\n              callback({\n                data: _data,\n                status: 200\n              });\n            }\n          } else {\n            _this2._log('wrong status code in AJAX response', xhr.status);\n            callback({\n              status: xhr.status,\n              data: null\n            });\n          }\n        }\n      };\n      setTimeout(function () {\n        return xhr.send(JSON.stringify(data));\n      }, 20);\n      return xhr;\n    }\n  }, {\n    key: '_log',\n    value: function _log() {\n      (0, _utils.log)('info', arguments);\n    }\n  }, {\n    key: '_debug',\n    value: function _debug() {\n      if (this._config.debug === true) {\n        (0, _utils.log)('debug', arguments);\n      }\n    }\n  }, {\n    key: '_websocketSupported',\n    value: function _websocketSupported() {\n      if (this._config.websocket !== null) {\n        return true;\n      }\n      return !(typeof WebSocket !== 'function' && (typeof WebSocket === 'undefined' ? 'undefined' : _typeof(WebSocket)) !== 'object');\n    }\n  }, {\n    key: '_setFormat',\n    value: function _setFormat(format) {\n      if (this._formatOverride(format)) {\n        return;\n      }\n      if (format === 'protobuf') {\n        throw new Error('not implemented by JSON only Centrifuge client – use client with Protobuf');\n      }\n      this._binary = false;\n      this._methodType = _json.JsonMethodType;\n      this._pushType = _json.JsonPushType;\n      this._encoder = new _json.JsonEncoder();\n      this._decoder = new _json.JsonDecoder();\n    }\n  }, {\n    key: '_formatOverride',\n    value: function _formatOverride(format) {\n      return false;\n    }\n  }, {\n    key: '_configure',\n    value: function _configure(configuration) {\n      if (!('Promise' in global)) {\n        throw new Error('Promise polyfill required');\n      }\n\n      (0, _utils.extend)(this._config, configuration || {});\n      this._debug('centrifuge config', this._config);\n\n      if (!this._url) {\n        throw new Error('url required');\n      }\n\n      if ((0, _utils.startsWith)(this._url, 'ws') && this._url.indexOf('format=protobuf') > -1) {\n        this._setFormat('protobuf');\n      } else {\n        this._setFormat('json');\n      }\n\n      if ((0, _utils.startsWith)(this._url, 'http')) {\n        this._debug('client will try to connect to SockJS endpoint');\n        if (this._config.sockjs !== null) {\n          this._debug('SockJS explicitly provided in options');\n          this._sockjs = this._config.sockjs;\n        } else {\n          if (typeof global.SockJS === 'undefined') {\n            throw new Error('SockJS not found, use ws:// in url or include SockJS');\n          }\n          this._debug('use globally defined SockJS');\n          this._sockjs = global.SockJS;\n        }\n      } else {\n        this._debug('client will connect to websocket endpoint');\n      }\n    }\n  }, {\n    key: '_setStatus',\n    value: function _setStatus(newStatus) {\n      if (this._status !== newStatus) {\n        this._debug('Status', this._status, '->', newStatus);\n        this._status = newStatus;\n      }\n    }\n  }, {\n    key: '_isDisconnected',\n    value: function _isDisconnected() {\n      return this._status === 'disconnected';\n    }\n  }, {\n    key: '_isConnecting',\n    value: function _isConnecting() {\n      return this._status === 'connecting';\n    }\n  }, {\n    key: '_isConnected',\n    value: function _isConnected() {\n      return this._status === 'connected';\n    }\n  }, {\n    key: '_nextMessageId',\n    value: function _nextMessageId() {\n      return ++this._messageId;\n    }\n  }, {\n    key: '_resetRetry',\n    value: function _resetRetry() {\n      this._debug('reset retries count to 0');\n      this._retries = 0;\n    }\n  }, {\n    key: '_getRetryInterval',\n    value: function _getRetryInterval() {\n      var interval = (0, _utils.backoff)(this._retries, this._config.minRetry, this._config.maxRetry);\n\n      this._retries += 1;\n      return interval;\n    }\n  }, {\n    key: '_abortInflightXHRs',\n    value: function _abortInflightXHRs() {\n      for (var xhrID in this._xhrs) {\n        try {\n          this._xhrs[xhrID].abort();\n        } catch (e) {\n          this._debug('error aborting xhr', e);\n        }\n        delete this._xhrs[xhrID];\n      }\n    }\n  }, {\n    key: '_clearConnectedState',\n    value: function _clearConnectedState(reconnect) {\n      this._clientID = null;\n      this._stopPing();\n\n      // fire errbacks of registered outgoing calls.\n      for (var id in this._callbacks) {\n        if (this._callbacks.hasOwnProperty(id)) {\n          var callbacks = this._callbacks[id];\n          clearTimeout(callbacks.timeout);\n          var errback = callbacks.errback;\n          if (!errback) {\n            continue;\n          }\n          errback({ error: this._createErrorObject('disconnected') });\n        }\n      }\n      this._callbacks = {};\n\n      // fire unsubscribe events\n      for (var channel in this._subs) {\n        if (this._subs.hasOwnProperty(channel)) {\n          var sub = this._subs[channel];\n\n          if (reconnect) {\n            if (sub._isSuccess()) {\n              sub._triggerUnsubscribe();\n              sub._recover = true;\n            }\n            if (sub._shouldResubscribe()) {\n              sub._setSubscribing();\n            }\n          } else {\n            sub._setUnsubscribed();\n          }\n        }\n      }\n\n      this._abortInflightXHRs();\n\n      // clear refresh timer\n      if (this._refreshTimeout !== null) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n\n      // clear sub refresh timers\n      for (var _channel in this._subRefreshTimeouts) {\n        if (this._subRefreshTimeouts.hasOwnProperty(_channel) && this._subRefreshTimeouts[_channel]) {\n          this._clearSubRefreshTimeout(_channel);\n        }\n      }\n      this._subRefreshTimeouts = {};\n\n      if (!this._reconnect) {\n        // completely clear subscriptions\n        this._subs = {};\n      }\n    }\n  }, {\n    key: '_isTransportOpen',\n    value: function _isTransportOpen() {\n      if (this._isSockjs) {\n        return this._transport && this._transport.transport && this._transport.transport.readyState === this._transport.transport.OPEN;\n      }\n      return this._transport && this._transport.readyState === this._transport.OPEN;\n    }\n  }, {\n    key: '_transportSend',\n    value: function _transportSend(commands) {\n      if (!commands.length) {\n        return true;\n      }\n\n      if (!this._isTransportOpen()) {\n        // resolve pending commands with error if transport is not open\n        for (var command in commands) {\n          var id = command.id;\n          if (!(id in this._callbacks)) {\n            continue;\n          }\n          var callbacks = this._callbacks[id];\n          clearTimeout(this._callbacks[id].timeout);\n          delete this._callbacks[id];\n          var errback = callbacks.errback;\n          errback({ error: this._createErrorObject(_errorConnectionClosed, 0) });\n        }\n        return false;\n      }\n      this._transport.send(this._encoder.encodeCommands(commands));\n      return true;\n    }\n  }, {\n    key: '_setupTransport',\n    value: function _setupTransport() {\n      var _this3 = this;\n\n      this._isSockjs = false;\n\n      // detect transport to use - SockJS or Websocket\n      if (this._sockjs !== null) {\n        var sockjsOptions = {\n          transports: this._config.sockjsTransports\n        };\n\n        if (this._config.sockjsServer !== null) {\n          sockjsOptions.server = this._config.sockjsServer;\n        }\n        this._isSockjs = true;\n        this._transport = new this._sockjs(this._url, null, sockjsOptions);\n      } else {\n        if (!this._websocketSupported()) {\n          this._debug('No Websocket support and no SockJS configured, can not connect');\n          return;\n        }\n        if (this._config.websocket !== null) {\n          this._websocket = this._config.websocket;\n        } else {\n          this._websocket = WebSocket;\n        }\n        this._transport = new this._websocket(this._url);\n        if (this._binary === true) {\n          this._transport.binaryType = 'arraybuffer';\n        }\n      }\n\n      this._transport.onopen = function () {\n        _this3._transportClosed = false;\n\n        if (_this3._isSockjs) {\n          _this3._transportName = 'sockjs-' + _this3._transport.transport;\n          _this3._transport.onheartbeat = function () {\n            return _this3._restartPing();\n          };\n        } else {\n          _this3._transportName = 'websocket';\n        }\n\n        // Can omit method here due to zero value.\n        var msg = {\n          // method: this._methodType.CONNECT\n        };\n\n        if (_this3._token || _this3._connectData) {\n          msg.params = {};\n        }\n\n        if (_this3._token) {\n          msg.params.token = _this3._token;\n        }\n\n        if (_this3._connectData) {\n          msg.params.data = _this3._connectData;\n        }\n\n        var subs = {};\n        var hasSubs = false;\n        for (var channel in _this3._serverSubs) {\n          if (_this3._serverSubs.hasOwnProperty(channel) && _this3._serverSubs[channel].recoverable) {\n            hasSubs = true;\n            var sub = {\n              'recover': true\n            };\n            if (_this3._serverSubs[channel].seq || _this3._serverSubs[channel].gen) {\n              if (_this3._serverSubs[channel].seq) {\n                sub['seq'] = _this3._serverSubs[channel].seq;\n              }\n              if (_this3._serverSubs[channel].gen) {\n                sub['gen'] = _this3._serverSubs[channel].gen;\n              }\n            } else {\n              if (_this3._serverSubs[channel].offset) {\n                sub['offset'] = _this3._serverSubs[channel].offset;\n              }\n            }\n            if (_this3._serverSubs[channel].epoch) {\n              sub['epoch'] = _this3._serverSubs[channel].epoch;\n            }\n            subs[channel] = sub;\n          }\n        }\n        if (hasSubs) {\n          if (!msg.params) {\n            msg.params = {};\n          }\n          msg.params.subs = subs;\n        }\n\n        _this3._latencyStart = new Date();\n        _this3._call(msg).then(function (resolveCtx) {\n          _this3._connectResponse(_this3._decoder.decodeCommandResult(_this3._methodType.CONNECT, resolveCtx.result), hasSubs);\n          if (resolveCtx.next) {\n            resolveCtx.next();\n          }\n        }, function (rejectCtx) {\n          var err = rejectCtx.error;\n          if (err.code === 109) {\n            // token expired.\n            _this3._refreshRequired = true;\n          }\n          _this3._disconnect('connect error', true);\n          if (rejectCtx.next) {\n            rejectCtx.next();\n          }\n        });\n      };\n\n      this._transport.onerror = function (error) {\n        _this3._debug('transport level error', error);\n      };\n\n      this._transport.onclose = function (closeEvent) {\n        _this3._transportClosed = true;\n        var reason = _errorConnectionClosed;\n        var needReconnect = true;\n\n        if (closeEvent && 'reason' in closeEvent && closeEvent.reason) {\n          try {\n            var advice = JSON.parse(closeEvent.reason);\n            _this3._debug('reason is an advice object', advice);\n            reason = advice.reason;\n            needReconnect = advice.reconnect;\n          } catch (e) {\n            reason = closeEvent.reason;\n            _this3._debug('reason is a plain string', reason);\n          }\n        }\n\n        // onTransportClose callback should be executed every time transport was closed.\n        // This can be helpful to catch failed connection events (because our disconnect\n        // event only called once and every future attempts to connect do not fire disconnect\n        // event again).\n        if (_this3._config.onTransportClose !== null) {\n          _this3._config.onTransportClose({\n            event: closeEvent,\n            reason: reason,\n            reconnect: needReconnect\n          });\n        }\n\n        _this3._disconnect(reason, needReconnect);\n\n        if (_this3._reconnect === true) {\n          _this3._reconnecting = true;\n          var interval = _this3._getRetryInterval();\n\n          _this3._debug('reconnect after ' + interval + ' milliseconds');\n          setTimeout(function () {\n            if (_this3._reconnect === true) {\n              if (_this3._refreshRequired) {\n                _this3._refresh();\n              } else {\n                _this3._connect();\n              }\n            }\n          }, interval);\n        }\n      };\n\n      this._transport.onmessage = function (event) {\n        _this3._dataReceived(event.data);\n      };\n    }\n  }, {\n    key: 'rpc',\n    value: function rpc(data) {\n      return this._rpc('', data);\n    }\n  }, {\n    key: 'namedRPC',\n    value: function namedRPC(method, data) {\n      return this._rpc(method, data);\n    }\n  }, {\n    key: '_rpc',\n    value: function _rpc(method, data) {\n      var _this4 = this;\n\n      var params = {\n        data: data\n      };\n      if (method !== '') {\n        params.method = method;\n      };\n      var msg = {\n        method: this._methodType.RPC,\n        params: params\n      };\n\n      if (!this.isConnected()) {\n        return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n      }\n\n      return this._call(msg).then(function (resolveCtx) {\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n        return _this4._decoder.decodeCommandResult(_this4._methodType.RPC, resolveCtx.result);\n      }, function (rejectCtx) {\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n        return Promise.reject(rejectCtx.error);\n      });\n    }\n  }, {\n    key: 'send',\n    value: function send(data) {\n      var msg = {\n        method: this._methodType.SEND,\n        params: {\n          data: data\n        }\n      };\n\n      if (!this.isConnected()) {\n        return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n      }\n\n      var sent = this._transportSend([msg]); // can send async message to server without id set\n      if (!sent) {\n        return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n      };\n      return Promise.resolve({});\n    }\n  }, {\n    key: 'publish',\n    value: function publish(channel, data) {\n      var msg = {\n        method: this._methodType.PUBLISH,\n        params: {\n          channel: channel,\n          data: data\n        }\n      };\n\n      if (!this.isConnected()) {\n        return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n      }\n\n      return this._call(msg).then(function (result) {\n        if (result.next) {\n          result.next();\n        }\n        return {};\n      });\n    }\n  }, {\n    key: '_dataReceived',\n    value: function _dataReceived(data) {\n      var _this5 = this;\n\n      var replies = this._decoder.decodeReplies(data);\n      // we have to guarantee order of events in replies processing - i.e. start processing\n      // next reply only when we finished processing of current one. Without syncing things in\n      // this way we could get wrong publication events order as reply promises resolve\n      // on next loop tick so for loop continues before we finished emitting all reply events.\n      this._dispatchPromise = this._dispatchPromise.then(function () {\n        var finishDispatch = void 0;\n        _this5._dispatchPromise = new Promise(function (resolve) {\n          finishDispatch = resolve;\n        });\n        _this5._dispatchSynchronized(replies, finishDispatch);\n      });\n      this._restartPing();\n    }\n  }, {\n    key: '_hookMiddleware',\n    value: function _hookMiddleware(data) {\n      var middleware = this._config.middleware;\n\n      if (Array.isArray(middleware)) {\n        middleware.forEach(function (mw) {\n          if (typeof mw === 'function') {\n            mw(data);\n          }\n        });\n      }\n\n      if (typeof middleware === 'function') {\n        middleware(data);\n      }\n    }\n  }, {\n    key: '_dispatchSynchronized',\n    value: function _dispatchSynchronized(replies, finishDispatch) {\n      var _this6 = this;\n\n      var p = Promise.resolve();\n\n      var _loop = function _loop(i) {\n        if (replies.hasOwnProperty(i)) {\n          p = p.then(function () {\n            _this6._hookMiddleware(replies[i]);\n            return _this6._dispatchReply(replies[i]);\n          });\n        }\n      };\n\n      for (var i in replies) {\n        _loop(i);\n      }\n      p = p.then(function () {\n        finishDispatch();\n      });\n    }\n  }, {\n    key: '_dispatchReply',\n    value: function _dispatchReply(reply) {\n      var next;\n      var p = new Promise(function (resolve) {\n        next = resolve;\n      });\n\n      if (reply === undefined || reply === null) {\n        this._debug('dispatch: got undefined or null reply');\n        next();\n        return p;\n      }\n\n      var id = reply.id;\n\n      if (id && id > 0) {\n        this._handleReply(reply, next);\n      } else {\n        this._handlePush(reply.result, next);\n      }\n\n      return p;\n    }\n  }, {\n    key: '_call',\n    value: function _call(msg) {\n      var _this7 = this;\n\n      return new Promise(function (resolve, reject) {\n        var id = _this7._addMessage(msg);\n        _this7._registerCall(id, resolve, reject);\n      });\n    }\n  }, {\n    key: '_connect',\n    value: function _connect() {\n      if (this.isConnected()) {\n        this._debug('connect called when already connected');\n        return;\n      }\n      if (this._status === 'connecting') {\n        return;\n      }\n\n      this._debug('start connecting');\n      this._setStatus('connecting');\n      this._clientID = null;\n      this._reconnect = true;\n      this._setupTransport();\n    }\n  }, {\n    key: '_disconnect',\n    value: function _disconnect(reason, shouldReconnect) {\n\n      var reconnect = shouldReconnect || false;\n      if (reconnect === false) {\n        this._reconnect = false;\n      }\n\n      if (this._isDisconnected()) {\n        if (!reconnect) {\n          this._clearConnectedState(reconnect);\n        }\n        return;\n      }\n\n      this._clearConnectedState(reconnect);\n\n      this._debug('disconnected:', reason, shouldReconnect);\n      this._setStatus('disconnected');\n\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n      if (this._reconnecting === false) {\n        // fire unsubscribe events for server side subs.\n        for (var channel in this._serverSubs) {\n          if (this._serverSubs.hasOwnProperty(channel)) {\n            this.emit('unsubscribe', { channel: channel });\n          }\n        }\n        this.emit('disconnect', {\n          reason: reason,\n          reconnect: reconnect\n        });\n      }\n\n      if (reconnect === false) {\n        this._subs = {};\n        this._serverSubs = {};\n      }\n\n      if (!this._transportClosed) {\n        this._transport.close();\n      }\n    }\n  }, {\n    key: '_refreshFailed',\n    value: function _refreshFailed() {\n      this._numRefreshFailed = 0;\n      if (!this._isDisconnected()) {\n        this._disconnect('refresh failed', false);\n      }\n      if (this._config.onRefreshFailed !== null) {\n        this._config.onRefreshFailed();\n      }\n    }\n  }, {\n    key: '_refresh',\n    value: function _refresh() {\n      var _this8 = this;\n\n      // ask application for new connection token.\n      this._debug('refresh token');\n\n      if (this._config.refreshAttempts === 0) {\n        this._debug('refresh attempts set to 0, do not send refresh request at all');\n        this._refreshFailed();\n        return;\n      }\n\n      if (this._refreshTimeout !== null) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n\n      var clientID = this._clientID;\n      var xhrID = this._newXHRID();\n\n      var cb = function cb(resp) {\n        if (xhrID in _this8._xhrs) {\n          delete _this8._xhrs[xhrID];\n        }\n        if (_this8._clientID !== clientID) {\n          return;\n        }\n        if (resp.error || resp.status !== 200) {\n          // We don't perform any connection status related actions here as we are\n          // relying on server that must close connection eventually.\n          if (resp.error) {\n            _this8._debug('error refreshing connection token', resp.error);\n          } else {\n            _this8._debug('error refreshing connection token: wrong status code', resp.status);\n          }\n          _this8._numRefreshFailed++;\n          if (_this8._refreshTimeout !== null) {\n            clearTimeout(_this8._refreshTimeout);\n            _this8._refreshTimeout = null;\n          }\n          if (_this8._config.refreshAttempts !== null && _this8._numRefreshFailed >= _this8._config.refreshAttempts) {\n            _this8._refreshFailed();\n            return;\n          }\n          var jitter = Math.round(Math.random() * 1000 * Math.max(_this8._numRefreshFailed, 20));\n          var interval = _this8._config.refreshInterval + jitter;\n          _this8._refreshTimeout = setTimeout(function () {\n            return _this8._refresh();\n          }, interval);\n          return;\n        }\n        _this8._numRefreshFailed = 0;\n        _this8._token = resp.data.token;\n        if (!_this8._token) {\n          _this8._refreshFailed();\n          return;\n        }\n        if (_this8._isDisconnected() && _this8._reconnect) {\n          _this8._debug('token refreshed, connect from scratch');\n          _this8._connect();\n        } else {\n          _this8._debug('send refreshed token');\n          var msg = {\n            method: _this8._methodType.REFRESH,\n            params: {\n              token: _this8._token\n            }\n          };\n          _this8._call(msg).then(function (resolveCtx) {\n            _this8._refreshResponse(_this8._decoder.decodeCommandResult(_this8._methodType.REFRESH, resolveCtx.result));\n            if (resolveCtx.next) {\n              resolveCtx.next();\n            }\n          }, function (rejectCtx) {\n            _this8._refreshError(rejectCtx.error);\n            if (rejectCtx.next) {\n              rejectCtx.next();\n            }\n          });\n        }\n      };\n\n      if (this._config.onRefresh !== null) {\n        var context = {};\n        this._config.onRefresh(context, cb);\n      } else {\n        var xhr = this._ajax(this._config.refreshEndpoint, this._config.refreshParams, this._config.refreshHeaders, this._config.refreshData, cb);\n        this._xhrs[xhrID] = xhr;\n      }\n    }\n  }, {\n    key: '_refreshError',\n    value: function _refreshError(err) {\n      var _this9 = this;\n\n      this._debug('refresh error', err);\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n      var interval = this._config.refreshInterval + Math.round(Math.random() * 1000);\n      this._refreshTimeout = setTimeout(function () {\n        return _this9._refresh();\n      }, interval);\n    }\n  }, {\n    key: '_refreshResponse',\n    value: function _refreshResponse(result) {\n      var _this10 = this;\n\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n      if (result.expires) {\n        this._clientID = result.client;\n        this._refreshTimeout = setTimeout(function () {\n          return _this10._refresh();\n        }, this._getTTLMilliseconds(result.ttl));\n      }\n    }\n  }, {\n    key: '_newXHRID',\n    value: function _newXHRID() {\n      this._xhrID++;\n      return this._xhrID;\n    }\n  }, {\n    key: '_subRefresh',\n    value: function _subRefresh(channel) {\n      var _this11 = this;\n\n      this._debug('refresh subscription token for channel', channel);\n\n      if (this._subRefreshTimeouts[channel] !== undefined) {\n        this._clearSubRefreshTimeout(channel);\n      } else {\n        return;\n      }\n\n      var clientID = this._clientID;\n      var xhrID = this._newXHRID();\n\n      var cb = function cb(resp) {\n        if (xhrID in _this11._xhrs) {\n          delete _this11._xhrs[xhrID];\n        }\n        if (resp.error || resp.status !== 200 || _this11._clientID !== clientID) {\n          return;\n        }\n        var channelsData = {};\n        if (resp.data.channels) {\n          for (var i in resp.data.channels) {\n            var channelData = resp.data.channels[i];\n            if (!channelData.channel) {\n              continue;\n            }\n            channelsData[channelData.channel] = channelData.token;\n          }\n        }\n\n        var token = channelsData[channel];\n        if (!token) {\n          return;\n        }\n        var msg = {\n          method: _this11._methodType.SUB_REFRESH,\n          params: {\n            channel: channel,\n            token: token\n          }\n        };\n\n        var sub = _this11._getSub(channel);\n        if (sub === null) {\n          return;\n        }\n\n        _this11._call(msg).then(function (resolveCtx) {\n          _this11._subRefreshResponse(channel, _this11._decoder.decodeCommandResult(_this11._methodType.SUB_REFRESH, resolveCtx.result));\n          if (resolveCtx.next) {\n            resolveCtx.next();\n          }\n        }, function (rejectCtx) {\n          _this11._subRefreshError(channel, rejectCtx.error);\n          if (rejectCtx.next) {\n            rejectCtx.next();\n          }\n        });\n      };\n\n      var data = {\n        client: this._clientID,\n        channels: [channel]\n      };\n\n      if (this._config.onPrivateSubscribe !== null) {\n        this._config.onPrivateSubscribe({\n          data: data\n        }, cb);\n      } else {\n        var xhr = this._ajax(this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n        this._xhrs[xhrID] = xhr;\n      }\n    }\n  }, {\n    key: '_clearSubRefreshTimeout',\n    value: function _clearSubRefreshTimeout(channel) {\n      if (this._subRefreshTimeouts[channel] !== undefined) {\n        clearTimeout(this._subRefreshTimeouts[channel]);\n        delete this._subRefreshTimeouts[channel];\n      }\n    }\n  }, {\n    key: '_subRefreshError',\n    value: function _subRefreshError(channel, err) {\n      var _this12 = this;\n\n      this._debug('subscription refresh error', channel, err);\n      this._clearSubRefreshTimeout(channel);\n      var sub = this._getSub(channel);\n      if (sub === null) {\n        return;\n      }\n      var jitter = Math.round(Math.random() * 1000);\n      var subRefreshTimeout = setTimeout(function () {\n        return _this12._subRefresh(channel);\n      }, this._config.subRefreshInterval + jitter);\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n      return;\n    }\n  }, {\n    key: '_subRefreshResponse',\n    value: function _subRefreshResponse(channel, result) {\n      var _this13 = this;\n\n      this._debug('subscription refresh success', channel);\n      this._clearSubRefreshTimeout(channel);\n      var sub = this._getSub(channel);\n      if (sub === null) {\n        return;\n      }\n      if (result.expires === true) {\n        var subRefreshTimeout = setTimeout(function () {\n          return _this13._subRefresh(channel);\n        }, this._getTTLMilliseconds(result.ttl));\n        this._subRefreshTimeouts[channel] = subRefreshTimeout;\n      }\n      return;\n    }\n  }, {\n    key: '_subscribe',\n    value: function _subscribe(sub, isResubscribe) {\n      var _this14 = this;\n\n      this._debug('subscribing on', sub.channel);\n      var channel = sub.channel;\n\n      if (!(channel in this._subs)) {\n        this._subs[channel] = sub;\n      }\n\n      if (!this.isConnected()) {\n        // subscribe will be called later\n        sub._setNew();\n        return;\n      }\n\n      sub._setSubscribing(isResubscribe);\n\n      var msg = {\n        method: this._methodType.SUBSCRIBE,\n        params: {\n          channel: channel\n        }\n      };\n\n      // If channel name does not start with privateChannelPrefix - then we\n      // can just send subscription message to Centrifuge. If channel name\n      // starts with privateChannelPrefix - then this is a private channel\n      // and we should ask web application backend for permission first.\n      if ((0, _utils.startsWith)(channel, this._config.privateChannelPrefix)) {\n        // private channel.\n        if (this._isSubscribeBatching) {\n          this._privateChannels[channel] = true;\n        } else {\n          this.startSubscribeBatching();\n          this._subscribe(sub);\n          this.stopSubscribeBatching();\n        }\n      } else {\n        var recover = sub._needRecover();\n\n        if (recover === true) {\n          msg.params.recover = true;\n          var seq = this._getLastSeq(channel);\n          var gen = this._getLastGen(channel);\n          if (seq || gen) {\n            if (seq) {\n              msg.params.seq = seq;\n            }\n            if (gen) {\n              msg.params.gen = gen;\n            }\n          } else {\n            var offset = this._getLastOffset(channel);\n            if (offset) {\n              msg.params.offset = offset;\n            }\n          }\n          var epoch = this._getLastEpoch(channel);\n          if (epoch) {\n            msg.params.epoch = epoch;\n          }\n        }\n\n        this._call(msg).then(function (resolveCtx) {\n          _this14._subscribeResponse(channel, recover, _this14._decoder.decodeCommandResult(_this14._methodType.SUBSCRIBE, resolveCtx.result));\n          if (resolveCtx.next) {\n            resolveCtx.next();\n          }\n        }, function (rejectCtx) {\n          _this14._subscribeError(channel, rejectCtx.error);\n          if (rejectCtx.next) {\n            rejectCtx.next();\n          }\n        });\n      }\n    }\n  }, {\n    key: '_unsubscribe',\n    value: function _unsubscribe(sub) {\n      delete this._subs[sub.channel];\n      delete this._lastOffset[sub.channel];\n      delete this._lastSeq[sub.channel];\n      delete this._lastGen[sub.channel];\n      if (this.isConnected()) {\n        // No need to unsubscribe in disconnected state - i.e. client already unsubscribed.\n        this._addMessage({\n          method: this._methodType.UNSUBSCRIBE,\n          params: {\n            channel: sub.channel\n          }\n        });\n      }\n    }\n  }, {\n    key: '_getTTLMilliseconds',\n    value: function _getTTLMilliseconds(ttl) {\n      // https://stackoverflow.com/questions/12633405/what-is-the-maximum-delay-for-setinterval\n      return Math.min(ttl * 1000, 2147483647);\n    }\n  }, {\n    key: 'getSub',\n    value: function getSub(channel) {\n      return this._getSub(channel);\n    }\n  }, {\n    key: '_getSub',\n    value: function _getSub(channel) {\n      var sub = this._subs[channel];\n      if (!sub) {\n        return null;\n      }\n      return sub;\n    }\n  }, {\n    key: '_isServerSub',\n    value: function _isServerSub(channel) {\n      return this._serverSubs[channel] !== undefined;\n    }\n  }, {\n    key: '_connectResponse',\n    value: function _connectResponse(result, isRecover) {\n      var _this15 = this;\n\n      var wasReconnecting = this._reconnecting;\n      this._reconnecting = false;\n      this._resetRetry();\n      this._refreshRequired = false;\n\n      if (this.isConnected()) {\n        return;\n      }\n\n      if (this._latencyStart !== null) {\n        this._latency = new Date().getTime() - this._latencyStart.getTime();\n        this._latencyStart = null;\n      }\n\n      this._clientID = result.client;\n      this._setStatus('connected');\n\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n      }\n\n      if (result.expires) {\n        this._refreshTimeout = setTimeout(function () {\n          return _this15._refresh();\n        }, this._getTTLMilliseconds(result.ttl));\n      }\n\n      this.startBatching();\n      this.startSubscribeBatching();\n      for (var channel in this._subs) {\n        if (this._subs.hasOwnProperty(channel)) {\n          var sub = this._subs[channel];\n          if (sub._shouldResubscribe()) {\n            this._subscribe(sub, wasReconnecting);\n          }\n        }\n      }\n      this.stopSubscribeBatching();\n      this.stopBatching();\n\n      this._startPing();\n\n      var ctx = {\n        client: result.client,\n        transport: this._transportName,\n        latency: this._latency\n      };\n      if (result.data) {\n        ctx.data = result.data;\n      }\n\n      this.emit('connect', ctx);\n\n      if (result.subs) {\n        this._processServerSubs(result.subs, isRecover);\n      }\n    }\n  }, {\n    key: '_processServerSubs',\n    value: function _processServerSubs(subs, isRecover) {\n      for (var channel in subs) {\n        if (subs.hasOwnProperty(channel)) {\n          var sub = subs[channel];\n          var recovered = sub.recovered === true;\n          var subCtx = { channel: channel, isResubscribe: isRecover, recovered: recovered };\n          this.emit('subscribe', subCtx);\n        }\n      }\n      for (var _channel2 in subs) {\n        if (subs.hasOwnProperty(_channel2)) {\n          var _sub = subs[_channel2];\n          if (_sub.recovered) {\n            var pubs = _sub.publications;\n            if (pubs && pubs.length > 0) {\n\n              // handle legacy order.\n              // TODO: remove as soon as Centrifuge v1 released.\n              if (pubs.length > 1 && (!pubs[0].offset || pubs[0].offset > pubs[1].offset)) {\n                pubs = pubs.reverse();\n              }\n\n              for (var i in pubs) {\n                if (pubs.hasOwnProperty(i)) {\n                  this._handlePublication(_channel2, pubs[i]);\n                }\n              }\n            }\n          }\n          this._serverSubs[_channel2] = {\n            'seq': _sub.seq,\n            'gen': _sub.gen,\n            'offset': _sub.offset,\n            'epoch': _sub.epoch,\n            'recoverable': _sub.recoverable\n          };\n        }\n      }\n    }\n  }, {\n    key: '_stopPing',\n    value: function _stopPing() {\n      if (this._pongTimeout !== null) {\n        clearTimeout(this._pongTimeout);\n        this._pongTimeout = null;\n      }\n      if (this._pingTimeout !== null) {\n        clearTimeout(this._pingTimeout);\n        this._pingTimeout = null;\n      }\n    }\n  }, {\n    key: '_startPing',\n    value: function _startPing() {\n      var _this16 = this;\n\n      if (this._config.ping !== true || this._config.pingInterval <= 0) {\n        return;\n      }\n      if (!this.isConnected()) {\n        return;\n      }\n\n      this._pingTimeout = setTimeout(function () {\n        if (!_this16.isConnected()) {\n          _this16._stopPing();\n          return;\n        }\n        _this16.ping();\n        _this16._pongTimeout = setTimeout(function () {\n          _this16._disconnect('no ping', true);\n        }, _this16._config.pongWaitTimeout);\n      }, this._config.pingInterval);\n    }\n  }, {\n    key: '_restartPing',\n    value: function _restartPing() {\n      this._stopPing();\n      this._startPing();\n    }\n  }, {\n    key: '_subscribeError',\n    value: function _subscribeError(channel, error) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      if (!sub._isSubscribing()) {\n        return;\n      }\n      if (error.code === 0 && error.message === _errorTimeout) {\n        // client side timeout.\n        this._disconnect('timeout', true);\n        return;\n      }\n      sub._setSubscribeError(error);\n    }\n  }, {\n    key: '_subscribeResponse',\n    value: function _subscribeResponse(channel, isRecover, result) {\n      var _this17 = this;\n\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      if (!sub._isSubscribing()) {\n        return;\n      }\n\n      var recovered = false;\n      if ('recovered' in result) {\n        recovered = result.recovered;\n      }\n      sub._setSubscribeSuccess(recovered);\n\n      var pubs = result.publications;\n      if (pubs && pubs.length > 0) {\n        if (pubs.length >= 2 && !pubs[0].offset && !pubs[1].offset) {\n          // handle legacy order.\n          pubs = pubs.reverse();\n        }\n        for (var i in pubs) {\n          if (pubs.hasOwnProperty(i)) {\n            this._handlePublication(channel, pubs[i]);\n          }\n        }\n      }\n\n      if (result.recoverable && (!isRecover || !recovered)) {\n        this._lastSeq[channel] = result.seq || 0;\n        this._lastGen[channel] = result.gen || 0;\n        this._lastOffset[channel] = result.offset || 0;\n      }\n\n      this._lastEpoch[channel] = result.epoch || '';\n\n      if (result.recoverable) {\n        sub._recoverable = true;\n      }\n\n      if (result.expires === true) {\n        var subRefreshTimeout = setTimeout(function () {\n          return _this17._subRefresh(channel);\n        }, this._getTTLMilliseconds(result.ttl));\n        this._subRefreshTimeouts[channel] = subRefreshTimeout;\n      }\n    }\n  }, {\n    key: '_handleReply',\n    value: function _handleReply(reply, next) {\n      var id = reply.id;\n      var result = reply.result;\n\n      if (!(id in this._callbacks)) {\n        next();\n        return;\n      }\n      var callbacks = this._callbacks[id];\n      clearTimeout(this._callbacks[id].timeout);\n      delete this._callbacks[id];\n\n      if (!(0, _utils.errorExists)(reply)) {\n        var callback = callbacks.callback;\n        if (!callback) {\n          return;\n        }\n        callback({ result: result, next: next });\n      } else {\n        var errback = callbacks.errback;\n        if (!errback) {\n          next();\n          return;\n        }\n        var error = reply.error;\n        errback({ error: error, next: next });\n      }\n    }\n  }, {\n    key: '_handleJoin',\n    value: function _handleJoin(channel, join) {\n      var ctx = { 'info': join.info };\n      var sub = this._getSub(channel);\n      if (!sub) {\n        if (this._isServerSub(channel)) {\n          ctx.channel = channel;\n          this.emit('join', ctx);\n        }\n        return;\n      }\n      sub.emit('join', ctx);\n    }\n  }, {\n    key: '_handleLeave',\n    value: function _handleLeave(channel, leave) {\n      var ctx = { 'info': leave.info };\n      var sub = this._getSub(channel);\n      if (!sub) {\n        if (this._isServerSub(channel)) {\n          ctx.channel = channel;\n          this.emit('leave', ctx);\n        }\n        return;\n      }\n      sub.emit('leave', ctx);\n    }\n  }, {\n    key: '_handleUnsub',\n    value: function _handleUnsub(channel, unsub) {\n      var ctx = {};\n      var sub = this._getSub(channel);\n      if (!sub) {\n        if (this._isServerSub(channel)) {\n          delete this._serverSubs[channel];\n          ctx.channel = channel;\n          this.emit('unsubscribe', ctx);\n        }\n        return;\n      }\n      sub.unsubscribe();\n      if (unsub.resubscribe === true) {\n        sub.subscribe();\n      }\n    }\n  }, {\n    key: '_handleSub',\n    value: function _handleSub(channel, sub) {\n      this._serverSubs[channel] = {\n        'seq': sub.seq,\n        'gen': sub.gen,\n        'offset': sub.offset,\n        'epoch': sub.epoch,\n        'recoverable': sub.recoverable\n      };\n      var ctx = { 'channel': channel, isResubscribe: false, recovered: false };\n      this.emit('subscribe', ctx);\n    }\n  }, {\n    key: '_handlePublication',\n    value: function _handlePublication(channel, pub) {\n      var sub = this._getSub(channel);\n      var ctx = {\n        'data': pub.data,\n        'seq': pub.seq,\n        'gen': pub.gen,\n        'offset': pub.offset\n      };\n      if (pub.info) {\n        ctx.info = pub.info;\n      }\n      if (!sub) {\n        if (this._isServerSub(channel)) {\n          if (pub.seq !== undefined) {\n            this._serverSubs[channel].seq = pub.seq;\n          }\n          if (pub.gen !== undefined) {\n            this._serverSubs[channel].gen = pub.gen;\n          }\n          if (pub.offset !== undefined) {\n            this._serverSubs[channel].offset = pub.offset;\n          }\n          ctx.channel = channel;\n          this.emit('publish', ctx);\n        }\n        return;\n      }\n      if (pub.seq !== undefined) {\n        this._lastSeq[channel] = pub.seq;\n      }\n      if (pub.gen !== undefined) {\n        this._lastGen[channel] = pub.gen;\n      }\n      if (pub.offset !== undefined) {\n        this._lastOffset[channel] = pub.offset;\n      }\n      sub.emit('publish', ctx);\n    }\n  }, {\n    key: '_handleMessage',\n    value: function _handleMessage(message) {\n      this.emit('message', message.data);\n    }\n  }, {\n    key: '_handlePush',\n    value: function _handlePush(data, next) {\n      var push = this._decoder.decodePush(data);\n      var type = 0;\n      if ('type' in push) {\n        type = push['type'];\n      }\n      var channel = push.channel;\n\n      if (type === this._pushType.PUBLICATION) {\n        var pub = this._decoder.decodePushData(this._pushType.PUBLICATION, push.data);\n        this._handlePublication(channel, pub);\n      } else if (type === this._pushType.MESSAGE) {\n        var message = this._decoder.decodePushData(this._pushType.MESSAGE, push.data);\n        this._handleMessage(message);\n      } else if (type === this._pushType.JOIN) {\n        var join = this._decoder.decodePushData(this._pushType.JOIN, push.data);\n        this._handleJoin(channel, join);\n      } else if (type === this._pushType.LEAVE) {\n        var leave = this._decoder.decodePushData(this._pushType.LEAVE, push.data);\n        this._handleLeave(channel, leave);\n      } else if (type === this._pushType.UNSUB) {\n        var unsub = this._decoder.decodePushData(this._pushType.UNSUB, push.data);\n        this._handleUnsub(channel, unsub);\n      } else if (type === this._pushType.SUB) {\n        var sub = this._decoder.decodePushData(this._pushType.SUB, push.data);\n        this._handleSub(channel, sub);\n      }\n      next();\n    }\n  }, {\n    key: '_flush',\n    value: function _flush() {\n      var messages = this._messages.slice(0);\n      this._messages = [];\n      this._transportSend(messages);\n    }\n  }, {\n    key: '_ping',\n    value: function _ping() {\n      var _this18 = this;\n\n      var msg = {\n        method: this._methodType.PING\n      };\n      this._call(msg).then(function (resolveCtx) {\n        _this18._pingResponse(_this18._decoder.decodeCommandResult(_this18._methodType.PING, resolveCtx.result));\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, function (rejectCtx) {\n        _this18._debug('ping error', rejectCtx.error);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    }\n  }, {\n    key: '_pingResponse',\n    value: function _pingResponse(result) {\n      if (!this.isConnected()) {\n        return;\n      }\n      this._stopPing();\n      this._startPing();\n    }\n  }, {\n    key: '_getLastSeq',\n    value: function _getLastSeq(channel) {\n      var lastSeq = this._lastSeq[channel];\n      if (lastSeq) {\n        return lastSeq;\n      }\n      return 0;\n    }\n  }, {\n    key: '_getLastOffset',\n    value: function _getLastOffset(channel) {\n      var lastOffset = this._lastOffset[channel];\n      if (lastOffset) {\n        return lastOffset;\n      }\n      return 0;\n    }\n  }, {\n    key: '_getLastGen',\n    value: function _getLastGen(channel) {\n      var lastGen = this._lastGen[channel];\n      if (lastGen) {\n        return lastGen;\n      }\n      return 0;\n    }\n  }, {\n    key: '_getLastEpoch',\n    value: function _getLastEpoch(channel) {\n      var lastEpoch = this._lastEpoch[channel];\n      if (lastEpoch) {\n        return lastEpoch;\n      }\n      return '';\n    }\n  }, {\n    key: '_createErrorObject',\n    value: function _createErrorObject(message, code) {\n      var errObject = {\n        message: message,\n        code: code || 0\n      };\n\n      return errObject;\n    }\n  }, {\n    key: '_registerCall',\n    value: function _registerCall(id, callback, errback) {\n      var _this19 = this;\n\n      this._callbacks[id] = {\n        callback: callback,\n        errback: errback,\n        timeout: null\n      };\n      this._callbacks[id].timeout = setTimeout(function () {\n        delete _this19._callbacks[id];\n        if ((0, _utils.isFunction)(errback)) {\n          errback({ error: _this19._createErrorObject(_errorTimeout) });\n        }\n      }, this._config.timeout);\n    }\n  }, {\n    key: '_addMessage',\n    value: function _addMessage(message) {\n      var id = this._nextMessageId();\n      message.id = id;\n      if (this._isBatching === true) {\n        this._messages.push(message);\n      } else {\n        this._transportSend([message]);\n      }\n      return id;\n    }\n  }, {\n    key: 'isConnected',\n    value: function isConnected() {\n      return this._isConnected();\n    }\n  }, {\n    key: 'connect',\n    value: function connect() {\n      this._connect();\n    }\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {\n      this._disconnect('client', false);\n    }\n  }, {\n    key: 'ping',\n    value: function ping() {\n      return this._ping();\n    }\n  }, {\n    key: 'startBatching',\n    value: function startBatching() {\n      // start collecting messages without sending them to Centrifuge until flush\n      // method called\n      this._isBatching = true;\n    }\n  }, {\n    key: 'stopBatching',\n    value: function stopBatching() {\n      this._isBatching = false;\n      this._flush();\n    }\n  }, {\n    key: 'startSubscribeBatching',\n    value: function startSubscribeBatching() {\n      // start collecting private channels to create bulk authentication\n      // request to subscribeEndpoint when stopSubscribeBatching will be called\n      this._isSubscribeBatching = true;\n    }\n  }, {\n    key: 'stopSubscribeBatching',\n    value: function stopSubscribeBatching() {\n      var _this20 = this;\n\n      // create request to subscribeEndpoint with collected private channels\n      // to ask if this client can subscribe on each channel\n      this._isSubscribeBatching = false;\n      var authChannels = this._privateChannels;\n      this._privateChannels = {};\n\n      var channels = [];\n\n      for (var channel in authChannels) {\n        if (authChannels.hasOwnProperty(channel)) {\n          var sub = this._getSub(channel);\n          if (!sub) {\n            continue;\n          }\n          channels.push(channel);\n        }\n      }\n\n      if (channels.length === 0) {\n        this._debug('no private channels found, no need to make request');\n        return;\n      }\n\n      var data = {\n        client: this._clientID,\n        channels: channels\n      };\n\n      var clientID = this._clientID;\n      var xhrID = this._newXHRID();\n\n      var cb = function cb(resp) {\n        if (xhrID in _this20._xhrs) {\n          delete _this20._xhrs[xhrID];\n        }\n        if (_this20._clientID !== clientID) {\n          return;\n        }\n        if (resp.error || resp.status !== 200) {\n          _this20._debug('authorization request failed');\n          for (var i in channels) {\n            if (channels.hasOwnProperty(i)) {\n              var _channel3 = channels[i];\n              _this20._subscribeError(_channel3, _this20._createErrorObject('authorization request failed'));\n            }\n          }\n          return;\n        }\n\n        var channelsData = {};\n        if (resp.data.channels) {\n          for (var _i in resp.data.channels) {\n            var channelData = resp.data.channels[_i];\n            if (!channelData.channel) {\n              continue;\n            }\n            channelsData[channelData.channel] = channelData.token;\n          }\n        }\n\n        // try to send all subscriptions in one request.\n        var batch = false;\n\n        if (!_this20._isBatching) {\n          _this20.startBatching();\n          batch = true;\n        }\n\n        for (var _i2 in channels) {\n          if (channels.hasOwnProperty(_i2)) {\n            var _ret2 = function () {\n              var channel = channels[_i2];\n              var token = channelsData[channel];\n\n              if (!token) {\n                // subscription:error\n                _this20._subscribeError(channel, _this20._createErrorObject('permission denied', 103));\n                return 'continue';\n              } else {\n                var msg = {\n                  method: _this20._methodType.SUBSCRIBE,\n                  params: {\n                    channel: channel,\n                    token: token\n                  }\n                };\n\n                var _sub2 = _this20._getSub(channel);\n                if (_sub2 === null) {\n                  return 'continue';\n                }\n\n                var recover = _sub2._needRecover();\n\n                if (recover === true) {\n                  msg.params.recover = true;\n                  var seq = _this20._getLastSeq(channel);\n                  var gen = _this20._getLastGen(channel);\n                  if (seq || gen) {\n                    if (seq) {\n                      msg.params.seq = seq;\n                    }\n                    if (gen) {\n                      msg.params.gen = gen;\n                    }\n                  } else {\n                    var offset = _this20._getLastOffset(channel);\n                    if (offset) {\n                      msg.params.offset = offset;\n                    }\n                  }\n                  var epoch = _this20._getLastEpoch(channel);\n                  if (epoch) {\n                    msg.params.epoch = epoch;\n                  }\n                }\n                _this20._call(msg).then(function (resolveCtx) {\n                  _this20._subscribeResponse(channel, recover, _this20._decoder.decodeCommandResult(_this20._methodType.SUBSCRIBE, resolveCtx.result));\n                  if (resolveCtx.next) {\n                    resolveCtx.next();\n                  }\n                }, function (rejectCtx) {\n                  _this20._subscribeError(channel, rejectCtx.error);\n                  if (rejectCtx.next) {\n                    rejectCtx.next();\n                  }\n                });\n              }\n            }();\n\n            if (_ret2 === 'continue') continue;\n          }\n        }\n\n        if (batch) {\n          _this20.stopBatching();\n        }\n      };\n\n      if (this._config.onPrivateSubscribe !== null) {\n        this._config.onPrivateSubscribe({\n          data: data\n        }, cb);\n      } else {\n        var xhr = this._ajax(this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n        this._xhrs[xhrID] = xhr;\n      }\n    }\n  }, {\n    key: 'subscribe',\n    value: function subscribe(channel, events) {\n      var currentSub = this._getSub(channel);\n      if (currentSub !== null) {\n        currentSub._setEvents(events);\n        if (currentSub._isUnsubscribed()) {\n          currentSub.subscribe();\n        }\n        return currentSub;\n      }\n      var sub = new _subscription2.default(this, channel, events);\n      this._subs[channel] = sub;\n      sub.subscribe();\n      return sub;\n    }\n  }]);\n\n  return Centrifuge;\n}(_events2.default);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ }),\n\n/***/ 11:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = __webpack_require__(6);\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _utils = __webpack_require__(7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _STATE_NEW = 0;\nvar _STATE_SUBSCRIBING = 1;\nvar _STATE_SUCCESS = 2;\nvar _STATE_ERROR = 3;\nvar _STATE_UNSUBSCRIBED = 4;\n\nvar Subscription = function (_EventEmitter) {\n  _inherits(Subscription, _EventEmitter);\n\n  function Subscription(centrifuge, channel, events) {\n    _classCallCheck(this, Subscription);\n\n    var _this = _possibleConstructorReturn(this, (Subscription.__proto__ || Object.getPrototypeOf(Subscription)).call(this));\n\n    _this.channel = channel;\n    _this._centrifuge = centrifuge;\n    _this._status = _STATE_NEW;\n    _this._error = null;\n    _this._isResubscribe = false;\n    _this._ready = false;\n    _this._subscriptionPromise = null;\n    _this._noResubscribe = false;\n    _this._recoverable = false;\n    _this._recover = false;\n    _this._setEvents(events);\n    _this._initializePromise();\n    _this._promises = {};\n    _this._promiseId = 0;\n    _this.on('error', function (errContext) {\n      this._centrifuge._debug('subscription error', errContext);\n    });\n    return _this;\n  }\n\n  _createClass(Subscription, [{\n    key: '_nextPromiseId',\n    value: function _nextPromiseId() {\n      return ++this._promiseId;\n    }\n  }, {\n    key: '_initializePromise',\n    value: function _initializePromise() {\n      var _this2 = this;\n\n      // this helps us to wait until subscription will successfully\n      // subscribe and call actions such as presence, history etc in\n      // synchronous way.\n      this._ready = false;\n\n      this._subscriptionPromise = new Promise(function (resolve, reject) {\n        _this2._resolve = function (value) {\n          _this2._ready = true;\n          resolve(value);\n        };\n        _this2._reject = function (err) {\n          _this2._ready = true;\n          reject(err);\n        };\n      }).then(function () {}, function () {});\n    }\n  }, {\n    key: '_needRecover',\n    value: function _needRecover() {\n      return this._recoverable === true && this._recover === true;\n    }\n  }, {\n    key: '_setEvents',\n    value: function _setEvents(events) {\n      if (!events) {\n        return;\n      }\n      if ((0, _utils.isFunction)(events)) {\n        // events is just a function to handle publication received from channel.\n        this.on('publish', events);\n      } else if (Object.prototype.toString.call(events) === Object.prototype.toString.call({})) {\n        var knownEvents = ['publish', 'join', 'leave', 'unsubscribe', 'subscribe', 'error'];\n        for (var i = 0, l = knownEvents.length; i < l; i++) {\n          var ev = knownEvents[i];\n          if (ev in events) {\n            this.on(ev, events[ev]);\n          }\n        }\n      }\n    }\n  }, {\n    key: '_isNew',\n    value: function _isNew() {\n      return this._status === _STATE_NEW;\n    }\n  }, {\n    key: '_isUnsubscribed',\n    value: function _isUnsubscribed() {\n      return this._status === _STATE_UNSUBSCRIBED;\n    }\n  }, {\n    key: '_isSubscribing',\n    value: function _isSubscribing() {\n      return this._status === _STATE_SUBSCRIBING;\n    }\n  }, {\n    key: '_isReady',\n    value: function _isReady() {\n      return this._status === _STATE_SUCCESS || this._status === _STATE_ERROR;\n    }\n  }, {\n    key: '_isSuccess',\n    value: function _isSuccess() {\n      return this._status === _STATE_SUCCESS;\n    }\n  }, {\n    key: '_isError',\n    value: function _isError() {\n      return this._status === _STATE_ERROR;\n    }\n  }, {\n    key: '_setNew',\n    value: function _setNew() {\n      this._status = _STATE_NEW;\n    }\n  }, {\n    key: '_setSubscribing',\n    value: function _setSubscribing(isResubscribe) {\n      this._isResubscribe = isResubscribe || false;\n      if (this._ready === true) {\n        // new promise for this subscription\n        this._initializePromise();\n      }\n      this._status = _STATE_SUBSCRIBING;\n    }\n  }, {\n    key: '_setSubscribeSuccess',\n    value: function _setSubscribeSuccess(recovered) {\n      if (this._status === _STATE_SUCCESS) {\n        return;\n      }\n      this._status = _STATE_SUCCESS;\n      var successContext = this._getSubscribeSuccessContext(recovered);\n\n      this._recover = false;\n      this.emit('subscribe', successContext);\n      this._resolve(successContext);\n      for (var id in this._promises) {\n        clearTimeout(this._promises[id].timeout);\n        this._promises[id].resolve();\n        delete this._promises[id];\n      }\n    }\n  }, {\n    key: '_setSubscribeError',\n    value: function _setSubscribeError(err) {\n      if (this._status === _STATE_ERROR) {\n        return;\n      }\n      this._status = _STATE_ERROR;\n      this._error = err;\n      var errContext = this._getSubscribeErrorContext();\n      this.emit('error', errContext);\n      this._reject(errContext);\n      for (var id in this._promises) {\n        clearTimeout(this._promises[id].timeout);\n        this._promises[id].reject(err);\n        delete this._promises[id];\n      }\n    }\n  }, {\n    key: '_triggerUnsubscribe',\n    value: function _triggerUnsubscribe() {\n      this.emit('unsubscribe', {\n        channel: this.channel\n      });\n    }\n  }, {\n    key: '_setUnsubscribed',\n    value: function _setUnsubscribed(noResubscribe) {\n      this._centrifuge._clearSubRefreshTimeout(this.channel);\n      if (this._status === _STATE_UNSUBSCRIBED) {\n        return;\n      }\n      var needTrigger = this._status === _STATE_SUCCESS;\n      this._status = _STATE_UNSUBSCRIBED;\n      if (noResubscribe === true) {\n        this._recover = false;\n        this._noResubscribe = true;\n        delete this._centrifuge._lastSeq[this.channel];\n        delete this._centrifuge._lastGen[this.channel];\n        delete this._centrifuge._lastEpoch[this.channel];\n      }\n      if (needTrigger) {\n        this._triggerUnsubscribe();\n      }\n    }\n  }, {\n    key: '_shouldResubscribe',\n    value: function _shouldResubscribe() {\n      return !this._noResubscribe;\n    }\n  }, {\n    key: '_getSubscribeSuccessContext',\n    value: function _getSubscribeSuccessContext(recovered) {\n      return {\n        channel: this.channel,\n        isResubscribe: this._isResubscribe,\n        recovered: recovered\n      };\n    }\n  }, {\n    key: '_getSubscribeErrorContext',\n    value: function _getSubscribeErrorContext() {\n      var subscribeErrorContext = this._error;\n      subscribeErrorContext.channel = this.channel;\n      subscribeErrorContext.isResubscribe = this._isResubscribe;\n      return subscribeErrorContext;\n    }\n  }, {\n    key: 'ready',\n    value: function ready(callback, errback) {\n      if (this._ready) {\n        if (this._isSuccess()) {\n          callback(this._getSubscribeSuccessContext());\n        } else {\n          errback(this._getSubscribeErrorContext());\n        }\n      }\n    }\n  }, {\n    key: 'subscribe',\n    value: function subscribe() {\n      if (this._status === _STATE_SUCCESS) {\n        return;\n      }\n      this._noResubscribe = false;\n      this._centrifuge._subscribe(this);\n    }\n  }, {\n    key: 'unsubscribe',\n    value: function unsubscribe() {\n      this._setUnsubscribed(true);\n      this._centrifuge._unsubscribe(this);\n    }\n  }, {\n    key: '_methodCall',\n    value: function _methodCall(message, type) {\n      var _this3 = this;\n\n      var methodCallPromise = new Promise(function (resolve, reject) {\n        var subPromise = void 0;\n        if (_this3._isSuccess()) {\n          subPromise = Promise.resolve();\n        } else if (_this3._isError()) {\n          subPromise = Promise.reject(_this3._error);\n        } else {\n          subPromise = new Promise(function (res, rej) {\n            var timeout = setTimeout(function () {\n              rej({ 'code': 0, 'message': 'timeout' });\n            }, _this3._centrifuge._config.timeout);\n            _this3._promises[_this3._nextPromiseId()] = {\n              timeout: timeout,\n              resolve: res,\n              reject: rej\n            };\n          });\n        }\n        subPromise.then(function () {\n          return _this3._centrifuge._call(message).then(function (resolveCtx) {\n            resolve(_this3._centrifuge._decoder.decodeCommandResult(type, resolveCtx.result));\n            if (resolveCtx.next) {\n              resolveCtx.next();\n            }\n          }, function (rejectCtx) {\n            reject(rejectCtx.error);\n            if (rejectCtx.next) {\n              rejectCtx.next();\n            }\n          });\n        }, function (error) {\n          reject(error);\n        });\n      });\n      return methodCallPromise;\n    }\n  }, {\n    key: 'publish',\n    value: function publish(data) {\n      return this._methodCall({\n        method: this._centrifuge._methodType.PUBLISH,\n        params: {\n          channel: this.channel,\n          data: data\n        }\n      }, this._centrifuge._methodType.PUBLISH);\n    }\n  }, {\n    key: 'presence',\n    value: function presence() {\n      return this._methodCall({\n        method: this._centrifuge._methodType.PRESENCE,\n        params: {\n          channel: this.channel\n        }\n      }, this._centrifuge._methodType.PRESENCE);\n    }\n  }, {\n    key: 'presenceStats',\n    value: function presenceStats() {\n      return this._methodCall({\n        method: this._centrifuge._methodType.PRESENCE_STATS,\n        params: {\n          channel: this.channel\n        }\n      }, this._centrifuge._methodType.PRESENCE_STATS);\n    }\n  }, {\n    key: 'history',\n    value: function history() {\n      return this._methodCall({\n        method: this._centrifuge._methodType.HISTORY,\n        params: {\n          channel: this.channel\n        }\n      }, this._centrifuge._methodType.HISTORY);\n    }\n  }]);\n\n  return Subscription;\n}(_events2.default);\n\nexports.default = Subscription;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 12:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar JsonMethodType = exports.JsonMethodType = {\n  CONNECT: 0,\n  SUBSCRIBE: 1,\n  UNSUBSCRIBE: 2,\n  PUBLISH: 3,\n  PRESENCE: 4,\n  PRESENCE_STATS: 5,\n  HISTORY: 6,\n  PING: 7,\n  SEND: 8,\n  RPC: 9,\n  REFRESH: 10,\n  SUB_REFRESH: 11\n};\n\nvar JsonPushType = exports.JsonPushType = {\n  PUBLICATION: 0,\n  JOIN: 1,\n  LEAVE: 2,\n  UNSUB: 3,\n  MESSAGE: 4,\n  SUB: 5\n};\n\nvar JsonEncoder = exports.JsonEncoder = function () {\n  function JsonEncoder() {\n    _classCallCheck(this, JsonEncoder);\n  }\n\n  _createClass(JsonEncoder, [{\n    key: 'encodeCommands',\n    value: function encodeCommands(commands) {\n      var encodedCommands = [];\n      for (var i in commands) {\n        if (commands.hasOwnProperty(i)) {\n          encodedCommands.push(JSON.stringify(commands[i]));\n        }\n      }\n      return encodedCommands.join('\\n');\n    }\n  }]);\n\n  return JsonEncoder;\n}();\n\nvar JsonDecoder = exports.JsonDecoder = function () {\n  function JsonDecoder() {\n    _classCallCheck(this, JsonDecoder);\n  }\n\n  _createClass(JsonDecoder, [{\n    key: 'decodeReplies',\n    value: function decodeReplies(data) {\n      var replies = [];\n      var encodedReplies = data.split('\\n');\n      for (var i in encodedReplies) {\n        if (encodedReplies.hasOwnProperty(i)) {\n          if (!encodedReplies[i]) {\n            continue;\n          }\n          var reply = JSON.parse(encodedReplies[i]);\n          replies.push(reply);\n        }\n      }\n      return replies;\n    }\n  }, {\n    key: 'decodeCommandResult',\n    value: function decodeCommandResult(methodType, data) {\n      return data;\n    }\n  }, {\n    key: 'decodePush',\n    value: function decodePush(data) {\n      return data;\n    }\n  }, {\n    key: 'decodePushData',\n    value: function decodePushData(pushType, data) {\n      return data;\n    }\n  }]);\n\n  return JsonDecoder;\n}();\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n\n/***/ 31:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _centrifuge = __webpack_require__(10);\n\nexports.default = _centrifuge.Centrifuge;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 6:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = $getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  var args = [];\n  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    ReflectApply(this.listener, this.target, args);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\n\n/***/ }),\n\n/***/ 7:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.startsWith = startsWith;\nexports.isFunction = isFunction;\nexports.log = log;\nexports.backoff = backoff;\nexports.errorExists = errorExists;\nexports.extend = extend;\nfunction startsWith(value, prefix) {\n  return value.lastIndexOf(prefix, 0) === 0;\n};\n\nfunction isFunction(value) {\n  if (value === undefined || value === null) {\n    return false;\n  }\n  return typeof value === 'function';\n};\n\nfunction log(level, args) {\n  if (global.console) {\n    var logger = global.console[level];\n\n    if (isFunction(logger)) {\n      logger.apply(global.console, args);\n    }\n  }\n};\n\nfunction backoff(step, min, max) {\n  var jitter = 0.5 * Math.random();\n  var interval = Math.min(max, min * Math.pow(2, step + 1));\n\n  return Math.floor((1 - jitter) * interval);\n};\n\nfunction errorExists(data) {\n  return 'error' in data && data.error !== null;\n};\n\nfunction extend(a, b) {\n  for (var key in b) {\n    if (b.hasOwnProperty(key)) {\n      a[key] = b[key];\n    }\n  }\n  return a;\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ })\n\n/******/ });\n});\n\n\n// WEBPACK FOOTER //\n// centrifuge.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 31);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap fe3a0c95ebde1c2cb254","import EventEmitter from 'events';\nimport Subscription from './subscription';\n\nimport {\n  JsonEncoder,\n  JsonDecoder,\n  JsonMethodType,\n  JsonPushType\n} from './json';\n\nimport {\n  isFunction,\n  log,\n  startsWith,\n  errorExists,\n  backoff,\n  extend\n} from './utils';\n\nconst _errorTimeout = 'timeout';\nconst _errorConnectionClosed = 'connection closed';\n\nexport class Centrifuge extends EventEmitter {\n\n  constructor(url, options) {\n    super();\n    this._url = url;\n    this._websocket = null;\n    this._sockjs = null;\n    this._isSockjs = false;\n    this._binary = false;\n    this._methodType = null;\n    this._pushType = null;\n    this._encoder = null;\n    this._decoder = null;\n    this._status = 'disconnected';\n    this._reconnect = true;\n    this._reconnecting = false;\n    this._transport = null;\n    this._transportName = null;\n    this._transportClosed = true;\n    this._messageId = 0;\n    this._clientID = null;\n    this._refreshRequired = false;\n    this._subs = {};\n    this._serverSubs = {};\n    this._lastSeq = {};\n    this._lastGen = {};\n    this._lastOffset = {};\n    this._lastEpoch = {};\n    this._messages = [];\n    this._isBatching = false;\n    this._isSubscribeBatching = false;\n    this._privateChannels = {};\n    this._numRefreshFailed = 0;\n    this._refreshTimeout = null;\n    this._pingTimeout = null;\n    this._pongTimeout = null;\n    this._subRefreshTimeouts = {};\n    this._retries = 0;\n    this._callbacks = {};\n    this._latency = null;\n    this._latencyStart = null;\n    this._connectData = null;\n    this._token = null;\n    this._xhrID = 0;\n    this._xhrs = {};\n    this._dispatchPromise = Promise.resolve();\n    this._config = {\n      debug: false,\n      websocket: null,\n      sockjs: null,\n      promise: null,\n      middleware: [],\n      minRetry: 1000,\n      maxRetry: 20000,\n      timeout: 5000,\n      ping: true,\n      pingInterval: 25000,\n      pongWaitTimeout: 5000,\n      privateChannelPrefix: '$',\n      onTransportClose: null,\n      sockjsServer: null,\n      sockjsTransports: [\n        'websocket',\n        'xdr-streaming',\n        'xhr-streaming',\n        'eventsource',\n        'iframe-eventsource',\n        'iframe-htmlfile',\n        'xdr-polling',\n        'xhr-polling',\n        'iframe-xhr-polling',\n        'jsonp-polling'\n      ],\n      refreshEndpoint: '/centrifuge/refresh',\n      refreshHeaders: {},\n      refreshParams: {},\n      refreshData: {},\n      refreshAttempts: null,\n      refreshInterval: 1000,\n      onRefreshFailed: null,\n      onRefresh: null,\n      subscribeEndpoint: '/centrifuge/subscribe',\n      subscribeHeaders: {},\n      subscribeParams: {},\n      subRefreshInterval: 1000,\n      onPrivateSubscribe: null\n    };\n    this._configure(options);\n  }\n\n  setToken(token) {\n    this._token = token;\n  }\n\n  setConnectData(data) {\n    this._connectData = data;\n  }\n\n  setRefreshHeaders(headers) {\n    this._config.refreshHeaders = headers;\n  }\n  setRefreshParams(params) {\n    this._config.refreshParams = params;\n  }\n  setRefreshData(data) {\n    this._config.refreshData = data;\n  }\n\n  setSubscribeHeaders(headers) {\n    this._config.subscribeHeaders = headers;\n  }\n  setSubscribeParams(params) {\n    this._config.subscribeParams = params;\n  }\n  middleware(...fns) {\n    this._config.middleware = fns;\n  }\n\n  _ajax(url, params, headers, data, callback) {\n    let query = '';\n    this._debug('sending AJAX request to', url, 'with data', JSON.stringify(data));\n\n    const xhr = (global.XMLHttpRequest ? new global.XMLHttpRequest() : new global.ActiveXObject('Microsoft.XMLHTTP'));\n\n    for (const i in params) {\n      if (params.hasOwnProperty(i)) {\n        if (query.length > 0) {\n          query += '&';\n        }\n        query += encodeURIComponent(i) + '=' + encodeURIComponent(params[i]);\n      }\n    }\n    if (query.length > 0) {\n      query = '?' + query;\n    }\n    xhr.open('POST', url + query, true);\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = true;\n    }\n\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    for (const headerName in headers) {\n      if (headers.hasOwnProperty(headerName)) {\n        xhr.setRequestHeader(headerName, headers[headerName]);\n      }\n    }\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          let data, parsed = false;\n          try {\n            data = JSON.parse(xhr.responseText);\n            parsed = true;\n          } catch (e) {\n            callback({\n              error: 'Invalid JSON. Data was: ' + xhr.responseText,\n              status: 200,\n              data: null\n            });\n          }\n          if (parsed) { // prevents double execution.\n            callback({\n              data: data,\n              status: 200\n            });\n          }\n        } else {\n          this._log('wrong status code in AJAX response', xhr.status);\n          callback({\n            status: xhr.status,\n            data: null\n          });\n        }\n      }\n    };\n    setTimeout(() => xhr.send(JSON.stringify(data)), 20);\n    return xhr;\n  };\n\n  _log() {\n    log('info', arguments);\n  };\n\n  _debug() {\n    if (this._config.debug === true) {\n      log('debug', arguments);\n    }\n  };\n\n  _websocketSupported() {\n    if (this._config.websocket !== null) {\n      return true;\n    }\n    return !(typeof WebSocket !== 'function' && typeof WebSocket !== 'object');\n  };\n\n  _setFormat(format) {\n    if (this._formatOverride(format)) {\n      return;\n    }\n    if (format === 'protobuf') {\n      throw new Error('not implemented by JSON only Centrifuge client – use client with Protobuf');\n    }\n    this._binary = false;\n    this._methodType = JsonMethodType;\n    this._pushType = JsonPushType;\n    this._encoder = new JsonEncoder();\n    this._decoder = new JsonDecoder();\n  }\n\n  _formatOverride(format) {\n    return false;\n  }\n\n  _configure(configuration) {\n    if (!('Promise' in global)) {\n      throw new Error('Promise polyfill required');\n    }\n\n    extend(this._config, configuration || {});\n    this._debug('centrifuge config', this._config);\n\n    if (!this._url) {\n      throw new Error('url required');\n    }\n\n    if (startsWith(this._url, 'ws') && this._url.indexOf('format=protobuf') > -1) {\n      this._setFormat('protobuf');\n    } else {\n      this._setFormat('json');\n    }\n\n    if (startsWith(this._url, 'http')) {\n      this._debug('client will try to connect to SockJS endpoint');\n      if (this._config.sockjs !== null) {\n        this._debug('SockJS explicitly provided in options');\n        this._sockjs = this._config.sockjs;\n      } else {\n        if (typeof global.SockJS === 'undefined') {\n          throw new Error('SockJS not found, use ws:// in url or include SockJS');\n        }\n        this._debug('use globally defined SockJS');\n        this._sockjs = global.SockJS;\n      }\n    } else {\n      this._debug('client will connect to websocket endpoint');\n    }\n  };\n\n  _setStatus(newStatus) {\n    if (this._status !== newStatus) {\n      this._debug('Status', this._status, '->', newStatus);\n      this._status = newStatus;\n    }\n  };\n\n  _isDisconnected() {\n    return this._status === 'disconnected';\n  };\n\n  _isConnecting() {\n    return this._status === 'connecting';\n  };\n\n  _isConnected() {\n    return this._status === 'connected';\n  };\n\n  _nextMessageId() {\n    return ++this._messageId;\n  };\n\n  _resetRetry() {\n    this._debug('reset retries count to 0');\n    this._retries = 0;\n  };\n\n  _getRetryInterval() {\n    const interval = backoff(this._retries, this._config.minRetry, this._config.maxRetry);\n\n    this._retries += 1;\n    return interval;\n  };\n\n  _abortInflightXHRs() {\n    for (const xhrID in this._xhrs) {\n      try {\n        this._xhrs[xhrID].abort();\n      } catch (e) {\n        this._debug('error aborting xhr', e);\n      }\n      delete this._xhrs[xhrID];\n    }\n  };\n\n  _clearConnectedState(reconnect) {\n    this._clientID = null;\n    this._stopPing();\n\n    // fire errbacks of registered outgoing calls.\n    for (const id in this._callbacks) {\n      if (this._callbacks.hasOwnProperty(id)) {\n        const callbacks = this._callbacks[id];\n        clearTimeout(callbacks.timeout);\n        const errback = callbacks.errback;\n        if (!errback) {\n          continue;\n        }\n        errback({error: this._createErrorObject('disconnected')});\n      }\n    }\n    this._callbacks = {};\n\n    // fire unsubscribe events\n    for (const channel in this._subs) {\n      if (this._subs.hasOwnProperty(channel)) {\n        const sub = this._subs[channel];\n\n        if (reconnect) {\n          if (sub._isSuccess()) {\n            sub._triggerUnsubscribe();\n            sub._recover = true;\n          }\n          if (sub._shouldResubscribe()) {\n            sub._setSubscribing();\n          }\n        } else {\n          sub._setUnsubscribed();\n        }\n      }\n    }\n\n    this._abortInflightXHRs();\n\n    // clear refresh timer\n    if (this._refreshTimeout !== null) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n\n    // clear sub refresh timers\n    for (const channel in this._subRefreshTimeouts) {\n      if (this._subRefreshTimeouts.hasOwnProperty(channel) && this._subRefreshTimeouts[channel]) {\n        this._clearSubRefreshTimeout(channel);\n      }\n    }\n    this._subRefreshTimeouts = {};\n\n    if (!this._reconnect) {\n      // completely clear subscriptions\n      this._subs = {};\n    }\n  };\n\n  _isTransportOpen() {\n    if (this._isSockjs) {\n      return this._transport &&\n        this._transport.transport &&\n        this._transport.transport.readyState === this._transport.transport.OPEN;\n    }\n    return this._transport && this._transport.readyState === this._transport.OPEN;\n  };\n\n  _transportSend(commands) {\n    if (!commands.length) {\n      return true;\n    }\n\n    if (!this._isTransportOpen()) {\n      // resolve pending commands with error if transport is not open\n      for (let command in commands) {\n        let id = command.id;\n        if (!(id in this._callbacks)) {\n          continue;\n        }\n        const callbacks = this._callbacks[id];\n        clearTimeout(this._callbacks[id].timeout);\n        delete this._callbacks[id];\n        const errback = callbacks.errback;\n        errback({error: this._createErrorObject(_errorConnectionClosed, 0)});\n      }\n      return false;\n    }\n    this._transport.send(this._encoder.encodeCommands(commands));\n    return true;\n  }\n\n  _setupTransport() {\n    this._isSockjs = false;\n\n    // detect transport to use - SockJS or Websocket\n    if (this._sockjs !== null) {\n      const sockjsOptions = {\n        transports: this._config.sockjsTransports\n      };\n\n      if (this._config.sockjsServer !== null) {\n        sockjsOptions.server = this._config.sockjsServer;\n      }\n      this._isSockjs = true;\n      this._transport = new this._sockjs(this._url, null, sockjsOptions);\n    } else {\n      if (!this._websocketSupported()) {\n        this._debug('No Websocket support and no SockJS configured, can not connect');\n        return;\n      }\n      if (this._config.websocket !== null) {\n        this._websocket = this._config.websocket;\n      } else {\n        this._websocket = WebSocket;\n      }\n      this._transport = new this._websocket(this._url);\n      if (this._binary === true) {\n        this._transport.binaryType = 'arraybuffer';\n      }\n    }\n\n    this._transport.onopen = () => {\n      this._transportClosed = false;\n\n      if (this._isSockjs) {\n        this._transportName = 'sockjs-' + this._transport.transport;\n        this._transport.onheartbeat = () => this._restartPing();\n      } else {\n        this._transportName = 'websocket';\n      }\n\n      // Can omit method here due to zero value.\n      const msg = {\n        // method: this._methodType.CONNECT\n      };\n\n      if (this._token || this._connectData) {\n        msg.params = {};\n      }\n\n      if (this._token) {\n        msg.params.token = this._token;\n      }\n\n      if (this._connectData) {\n        msg.params.data = this._connectData;\n      }\n\n      let subs = {};\n      let hasSubs = false;\n      for (const channel in this._serverSubs) {\n        if (this._serverSubs.hasOwnProperty(channel) && this._serverSubs[channel].recoverable) {\n          hasSubs = true;\n          let sub = {\n            'recover': true\n          };\n          if (this._serverSubs[channel].seq || this._serverSubs[channel].gen) {\n            if (this._serverSubs[channel].seq) {\n              sub['seq'] = this._serverSubs[channel].seq;\n            }\n            if (this._serverSubs[channel].gen) {\n              sub['gen'] = this._serverSubs[channel].gen;\n            }\n          } else {\n            if (this._serverSubs[channel].offset) {\n              sub['offset'] = this._serverSubs[channel].offset;\n            }\n          }\n          if (this._serverSubs[channel].epoch) {\n            sub['epoch'] = this._serverSubs[channel].epoch;\n          }\n          subs[channel] = sub;\n        }\n      }\n      if (hasSubs) {\n        if (!msg.params) {msg.params = {};}\n        msg.params.subs = subs;\n      }\n\n      this._latencyStart = new Date();\n      this._call(msg).then(resolveCtx => {\n        this._connectResponse(this._decoder.decodeCommandResult(this._methodType.CONNECT, resolveCtx.result), hasSubs);\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        const err = rejectCtx.error;\n        if (err.code === 109) { // token expired.\n          this._refreshRequired = true;\n        }\n        this._disconnect('connect error', true);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    };\n\n    this._transport.onerror = error => {\n      this._debug('transport level error', error);\n    };\n\n    this._transport.onclose = closeEvent => {\n      this._transportClosed = true;\n      let reason = _errorConnectionClosed;\n      let needReconnect = true;\n\n      if (closeEvent && 'reason' in closeEvent && closeEvent.reason) {\n        try {\n          const advice = JSON.parse(closeEvent.reason);\n          this._debug('reason is an advice object', advice);\n          reason = advice.reason;\n          needReconnect = advice.reconnect;\n        } catch (e) {\n          reason = closeEvent.reason;\n          this._debug('reason is a plain string', reason);\n        }\n      }\n\n      // onTransportClose callback should be executed every time transport was closed.\n      // This can be helpful to catch failed connection events (because our disconnect\n      // event only called once and every future attempts to connect do not fire disconnect\n      // event again).\n      if (this._config.onTransportClose !== null) {\n        this._config.onTransportClose({\n          event: closeEvent,\n          reason: reason,\n          reconnect: needReconnect\n        });\n      }\n\n      this._disconnect(reason, needReconnect);\n\n      if (this._reconnect === true) {\n        this._reconnecting = true;\n        const interval = this._getRetryInterval();\n\n        this._debug('reconnect after ' + interval + ' milliseconds');\n        setTimeout(() => {\n          if (this._reconnect === true) {\n            if (this._refreshRequired) {\n              this._refresh();\n            } else {\n              this._connect();\n            }\n          }\n        }, interval);\n      }\n    };\n\n    this._transport.onmessage = event => {\n      this._dataReceived(event.data);\n    };\n  };\n\n  rpc(data) {\n    return this._rpc('', data);\n  }\n\n  namedRPC(method, data) {\n    return this._rpc(method, data);\n  }\n\n  _rpc(method, data) {\n    let params = {\n      data: data\n    };\n    if (method !== '') {\n      params.method = method;\n    };\n    const msg = {\n      method: this._methodType.RPC,\n      params: params\n    };\n\n    if (!this.isConnected()) {\n      return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n    }\n\n    return this._call(msg).then(resolveCtx => {\n      if (resolveCtx.next) {\n        resolveCtx.next();\n      }\n      return this._decoder.decodeCommandResult(this._methodType.RPC, resolveCtx.result);\n    }, rejectCtx => {\n      if (rejectCtx.next) {\n        rejectCtx.next();\n      }\n      return Promise.reject(rejectCtx.error);\n    });\n  }\n\n  send(data) {\n    const msg = {\n      method: this._methodType.SEND,\n      params: {\n        data: data\n      }\n    };\n\n    if (!this.isConnected()) {\n      return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n    }\n\n    const sent = this._transportSend([msg]); // can send async message to server without id set\n    if (!sent) {\n      return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n    };\n    return Promise.resolve({});\n  }\n\n  publish(channel, data) {\n    const msg = {\n      method: this._methodType.PUBLISH,\n      params: {\n        channel: channel,\n        data: data\n      }\n    };\n\n    if (!this.isConnected()) {\n      return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n    }\n\n    return this._call(msg).then(result => {\n      if (result.next) {\n        result.next();\n      }\n      return {};\n    });\n  }\n\n  _dataReceived(data) {\n    const replies = this._decoder.decodeReplies(data);\n    // we have to guarantee order of events in replies processing - i.e. start processing\n    // next reply only when we finished processing of current one. Without syncing things in\n    // this way we could get wrong publication events order as reply promises resolve\n    // on next loop tick so for loop continues before we finished emitting all reply events.\n    this._dispatchPromise = this._dispatchPromise.then(() => {\n      let finishDispatch;\n      this._dispatchPromise = new Promise(resolve =>{\n        finishDispatch = resolve;\n      });\n      this._dispatchSynchronized(replies, finishDispatch);\n    });\n    this._restartPing();\n  }\n\n  _hookMiddleware(data) {\n    const {middleware} = this._config;\n    if (Array.isArray(middleware)) {\n      middleware.forEach(mw => {\n        if (typeof mw === 'function') {\n          mw(data);\n        }\n      });\n    }\n\n    if (typeof middleware === 'function') {\n      middleware(data);\n    }\n  }\n\n  _dispatchSynchronized(replies, finishDispatch) {\n    let p = Promise.resolve();\n    for (const i in replies) {\n      if (replies.hasOwnProperty(i)) {\n        p = p.then(() => {\n          this._hookMiddleware(replies[i]);\n          return this._dispatchReply(replies[i]);\n        });\n      }\n    }\n    p = p.then(() => {\n      finishDispatch();\n    });\n  }\n\n  _dispatchReply(reply) {\n    var next;\n    const p = new Promise(resolve =>{\n      next = resolve;\n    });\n\n    if (reply === undefined || reply === null) {\n      this._debug('dispatch: got undefined or null reply');\n      next();\n      return p;\n    }\n\n    const id = reply.id;\n\n    if (id && id > 0) {\n      this._handleReply(reply, next);\n    } else {\n      this._handlePush(reply.result, next);\n    }\n\n    return p;\n  };\n\n  _call(msg) {\n    return new Promise((resolve, reject) => {\n      const id = this._addMessage(msg);\n      this._registerCall(id, resolve, reject);\n    });\n  }\n\n  _connect() {\n    if (this.isConnected()) {\n      this._debug('connect called when already connected');\n      return;\n    }\n    if (this._status === 'connecting') {\n      return;\n    }\n\n    this._debug('start connecting');\n    this._setStatus('connecting');\n    this._clientID = null;\n    this._reconnect = true;\n    this._setupTransport();\n  };\n\n  _disconnect(reason, shouldReconnect) {\n\n    const reconnect = shouldReconnect || false;\n    if (reconnect === false) {\n      this._reconnect = false;\n    }\n\n    if (this._isDisconnected()) {\n      if (!reconnect) {\n        this._clearConnectedState(reconnect);\n      }\n      return;\n    }\n\n    this._clearConnectedState(reconnect);\n\n    this._debug('disconnected:', reason, shouldReconnect);\n    this._setStatus('disconnected');\n\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    if (this._reconnecting === false) {\n      // fire unsubscribe events for server side subs.\n      for (const channel in this._serverSubs) {\n        if (this._serverSubs.hasOwnProperty(channel)) {\n          this.emit('unsubscribe', {channel: channel});\n        }\n      }\n      this.emit('disconnect', {\n        reason: reason,\n        reconnect: reconnect\n      });\n    }\n\n    if (reconnect === false) {\n      this._subs = {};\n      this._serverSubs = {};\n    }\n\n    if (!this._transportClosed) {\n      this._transport.close();\n    }\n  };\n\n  _refreshFailed() {\n    this._numRefreshFailed = 0;\n    if (!this._isDisconnected()) {\n      this._disconnect('refresh failed', false);\n    }\n    if (this._config.onRefreshFailed !== null) {\n      this._config.onRefreshFailed();\n    }\n  };\n\n  _refresh() {\n    // ask application for new connection token.\n    this._debug('refresh token');\n\n    if (this._config.refreshAttempts === 0) {\n      this._debug('refresh attempts set to 0, do not send refresh request at all');\n      this._refreshFailed();\n      return;\n    }\n\n    if (this._refreshTimeout !== null) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n\n    const clientID = this._clientID;\n    const xhrID = this._newXHRID();\n\n    const cb = (resp) => {\n      if (xhrID in this._xhrs) {\n        delete this._xhrs[xhrID];\n      }\n      if (this._clientID !== clientID) {\n        return;\n      }\n      if (resp.error || resp.status !== 200) {\n        // We don't perform any connection status related actions here as we are\n        // relying on server that must close connection eventually.\n        if (resp.error) {\n          this._debug('error refreshing connection token', resp.error);\n        } else {\n          this._debug('error refreshing connection token: wrong status code', resp.status);\n        }\n        this._numRefreshFailed++;\n        if (this._refreshTimeout !== null) {\n          clearTimeout(this._refreshTimeout);\n          this._refreshTimeout = null;\n        }\n        if (this._config.refreshAttempts !== null && this._numRefreshFailed >= this._config.refreshAttempts) {\n          this._refreshFailed();\n          return;\n        }\n        const jitter = Math.round(Math.random() * 1000 * Math.max(this._numRefreshFailed, 20));\n        const interval = this._config.refreshInterval + jitter;\n        this._refreshTimeout = setTimeout(() => this._refresh(), interval);\n        return;\n      }\n      this._numRefreshFailed = 0;\n      this._token = resp.data.token;\n      if (!this._token) {\n        this._refreshFailed();\n        return;\n      }\n      if (this._isDisconnected() && this._reconnect) {\n        this._debug('token refreshed, connect from scratch');\n        this._connect();\n      } else {\n        this._debug('send refreshed token');\n        const msg = {\n          method: this._methodType.REFRESH,\n          params: {\n            token: this._token\n          }\n        };\n        this._call(msg).then(resolveCtx => {\n          this._refreshResponse(this._decoder.decodeCommandResult(this._methodType.REFRESH, resolveCtx.result));\n          if (resolveCtx.next) {\n            resolveCtx.next();\n          }\n        }, rejectCtx => {\n          this._refreshError(rejectCtx.error);\n          if (rejectCtx.next) {\n            rejectCtx.next();\n          }\n        });\n      }\n    };\n\n    if (this._config.onRefresh !== null) {\n      const context = {};\n      this._config.onRefresh(context, cb);\n    } else {\n      const xhr = this._ajax(\n        this._config.refreshEndpoint,\n        this._config.refreshParams,\n        this._config.refreshHeaders,\n        this._config.refreshData,\n        cb\n      );\n      this._xhrs[xhrID] = xhr;\n    }\n  };\n\n  _refreshError(err) {\n    this._debug('refresh error', err);\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    const interval = this._config.refreshInterval + Math.round(Math.random() * 1000);\n    this._refreshTimeout = setTimeout(() => this._refresh(), interval);\n  }\n\n  _refreshResponse(result) {\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    if (result.expires) {\n      this._clientID = result.client;\n      this._refreshTimeout = setTimeout(() => this._refresh(), this._getTTLMilliseconds(result.ttl));\n    }\n  };\n\n  _newXHRID() {\n    this._xhrID++;\n    return this._xhrID;\n  }\n\n  _subRefresh(channel) {\n    this._debug('refresh subscription token for channel', channel);\n\n    if (this._subRefreshTimeouts[channel] !== undefined) {\n      this._clearSubRefreshTimeout(channel);\n    } else {\n      return;\n    }\n\n    const clientID = this._clientID;\n    const xhrID = this._newXHRID();\n\n    const cb = (resp) => {\n      if (xhrID in this._xhrs) {\n        delete this._xhrs[xhrID];\n      }\n      if (resp.error || resp.status !== 200 || this._clientID !== clientID) {\n        return;\n      }\n      let channelsData = {};\n      if (resp.data.channels) {\n        for (const i in resp.data.channels) {\n          const channelData = resp.data.channels[i];\n          if (!channelData.channel) {\n            continue;\n          }\n          channelsData[channelData.channel] = channelData.token;\n        }\n      }\n\n      const token = channelsData[channel];\n      if (!token) {\n        return;\n      }\n      const msg = {\n        method: this._methodType.SUB_REFRESH,\n        params: {\n          channel: channel,\n          token: token\n        }\n      };\n\n      const sub = this._getSub(channel);\n      if (sub === null) {\n        return;\n      }\n\n      this._call(msg).then(resolveCtx => {\n        this._subRefreshResponse(\n          channel,\n          this._decoder.decodeCommandResult(this._methodType.SUB_REFRESH, resolveCtx.result)\n        );\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        this._subRefreshError(channel, rejectCtx.error);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    };\n\n    const data = {\n      client: this._clientID,\n      channels: [channel]\n    };\n\n    if (this._config.onPrivateSubscribe !== null) {\n      this._config.onPrivateSubscribe({\n        data: data\n      }, cb);\n    } else {\n      const xhr = this._ajax(\n        this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n      this._xhrs[xhrID] = xhr;\n    }\n  };\n\n  _clearSubRefreshTimeout(channel) {\n    if (this._subRefreshTimeouts[channel] !== undefined) {\n      clearTimeout(this._subRefreshTimeouts[channel]);\n      delete this._subRefreshTimeouts[channel];\n    }\n  }\n\n  _subRefreshError(channel, err) {\n    this._debug('subscription refresh error', channel, err);\n    this._clearSubRefreshTimeout(channel);\n    const sub = this._getSub(channel);\n    if (sub === null) {\n      return;\n    }\n    const jitter = Math.round(Math.random() * 1000);\n    let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), this._config.subRefreshInterval + jitter);\n    this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    return;\n  }\n\n  _subRefreshResponse(channel, result) {\n    this._debug('subscription refresh success', channel);\n    this._clearSubRefreshTimeout(channel);\n    const sub = this._getSub(channel);\n    if (sub === null) {\n      return;\n    }\n    if (result.expires === true) {\n      let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), this._getTTLMilliseconds(result.ttl));\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    }\n    return;\n  };\n\n  _subscribe(sub, isResubscribe) {\n    this._debug('subscribing on', sub.channel);\n    const channel = sub.channel;\n\n    if (!(channel in this._subs)) {\n      this._subs[channel] = sub;\n    }\n\n    if (!this.isConnected()) {\n      // subscribe will be called later\n      sub._setNew();\n      return;\n    }\n\n    sub._setSubscribing(isResubscribe);\n\n    const msg = {\n      method: this._methodType.SUBSCRIBE,\n      params: {\n        channel: channel\n      }\n    };\n\n    // If channel name does not start with privateChannelPrefix - then we\n    // can just send subscription message to Centrifuge. If channel name\n    // starts with privateChannelPrefix - then this is a private channel\n    // and we should ask web application backend for permission first.\n    if (startsWith(channel, this._config.privateChannelPrefix)) {\n      // private channel.\n      if (this._isSubscribeBatching) {\n        this._privateChannels[channel] = true;\n      } else {\n        this.startSubscribeBatching();\n        this._subscribe(sub);\n        this.stopSubscribeBatching();\n      }\n    } else {\n      const recover = sub._needRecover();\n\n      if (recover === true) {\n        msg.params.recover = true;\n        const seq = this._getLastSeq(channel);\n        const gen = this._getLastGen(channel);\n        if (seq || gen) {\n          if (seq) {\n            msg.params.seq = seq;\n          }\n          if (gen) {\n            msg.params.gen = gen;\n          }\n        } else {\n          const offset = this._getLastOffset(channel);\n          if (offset) {\n            msg.params.offset = offset;\n          }\n        }\n        const epoch = this._getLastEpoch(channel);\n        if (epoch) {\n          msg.params.epoch = epoch;\n        }\n      }\n\n      this._call(msg).then(resolveCtx => {\n        this._subscribeResponse(\n          channel,\n          recover,\n          this._decoder.decodeCommandResult(this._methodType.SUBSCRIBE, resolveCtx.result)\n        );\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        this._subscribeError(channel, rejectCtx.error);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    }\n  };\n\n  _unsubscribe(sub) {\n    delete this._subs[sub.channel];\n    delete this._lastOffset[sub.channel];\n    delete this._lastSeq[sub.channel];\n    delete this._lastGen[sub.channel];\n    if (this.isConnected()) {\n      // No need to unsubscribe in disconnected state - i.e. client already unsubscribed.\n      this._addMessage({\n        method: this._methodType.UNSUBSCRIBE,\n        params: {\n          channel: sub.channel\n        }\n      });\n    }\n  };\n\n  _getTTLMilliseconds(ttl) {\n    // https://stackoverflow.com/questions/12633405/what-is-the-maximum-delay-for-setinterval\n    return Math.min(ttl * 1000, 2147483647);\n  }\n\n  getSub(channel) {\n    return this._getSub(channel);\n  }\n\n  _getSub(channel) {\n    const sub = this._subs[channel];\n    if (!sub) {\n      return null;\n    }\n    return sub;\n  };\n\n  _isServerSub(channel) {\n    return this._serverSubs[channel] !== undefined;\n  };\n\n  _connectResponse(result, isRecover) {\n    const wasReconnecting = this._reconnecting;\n    this._reconnecting = false;\n    this._resetRetry();\n    this._refreshRequired = false;\n\n    if (this.isConnected()) {\n      return;\n    }\n\n    if (this._latencyStart !== null) {\n      this._latency = (new Date()).getTime() - this._latencyStart.getTime();\n      this._latencyStart = null;\n    }\n\n    this._clientID = result.client;\n    this._setStatus('connected');\n\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n    }\n\n    if (result.expires) {\n      this._refreshTimeout = setTimeout(() => this._refresh(), this._getTTLMilliseconds(result.ttl));\n    }\n\n    this.startBatching();\n    this.startSubscribeBatching();\n    for (const channel in this._subs) {\n      if (this._subs.hasOwnProperty(channel)) {\n        const sub = this._subs[channel];\n        if (sub._shouldResubscribe()) {\n          this._subscribe(sub, wasReconnecting);\n        }\n      }\n    }\n    this.stopSubscribeBatching();\n    this.stopBatching();\n\n    this._startPing();\n\n    const ctx = {\n      client: result.client,\n      transport: this._transportName,\n      latency: this._latency\n    };\n    if (result.data) {\n      ctx.data = result.data;\n    }\n\n    this.emit('connect', ctx);\n\n    if (result.subs) {\n      this._processServerSubs(result.subs, isRecover);\n    }\n  };\n\n  _processServerSubs(subs, isRecover) {\n    for (const channel in subs) {\n      if (subs.hasOwnProperty(channel)) {\n        const sub = subs[channel];\n        const recovered = sub.recovered === true;\n        let subCtx = {channel: channel, isResubscribe: isRecover, recovered: recovered};\n        this.emit('subscribe', subCtx);\n      }\n    }\n    for (const channel in subs) {\n      if (subs.hasOwnProperty(channel)) {\n        const sub = subs[channel];\n        if (sub.recovered) {\n          let pubs = sub.publications;\n          if (pubs && pubs.length > 0) {\n\n            // handle legacy order.\n            // TODO: remove as soon as Centrifuge v1 released.\n            if (pubs.length > 1 && (!pubs[0].offset || pubs[0].offset > pubs[1].offset)) {\n              pubs = pubs.reverse();\n            }\n\n            for (let i in pubs) {\n              if (pubs.hasOwnProperty(i)) {\n                this._handlePublication(channel, pubs[i]);\n              }\n            }\n          }\n        }\n        this._serverSubs[channel] = {\n          'seq': sub.seq,\n          'gen': sub.gen,\n          'offset': sub.offset,\n          'epoch': sub.epoch,\n          'recoverable': sub.recoverable\n        };\n      }\n    }\n  };\n\n  _stopPing() {\n    if (this._pongTimeout !== null) {\n      clearTimeout(this._pongTimeout);\n      this._pongTimeout = null;\n    }\n    if (this._pingTimeout !== null) {\n      clearTimeout(this._pingTimeout);\n      this._pingTimeout = null;\n    }\n  };\n\n  _startPing() {\n    if (this._config.ping !== true || this._config.pingInterval <= 0) {\n      return;\n    }\n    if (!this.isConnected()) {\n      return;\n    }\n\n    this._pingTimeout = setTimeout(() => {\n      if (!this.isConnected()) {\n        this._stopPing();\n        return;\n      }\n      this.ping();\n      this._pongTimeout = setTimeout(() => {\n        this._disconnect('no ping', true);\n      }, this._config.pongWaitTimeout);\n    }, this._config.pingInterval);\n  };\n\n  _restartPing() {\n    this._stopPing();\n    this._startPing();\n  };\n\n  _subscribeError(channel, error) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    if (!sub._isSubscribing()) {\n      return;\n    }\n    if (error.code === 0 && error.message === _errorTimeout) { // client side timeout.\n      this._disconnect('timeout', true);\n      return;\n    }\n    sub._setSubscribeError(error);\n  };\n\n  _subscribeResponse(channel, isRecover, result) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    if (!sub._isSubscribing()) {\n      return;\n    }\n\n    let recovered = false;\n    if ('recovered' in result) {\n      recovered = result.recovered;\n    }\n    sub._setSubscribeSuccess(recovered);\n\n    let pubs = result.publications;\n    if (pubs && pubs.length > 0) {\n      if (pubs.length >= 2 && !pubs[0].offset && !pubs[1].offset) {\n        // handle legacy order.\n        pubs = pubs.reverse();\n      }\n      for (let i in pubs) {\n        if (pubs.hasOwnProperty(i)) {\n          this._handlePublication(channel, pubs[i]);\n        }\n      }\n    }\n\n    if (result.recoverable && (!isRecover || !recovered)) {\n      this._lastSeq[channel] = result.seq || 0;\n      this._lastGen[channel] = result.gen || 0;\n      this._lastOffset[channel] = result.offset || 0;\n    }\n\n    this._lastEpoch[channel] = result.epoch || '';\n\n    if (result.recoverable) {\n      sub._recoverable = true;\n    }\n\n    if (result.expires === true) {\n      let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), this._getTTLMilliseconds(result.ttl));\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    }\n  };\n\n  _handleReply(reply, next) {\n    const id = reply.id;\n    const result = reply.result;\n\n    if (!(id in this._callbacks)) {\n      next();\n      return;\n    }\n    const callbacks = this._callbacks[id];\n    clearTimeout(this._callbacks[id].timeout);\n    delete this._callbacks[id];\n\n    if (!errorExists(reply)) {\n      const callback = callbacks.callback;\n      if (!callback) {\n        return;\n      }\n      callback({result, next});\n    } else {\n      const errback = callbacks.errback;\n      if (!errback) {\n        next();\n        return;\n      }\n      const error = reply.error;\n      errback({error, next});\n    }\n  }\n\n  _handleJoin(channel, join) {\n    const ctx = {'info': join.info};\n    const sub = this._getSub(channel);\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        ctx.channel = channel;\n        this.emit('join', ctx);\n      }\n      return;\n    }\n    sub.emit('join', ctx);\n  };\n\n  _handleLeave(channel, leave) {\n    const ctx = {'info': leave.info};\n    const sub = this._getSub(channel);\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        ctx.channel = channel;\n        this.emit('leave', ctx);\n      }\n      return;\n    }\n    sub.emit('leave', ctx);\n  };\n\n  _handleUnsub(channel, unsub) {\n    const ctx = {};\n    const sub = this._getSub(channel);\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        delete this._serverSubs[channel];\n        ctx.channel = channel;\n        this.emit('unsubscribe', ctx);\n      }\n      return;\n    }\n    sub.unsubscribe();\n    if (unsub.resubscribe === true) {\n      sub.subscribe();\n    }\n  };\n\n  _handleSub(channel, sub) {\n    this._serverSubs[channel] = {\n      'seq': sub.seq,\n      'gen': sub.gen,\n      'offset': sub.offset,\n      'epoch': sub.epoch,\n      'recoverable': sub.recoverable\n    };\n    const ctx = {'channel': channel, isResubscribe: false, recovered: false};\n    this.emit('subscribe', ctx);\n  };\n\n  _handlePublication(channel, pub) {\n    const sub = this._getSub(channel);\n    const ctx = {\n      'data': pub.data,\n      'seq': pub.seq,\n      'gen': pub.gen,\n      'offset': pub.offset\n    };\n    if (pub.info) {\n      ctx.info = pub.info;\n    }\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        if (pub.seq !== undefined) {\n          this._serverSubs[channel].seq = pub.seq;\n        }\n        if (pub.gen !== undefined) {\n          this._serverSubs[channel].gen = pub.gen;\n        }\n        if (pub.offset !== undefined) {\n          this._serverSubs[channel].offset = pub.offset;\n        }\n        ctx.channel = channel;\n        this.emit('publish', ctx);\n      }\n      return;\n    }\n    if (pub.seq !== undefined) {\n      this._lastSeq[channel] = pub.seq;\n    }\n    if (pub.gen !== undefined) {\n      this._lastGen[channel] = pub.gen;\n    }\n    if (pub.offset !== undefined) {\n      this._lastOffset[channel] = pub.offset;\n    }\n    sub.emit('publish', ctx);\n  };\n\n  _handleMessage(message) {\n    this.emit('message', message.data);\n  };\n\n  _handlePush(data, next) {\n    const push = this._decoder.decodePush(data);\n    let type = 0;\n    if ('type' in push) {\n      type = push['type'];\n    }\n    const channel = push.channel;\n\n    if (type === this._pushType.PUBLICATION) {\n      const pub = this._decoder.decodePushData(this._pushType.PUBLICATION, push.data);\n      this._handlePublication(channel, pub);\n    } else if (type === this._pushType.MESSAGE) {\n      const message = this._decoder.decodePushData(this._pushType.MESSAGE, push.data);\n      this._handleMessage(message);\n    } else if (type === this._pushType.JOIN) {\n      const join = this._decoder.decodePushData(this._pushType.JOIN, push.data);\n      this._handleJoin(channel, join);\n    } else if (type === this._pushType.LEAVE) {\n      const leave = this._decoder.decodePushData(this._pushType.LEAVE, push.data);\n      this._handleLeave(channel, leave);\n    } else if (type === this._pushType.UNSUB) {\n      const unsub = this._decoder.decodePushData(this._pushType.UNSUB, push.data);\n      this._handleUnsub(channel, unsub);\n    } else if (type === this._pushType.SUB) {\n      const sub = this._decoder.decodePushData(this._pushType.SUB, push.data);\n      this._handleSub(channel, sub);\n    }\n    next();\n  }\n\n  _flush() {\n    const messages = this._messages.slice(0);\n    this._messages = [];\n    this._transportSend(messages);\n  };\n\n  _ping() {\n    const msg = {\n      method: this._methodType.PING\n    };\n    this._call(msg).then(resolveCtx => {\n      this._pingResponse(this._decoder.decodeCommandResult(this._methodType.PING, resolveCtx.result));\n      if (resolveCtx.next) {\n        resolveCtx.next();\n      }\n    }, rejectCtx => {\n      this._debug('ping error', rejectCtx.error);\n      if (rejectCtx.next) {\n        rejectCtx.next();\n      }\n    });\n  };\n\n  _pingResponse(result) {\n    if (!this.isConnected()) {\n      return;\n    }\n    this._stopPing();\n    this._startPing();\n  }\n\n  _getLastSeq(channel) {\n    const lastSeq = this._lastSeq[channel];\n    if (lastSeq) {\n      return lastSeq;\n    }\n    return 0;\n  };\n\n  _getLastOffset(channel) {\n    const lastOffset = this._lastOffset[channel];\n    if (lastOffset) {\n      return lastOffset;\n    }\n    return 0;\n  };\n\n  _getLastGen(channel) {\n    const lastGen = this._lastGen[channel];\n    if (lastGen) {\n      return lastGen;\n    }\n    return 0;\n  };\n\n  _getLastEpoch(channel) {\n    const lastEpoch = this._lastEpoch[channel];\n    if (lastEpoch) {\n      return lastEpoch;\n    }\n    return '';\n  };\n\n  _createErrorObject(message, code) {\n    const errObject = {\n      message: message,\n      code: code || 0\n    };\n\n    return errObject;\n  };\n\n  _registerCall(id, callback, errback) {\n    this._callbacks[id] = {\n      callback: callback,\n      errback: errback,\n      timeout: null\n    };\n    this._callbacks[id].timeout = setTimeout(() => {\n      delete this._callbacks[id];\n      if (isFunction(errback)) {\n        errback({error: this._createErrorObject(_errorTimeout)});\n      }\n    }, this._config.timeout);\n  };\n\n  _addMessage(message) {\n    let id = this._nextMessageId();\n    message.id = id;\n    if (this._isBatching === true) {\n      this._messages.push(message);\n    } else {\n      this._transportSend([message]);\n    }\n    return id;\n  };\n\n  isConnected() {\n    return this._isConnected();\n  }\n\n  connect() {\n    this._connect();\n  };\n\n  disconnect() {\n    this._disconnect('client', false);\n  };\n\n  ping() {\n    return this._ping();\n  }\n\n  startBatching() {\n    // start collecting messages without sending them to Centrifuge until flush\n    // method called\n    this._isBatching = true;\n  };\n\n  stopBatching() {\n    this._isBatching = false;\n    this._flush();\n  };\n\n  startSubscribeBatching() {\n    // start collecting private channels to create bulk authentication\n    // request to subscribeEndpoint when stopSubscribeBatching will be called\n    this._isSubscribeBatching = true;\n  };\n\n  stopSubscribeBatching() {\n    // create request to subscribeEndpoint with collected private channels\n    // to ask if this client can subscribe on each channel\n    this._isSubscribeBatching = false;\n    const authChannels = this._privateChannels;\n    this._privateChannels = {};\n\n    const channels = [];\n\n    for (const channel in authChannels) {\n      if (authChannels.hasOwnProperty(channel)) {\n        const sub = this._getSub(channel);\n        if (!sub) {\n          continue;\n        }\n        channels.push(channel);\n      }\n    }\n\n    if (channels.length === 0) {\n      this._debug('no private channels found, no need to make request');\n      return;\n    }\n\n    const data = {\n      client: this._clientID,\n      channels: channels\n    };\n\n    const clientID = this._clientID;\n    const xhrID = this._newXHRID();\n\n    const cb = (resp) => {\n      if (xhrID in this._xhrs) {\n        delete this._xhrs[xhrID];\n      }\n      if (this._clientID !== clientID) {\n        return;\n      }\n      if (resp.error || resp.status !== 200) {\n        this._debug('authorization request failed');\n        for (const i in channels) {\n          if (channels.hasOwnProperty(i)) {\n            const channel = channels[i];\n            this._subscribeError(channel, this._createErrorObject('authorization request failed'));\n          }\n        }\n        return;\n      }\n\n      let channelsData = {};\n      if (resp.data.channels) {\n        for (const i in resp.data.channels) {\n          const channelData = resp.data.channels[i];\n          if (!channelData.channel) {\n            continue;\n          }\n          channelsData[channelData.channel] = channelData.token;\n        }\n      }\n\n      // try to send all subscriptions in one request.\n      let batch = false;\n\n      if (!this._isBatching) {\n        this.startBatching();\n        batch = true;\n      }\n\n      for (const i in channels) {\n        if (channels.hasOwnProperty(i)) {\n          const channel = channels[i];\n          const token = channelsData[channel];\n\n          if (!token) {\n            // subscription:error\n            this._subscribeError(channel, this._createErrorObject('permission denied', 103));\n            continue;\n          } else {\n            const msg = {\n              method: this._methodType.SUBSCRIBE,\n              params: {\n                channel: channel,\n                token: token\n              }\n            };\n\n            const sub = this._getSub(channel);\n            if (sub === null) {\n              continue;\n            }\n\n            const recover = sub._needRecover();\n\n            if (recover === true) {\n              msg.params.recover = true;\n              const seq = this._getLastSeq(channel);\n              const gen = this._getLastGen(channel);\n              if (seq || gen) {\n                if (seq) {\n                  msg.params.seq = seq;\n                }\n                if (gen) {\n                  msg.params.gen = gen;\n                }\n              } else {\n                const offset = this._getLastOffset(channel);\n                if (offset) {\n                  msg.params.offset = offset;\n                }\n              }\n              const epoch = this._getLastEpoch(channel);\n              if (epoch) {\n                msg.params.epoch = epoch;\n              }\n            }\n            this._call(msg).then(resolveCtx => {\n              this._subscribeResponse(\n                channel,\n                recover,\n                this._decoder.decodeCommandResult(this._methodType.SUBSCRIBE, resolveCtx.result)\n              );\n              if (resolveCtx.next) {\n                resolveCtx.next();\n              }\n            }, rejectCtx => {\n              this._subscribeError(channel, rejectCtx.error);\n              if (rejectCtx.next) {\n                rejectCtx.next();\n              }\n            });\n          }\n        }\n      }\n\n      if (batch) {\n        this.stopBatching();\n      }\n\n    };\n\n    if (this._config.onPrivateSubscribe !== null) {\n      this._config.onPrivateSubscribe({\n        data: data\n      }, cb);\n    } else {\n      const xhr = this._ajax(\n        this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n      this._xhrs[xhrID] = xhr;\n    }\n  };\n\n  subscribe(channel, events) {\n    const currentSub = this._getSub(channel);\n    if (currentSub !== null) {\n      currentSub._setEvents(events);\n      if (currentSub._isUnsubscribed()) {\n        currentSub.subscribe();\n      }\n      return currentSub;\n    }\n    const sub = new Subscription(this, channel, events);\n    this._subs[channel] = sub;\n    sub.subscribe();\n    return sub;\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/centrifuge.js","import EventEmitter from 'events';\n\nimport {\n  isFunction\n} from './utils';\n\nconst _STATE_NEW = 0;\nconst _STATE_SUBSCRIBING = 1;\nconst _STATE_SUCCESS = 2;\nconst _STATE_ERROR = 3;\nconst _STATE_UNSUBSCRIBED = 4;\n\nexport default class Subscription extends EventEmitter {\n  constructor(centrifuge, channel, events) {\n    super();\n    this.channel = channel;\n    this._centrifuge = centrifuge;\n    this._status = _STATE_NEW;\n    this._error = null;\n    this._isResubscribe = false;\n    this._ready = false;\n    this._subscriptionPromise = null;\n    this._noResubscribe = false;\n    this._recoverable = false;\n    this._recover = false;\n    this._setEvents(events);\n    this._initializePromise();\n    this._promises = {};\n    this._promiseId = 0;\n    this.on('error', function (errContext) {\n      this._centrifuge._debug('subscription error', errContext);\n    });\n  }\n\n  _nextPromiseId() {\n    return ++this._promiseId;\n  }\n\n  _initializePromise() {\n    // this helps us to wait until subscription will successfully\n    // subscribe and call actions such as presence, history etc in\n    // synchronous way.\n    this._ready = false;\n\n    this._subscriptionPromise = new Promise((resolve, reject) => {\n      this._resolve = value => {\n        this._ready = true;\n        resolve(value);\n      };\n      this._reject = err => {\n        this._ready = true;\n        reject(err);\n      };\n    }).then(function () {}, function () {});\n  };\n\n  _needRecover() {\n    return this._recoverable === true && this._recover === true;\n  };\n\n  _setEvents(events) {\n    if (!events) {\n      return;\n    }\n    if (isFunction(events)) {\n      // events is just a function to handle publication received from channel.\n      this.on('publish', events);\n    } else if (Object.prototype.toString.call(events) === Object.prototype.toString.call({})) {\n      const knownEvents = ['publish', 'join', 'leave', 'unsubscribe', 'subscribe', 'error'];\n      for (let i = 0, l = knownEvents.length; i < l; i++) {\n        const ev = knownEvents[i];\n        if (ev in events) {\n          this.on(ev, events[ev]);\n        }\n      }\n    }\n  };\n\n  _isNew() {\n    return this._status === _STATE_NEW;\n  };\n\n  _isUnsubscribed() {\n    return this._status === _STATE_UNSUBSCRIBED;\n  };\n\n  _isSubscribing() {\n    return this._status === _STATE_SUBSCRIBING;\n  };\n\n  _isReady() {\n    return this._status === _STATE_SUCCESS || this._status === _STATE_ERROR;\n  };\n\n  _isSuccess() {\n    return this._status === _STATE_SUCCESS;\n  };\n\n  _isError() {\n    return this._status === _STATE_ERROR;\n  };\n\n  _setNew() {\n    this._status = _STATE_NEW;\n  };\n\n  _setSubscribing(isResubscribe) {\n    this._isResubscribe = isResubscribe || false;\n    if (this._ready === true) {\n      // new promise for this subscription\n      this._initializePromise();\n    }\n    this._status = _STATE_SUBSCRIBING;\n  };\n\n  _setSubscribeSuccess(recovered) {\n    if (this._status === _STATE_SUCCESS) {\n      return;\n    }\n    this._status = _STATE_SUCCESS;\n    const successContext = this._getSubscribeSuccessContext(recovered);\n\n    this._recover = false;\n    this.emit('subscribe', successContext);\n    this._resolve(successContext);\n    for (const id in this._promises) {\n      clearTimeout(this._promises[id].timeout);\n      this._promises[id].resolve();\n      delete this._promises[id];\n    }\n  };\n\n  _setSubscribeError(err) {\n    if (this._status === _STATE_ERROR) {\n      return;\n    }\n    this._status = _STATE_ERROR;\n    this._error = err;\n    const errContext = this._getSubscribeErrorContext();\n    this.emit('error', errContext);\n    this._reject(errContext);\n    for (const id in this._promises) {\n      clearTimeout(this._promises[id].timeout);\n      this._promises[id].reject(err);\n      delete this._promises[id];\n    }\n  };\n\n  _triggerUnsubscribe() {\n    this.emit('unsubscribe', {\n      channel: this.channel\n    });\n  };\n\n  _setUnsubscribed(noResubscribe) {\n    this._centrifuge._clearSubRefreshTimeout(this.channel);\n    if (this._status === _STATE_UNSUBSCRIBED) {\n      return;\n    }\n    const needTrigger = this._status === _STATE_SUCCESS;\n    this._status = _STATE_UNSUBSCRIBED;\n    if (noResubscribe === true) {\n      this._recover = false;\n      this._noResubscribe = true;\n      delete this._centrifuge._lastSeq[this.channel];\n      delete this._centrifuge._lastGen[this.channel];\n      delete this._centrifuge._lastEpoch[this.channel];\n    }\n    if (needTrigger) {\n      this._triggerUnsubscribe();\n    }\n  };\n\n  _shouldResubscribe() {\n    return !this._noResubscribe;\n  };\n\n  _getSubscribeSuccessContext(recovered) {\n    return {\n      channel: this.channel,\n      isResubscribe: this._isResubscribe,\n      recovered: recovered\n    };\n  };\n\n  _getSubscribeErrorContext() {\n    const subscribeErrorContext = this._error;\n    subscribeErrorContext.channel = this.channel;\n    subscribeErrorContext.isResubscribe = this._isResubscribe;\n    return subscribeErrorContext;\n  };\n\n  ready(callback, errback) {\n    if (this._ready) {\n      if (this._isSuccess()) {\n        callback(this._getSubscribeSuccessContext());\n      } else {\n        errback(this._getSubscribeErrorContext());\n      }\n    }\n  };\n\n  subscribe() {\n    if (this._status === _STATE_SUCCESS) {\n      return;\n    }\n    this._noResubscribe = false;\n    this._centrifuge._subscribe(this);\n  };\n\n  unsubscribe() {\n    this._setUnsubscribed(true);\n    this._centrifuge._unsubscribe(this);\n  };\n\n  _methodCall(message, type) {\n    const methodCallPromise = new Promise((resolve, reject) => {\n      let subPromise;\n      if (this._isSuccess()) {\n        subPromise = Promise.resolve();\n      } else if (this._isError()) {\n        subPromise = Promise.reject(this._error);\n      } else {\n        subPromise = new Promise((res, rej) => {\n          const timeout = setTimeout(function () {\n            rej({'code': 0, 'message': 'timeout'});\n          }, this._centrifuge._config.timeout);\n          this._promises[this._nextPromiseId()] = {\n            timeout: timeout,\n            resolve: res,\n            reject: rej\n          };\n        });\n      }\n      subPromise.then(\n        () => {\n          return this._centrifuge._call(message).then(\n            resolveCtx => {\n              resolve(this._centrifuge._decoder.decodeCommandResult(type, resolveCtx.result));\n              if (resolveCtx.next) {\n                resolveCtx.next();\n              }\n            },\n            rejectCtx => {\n              reject(rejectCtx.error);\n              if (rejectCtx.next) {\n                rejectCtx.next();\n              }\n            }\n          );\n        },\n        error => {\n          reject(error);\n        }\n      );\n    });\n    return methodCallPromise;\n  }\n\n  publish(data) {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PUBLISH,\n      params: {\n        channel: this.channel,\n        data: data\n      }\n    }, this._centrifuge._methodType.PUBLISH);\n  };\n\n  presence() {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PRESENCE,\n      params: {\n        channel: this.channel\n      }\n    }, this._centrifuge._methodType.PRESENCE);\n  };\n\n  presenceStats() {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PRESENCE_STATS,\n      params: {\n        channel: this.channel\n      }\n    }, this._centrifuge._methodType.PRESENCE_STATS);\n  };\n\n  history() {\n    return this._methodCall({\n      method: this._centrifuge._methodType.HISTORY,\n      params: {\n        channel: this.channel\n      }\n    }, this._centrifuge._methodType.HISTORY);\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/subscription.js","export const JsonMethodType = {\n  CONNECT: 0,\n  SUBSCRIBE: 1,\n  UNSUBSCRIBE: 2,\n  PUBLISH: 3,\n  PRESENCE: 4,\n  PRESENCE_STATS: 5,\n  HISTORY: 6,\n  PING: 7,\n  SEND: 8,\n  RPC: 9,\n  REFRESH: 10,\n  SUB_REFRESH: 11\n};\n\nexport const JsonPushType = {\n  PUBLICATION: 0,\n  JOIN: 1,\n  LEAVE: 2,\n  UNSUB: 3,\n  MESSAGE: 4,\n  SUB: 5\n};\n\nexport class JsonEncoder {\n  encodeCommands(commands) {\n    const encodedCommands = [];\n    for (const i in commands) {\n      if (commands.hasOwnProperty(i)) {\n        encodedCommands.push(JSON.stringify(commands[i]));\n      }\n    }\n    return encodedCommands.join('\\n');\n  }\n}\n\nexport class JsonDecoder {\n  decodeReplies(data) {\n    const replies = [];\n    const encodedReplies = data.split('\\n');\n    for (const i in encodedReplies) {\n      if (encodedReplies.hasOwnProperty(i)) {\n        if (!encodedReplies[i]) {\n          continue;\n        }\n        const reply = JSON.parse(encodedReplies[i]);\n        replies.push(reply);\n      }\n    }\n    return replies;\n  }\n\n  decodeCommandResult(methodType, data) {\n    return data;\n  }\n\n  decodePush(data) {\n    return data;\n  }\n\n  decodePushData(pushType, data) {\n    return data;\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/json.js","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 3\n// module chunks = 0 1","import {Centrifuge} from './centrifuge.js';\nexport default Centrifuge;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = $getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  var args = [];\n  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    ReflectApply(this.listener, this.target, args);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/events/events.js\n// module id = 6\n// module chunks = 0 1","export function startsWith(value, prefix) {\n  return value.lastIndexOf(prefix, 0) === 0;\n};\n\nexport function isFunction(value) {\n  if (value === undefined || value === null) {\n    return false;\n  }\n  return typeof value === 'function';\n};\n\nexport function log(level, args) {\n  if (global.console) {\n    const logger = global.console[level];\n\n    if (isFunction(logger)) {\n      logger.apply(global.console, args);\n    }\n  }\n};\n\nexport function backoff(step, min, max) {\n  const jitter = 0.5 * Math.random();\n  const interval = Math.min(max, min * Math.pow(2, step + 1));\n\n  return Math.floor((1 - jitter) * interval);\n};\n\nexport function errorExists(data) {\n  return 'error' in data && data.error !== null;\n};\n\nexport function extend(a, b) {\n  for (const key in b) {\n    if (b.hasOwnProperty(key)) {\n      a[key] = b[key];\n    }\n  }\n  return a;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils.js"],"sourceRoot":""}