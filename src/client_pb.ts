// @generated by protoc-gen-es v2.5.2 with parameter "target=ts"
// @generated from file client.proto (package centrifugal.centrifuge.protocol, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Message as Message$1 } from "@bufbuild/protobuf";

/**
 * Describes the file client.proto.
 */
export const file_client: GenFile = /*@__PURE__*/
  fileDesc("CgxjbGllbnQucHJvdG8SH2NlbnRyaWZ1Z2FsLmNlbnRyaWZ1Z2UucHJvdG9jb2wiOQoFRXJyb3ISDAoEY29kZRgBIAEoDRIPCgdtZXNzYWdlGAIgASgJEhEKCXRlbXBvcmFyeRgDIAEoCCI/ChBFbXVsYXRpb25SZXF1ZXN0EgwKBG5vZGUYASABKAkSDwoHc2Vzc2lvbhgCIAEoCRIMCgRkYXRhGAMgASgMIscGCgdDb21tYW5kEgoKAmlkGAEgASgNEkAKB2Nvbm5lY3QYBCABKAsyLy5jZW50cmlmdWdhbC5jZW50cmlmdWdlLnByb3RvY29sLkNvbm5lY3RSZXF1ZXN0EkQKCXN1YnNjcmliZRgFIAEoCzIxLmNlbnRyaWZ1Z2FsLmNlbnRyaWZ1Z2UucHJvdG9jb2wuU3Vic2NyaWJlUmVxdWVzdBJICgt1bnN1YnNjcmliZRgGIAEoCzIzLmNlbnRyaWZ1Z2FsLmNlbnRyaWZ1Z2UucHJvdG9jb2wuVW5zdWJzY3JpYmVSZXF1ZXN0EkAKB3B1Ymxpc2gYByABKAsyLy5jZW50cmlmdWdhbC5jZW50cmlmdWdlLnByb3RvY29sLlB1Ymxpc2hSZXF1ZXN0EkIKCHByZXNlbmNlGAggASgLMjAuY2VudHJpZnVnYWwuY2VudHJpZnVnZS5wcm90b2NvbC5QcmVzZW5jZVJlcXVlc3QSTQoOcHJlc2VuY2Vfc3RhdHMYCSABKAsyNS5jZW50cmlmdWdhbC5jZW50cmlmdWdlLnByb3RvY29sLlByZXNlbmNlU3RhdHNSZXF1ZXN0EkAKB2hpc3RvcnkYCiABKAsyLy5jZW50cmlmdWdhbC5jZW50cmlmdWdlLnByb3RvY29sLkhpc3RvcnlSZXF1ZXN0EjoKBHBpbmcYCyABKAsyLC5jZW50cmlmdWdhbC5jZW50cmlmdWdlLnByb3RvY29sLlBpbmdSZXF1ZXN0EjoKBHNlbmQYDCABKAsyLC5jZW50cmlmdWdhbC5jZW50cmlmdWdlLnByb3RvY29sLlNlbmRSZXF1ZXN0EjgKA3JwYxgNIAEoCzIrLmNlbnRyaWZ1Z2FsLmNlbnRyaWZ1Z2UucHJvdG9jb2wuUlBDUmVxdWVzdBJACgdyZWZyZXNoGA4gASgLMi8uY2VudHJpZnVnYWwuY2VudHJpZnVnZS5wcm90b2NvbC5SZWZyZXNoUmVxdWVzdBJHCgtzdWJfcmVmcmVzaBgPIAEoCzIyLmNlbnRyaWZ1Z2FsLmNlbnRyaWZ1Z2UucHJvdG9jb2wuU3ViUmVmcmVzaFJlcXVlc3RKBAgCEANKBAgDEAQi5AYKBVJlcGx5EgoKAmlkGAEgASgNEjUKBWVycm9yGAIgASgLMiYuY2VudHJpZnVnYWwuY2VudHJpZnVnZS5wcm90b2NvbC5FcnJvchIzCgRwdXNoGAQgASgLMiUuY2VudHJpZnVnYWwuY2VudHJpZnVnZS5wcm90b2NvbC5QdXNoEj8KB2Nvbm5lY3QYBSABKAsyLi5jZW50cmlmdWdhbC5jZW50cmlmdWdlLnByb3RvY29sLkNvbm5lY3RSZXN1bHQSQwoJc3Vic2NyaWJlGAYgASgLMjAuY2VudHJpZnVnYWwuY2VudHJpZnVnZS5wcm90b2NvbC5TdWJzY3JpYmVSZXN1bHQSRwoLdW5zdWJzY3JpYmUYByABKAsyMi5jZW50cmlmdWdhbC5jZW50cmlmdWdlLnByb3RvY29sLlVuc3Vic2NyaWJlUmVzdWx0Ej8KB3B1Ymxpc2gYCCABKAsyLi5jZW50cmlmdWdhbC5jZW50cmlmdWdlLnByb3RvY29sLlB1Ymxpc2hSZXN1bHQSQQoIcHJlc2VuY2UYCSABKAsyLy5jZW50cmlmdWdhbC5jZW50cmlmdWdlLnByb3RvY29sLlByZXNlbmNlUmVzdWx0EkwKDnByZXNlbmNlX3N0YXRzGAogASgLMjQuY2VudHJpZnVnYWwuY2VudHJpZnVnZS5wcm90b2NvbC5QcmVzZW5jZVN0YXRzUmVzdWx0Ej8KB2hpc3RvcnkYCyABKAsyLi5jZW50cmlmdWdhbC5jZW50cmlmdWdlLnByb3RvY29sLkhpc3RvcnlSZXN1bHQSOQoEcGluZxgMIAEoCzIrLmNlbnRyaWZ1Z2FsLmNlbnRyaWZ1Z2UucHJvdG9jb2wuUGluZ1Jlc3VsdBI3CgNycGMYDSABKAsyKi5jZW50cmlmdWdhbC5jZW50cmlmdWdlLnByb3RvY29sLlJQQ1Jlc3VsdBI/CgdyZWZyZXNoGA4gASgLMi4uY2VudHJpZnVnYWwuY2VudHJpZnVnZS5wcm90b2NvbC5SZWZyZXNoUmVzdWx0EkYKC3N1Yl9yZWZyZXNoGA8gASgLMjEuY2VudHJpZnVnYWwuY2VudHJpZnVnZS5wcm90b2NvbC5TdWJSZWZyZXNoUmVzdWx0SgQIAxAEIr4ECgRQdXNoEg8KB2NoYW5uZWwYAiABKAkSOQoDcHViGAQgASgLMiwuY2VudHJpZnVnYWwuY2VudHJpZnVnZS5wcm90b2NvbC5QdWJsaWNhdGlvbhIzCgRqb2luGAUgASgLMiUuY2VudHJpZnVnYWwuY2VudHJpZnVnZS5wcm90b2NvbC5Kb2luEjUKBWxlYXZlGAYgASgLMiYuY2VudHJpZnVnYWwuY2VudHJpZnVnZS5wcm90b2NvbC5MZWF2ZRJBCgt1bnN1YnNjcmliZRgHIAEoCzIsLmNlbnRyaWZ1Z2FsLmNlbnRyaWZ1Z2UucHJvdG9jb2wuVW5zdWJzY3JpYmUSOQoHbWVzc2FnZRgIIAEoCzIoLmNlbnRyaWZ1Z2FsLmNlbnRyaWZ1Z2UucHJvdG9jb2wuTWVzc2FnZRI9CglzdWJzY3JpYmUYCSABKAsyKi5jZW50cmlmdWdhbC5jZW50cmlmdWdlLnByb3RvY29sLlN1YnNjcmliZRI5Cgdjb25uZWN0GAogASgLMiguY2VudHJpZnVnYWwuY2VudHJpZnVnZS5wcm90b2NvbC5Db25uZWN0Ej8KCmRpc2Nvbm5lY3QYCyABKAsyKy5jZW50cmlmdWdhbC5jZW50cmlmdWdlLnByb3RvY29sLkRpc2Nvbm5lY3QSOQoHcmVmcmVzaBgMIAEoCzIoLmNlbnRyaWZ1Z2FsLmNlbnRyaWZ1Z2UucHJvdG9jb2wuUmVmcmVzaEoECAEQAkoECAMQBCJQCgpDbGllbnRJbmZvEgwKBHVzZXIYASABKAkSDgoGY2xpZW50GAIgASgJEhEKCWNvbm5faW5mbxgDIAEoDBIRCgljaGFuX2luZm8YBCABKAwimQIKC1B1YmxpY2F0aW9uEgwKBGRhdGEYBCABKAwSOQoEaW5mbxgFIAEoCzIrLmNlbnRyaWZ1Z2FsLmNlbnRyaWZ1Z2UucHJvdG9jb2wuQ2xpZW50SW5mbxIOCgZvZmZzZXQYBiABKAQSRAoEdGFncxgHIAMoCzI2LmNlbnRyaWZ1Z2FsLmNlbnRyaWZ1Z2UucHJvdG9jb2wuUHVibGljYXRpb24uVGFnc0VudHJ5Eg0KBWRlbHRhGAggASgIEgwKBHRpbWUYCSABKAMSDwoHY2hhbm5lbBgKIAEoCRorCglUYWdzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4AUoECAEQAkoECAIQA0oECAMQBCJBCgRKb2luEjkKBGluZm8YASABKAsyKy5jZW50cmlmdWdhbC5jZW50cmlmdWdlLnByb3RvY29sLkNsaWVudEluZm8iQgoFTGVhdmUSOQoEaW5mbxgBIAEoCzIrLmNlbnRyaWZ1Z2FsLmNlbnRyaWZ1Z2UucHJvdG9jb2wuQ2xpZW50SW5mbyIxCgtVbnN1YnNjcmliZRIMCgRjb2RlGAIgASgNEg4KBnJlYXNvbhgDIAEoCUoECAEQAiJtCglTdWJzY3JpYmUSEwoLcmVjb3ZlcmFibGUYASABKAgSDQoFZXBvY2gYBCABKAkSDgoGb2Zmc2V0GAUgASgEEhIKCnBvc2l0aW9uZWQYBiABKAgSDAoEZGF0YRgHIAEoDEoECAIQA0oECAMQBCIXCgdNZXNzYWdlEgwKBGRhdGEYASABKAwiwAIKB0Nvbm5lY3QSDgoGY2xpZW50GAEgASgJEg8KB3ZlcnNpb24YAiABKAkSDAoEZGF0YRgDIAEoDBJACgRzdWJzGAQgAygLMjIuY2VudHJpZnVnYWwuY2VudHJpZnVnZS5wcm90b2NvbC5Db25uZWN0LlN1YnNFbnRyeRIPCgdleHBpcmVzGAUgASgIEgsKA3R0bBgGIAEoDRIMCgRwaW5nGAcgASgNEgwKBHBvbmcYCCABKAgSDwoHc2Vzc2lvbhgJIAEoCRIMCgRub2RlGAogASgJEgwKBHRpbWUYCyABKAMaXQoJU3Vic0VudHJ5EgsKA2tleRgBIAEoCRI/CgV2YWx1ZRgCIAEoCzIwLmNlbnRyaWZ1Z2FsLmNlbnRyaWZ1Z2UucHJvdG9jb2wuU3Vic2NyaWJlUmVzdWx0OgI4ASI9CgpEaXNjb25uZWN0EgwKBGNvZGUYASABKA0SDgoGcmVhc29uGAIgASgJEhEKCXJlY29ubmVjdBgDIAEoCCInCgdSZWZyZXNoEg8KB2V4cGlyZXMYASABKAgSCwoDdHRsGAIgASgNIvQCCg5Db25uZWN0UmVxdWVzdBINCgV0b2tlbhgBIAEoCRIMCgRkYXRhGAIgASgMEkcKBHN1YnMYAyADKAsyOS5jZW50cmlmdWdhbC5jZW50cmlmdWdlLnByb3RvY29sLkNvbm5lY3RSZXF1ZXN0LlN1YnNFbnRyeRIMCgRuYW1lGAQgASgJEg8KB3ZlcnNpb24YBSABKAkSTQoHaGVhZGVycxgGIAMoCzI8LmNlbnRyaWZ1Z2FsLmNlbnRyaWZ1Z2UucHJvdG9jb2wuQ29ubmVjdFJlcXVlc3QuSGVhZGVyc0VudHJ5Gl4KCVN1YnNFbnRyeRILCgNrZXkYASABKAkSQAoFdmFsdWUYAiABKAsyMS5jZW50cmlmdWdhbC5jZW50cmlmdWdlLnByb3RvY29sLlN1YnNjcmliZVJlcXVlc3Q6AjgBGi4KDEhlYWRlcnNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIswCCg1Db25uZWN0UmVzdWx0Eg4KBmNsaWVudBgBIAEoCRIPCgd2ZXJzaW9uGAIgASgJEg8KB2V4cGlyZXMYAyABKAgSCwoDdHRsGAQgASgNEgwKBGRhdGEYBSABKAwSRgoEc3VicxgGIAMoCzI4LmNlbnRyaWZ1Z2FsLmNlbnRyaWZ1Z2UucHJvdG9jb2wuQ29ubmVjdFJlc3VsdC5TdWJzRW50cnkSDAoEcGluZxgHIAEoDRIMCgRwb25nGAggASgIEg8KB3Nlc3Npb24YCSABKAkSDAoEbm9kZRgKIAEoCRIMCgR0aW1lGAsgASgDGl0KCVN1YnNFbnRyeRILCgNrZXkYASABKAkSPwoFdmFsdWUYAiABKAsyMC5jZW50cmlmdWdhbC5jZW50cmlmdWdlLnByb3RvY29sLlN1YnNjcmliZVJlc3VsdDoCOAEiHwoOUmVmcmVzaFJlcXVlc3QSDQoFdG9rZW4YASABKAkiTgoNUmVmcmVzaFJlc3VsdBIOCgZjbGllbnQYASABKAkSDwoHdmVyc2lvbhgCIAEoCRIPCgdleHBpcmVzGAMgASgIEgsKA3R0bBgEIAEoDSLIAQoQU3Vic2NyaWJlUmVxdWVzdBIPCgdjaGFubmVsGAEgASgJEg0KBXRva2VuGAIgASgJEg8KB3JlY292ZXIYAyABKAgSDQoFZXBvY2gYBiABKAkSDgoGb2Zmc2V0GAcgASgEEgwKBGRhdGEYCCABKAwSEgoKcG9zaXRpb25lZBgJIAEoCBITCgtyZWNvdmVyYWJsZRgKIAEoCBISCgpqb2luX2xlYXZlGAsgASgIEg0KBWRlbHRhGAwgASgJSgQIBBAFSgQIBRAGIo8CCg9TdWJzY3JpYmVSZXN1bHQSDwoHZXhwaXJlcxgBIAEoCBILCgN0dGwYAiABKA0SEwoLcmVjb3ZlcmFibGUYAyABKAgSDQoFZXBvY2gYBiABKAkSQgoMcHVibGljYXRpb25zGAcgAygLMiwuY2VudHJpZnVnYWwuY2VudHJpZnVnZS5wcm90b2NvbC5QdWJsaWNhdGlvbhIRCglyZWNvdmVyZWQYCCABKAgSDgoGb2Zmc2V0GAkgASgEEhIKCnBvc2l0aW9uZWQYCiABKAgSDAoEZGF0YRgLIAEoDBIWCg53YXNfcmVjb3ZlcmluZxgMIAEoCBINCgVkZWx0YRgNIAEoCEoECAQQBUoECAUQBiIzChFTdWJSZWZyZXNoUmVxdWVzdBIPCgdjaGFubmVsGAEgASgJEg0KBXRva2VuGAIgASgJIjAKEFN1YlJlZnJlc2hSZXN1bHQSDwoHZXhwaXJlcxgBIAEoCBILCgN0dGwYAiABKA0iJQoSVW5zdWJzY3JpYmVSZXF1ZXN0Eg8KB2NoYW5uZWwYASABKAkiEwoRVW5zdWJzY3JpYmVSZXN1bHQiLwoOUHVibGlzaFJlcXVlc3QSDwoHY2hhbm5lbBgBIAEoCRIMCgRkYXRhGAIgASgMIg8KDVB1Ymxpc2hSZXN1bHQiIgoPUHJlc2VuY2VSZXF1ZXN0Eg8KB2NoYW5uZWwYASABKAkivwEKDlByZXNlbmNlUmVzdWx0Ek8KCHByZXNlbmNlGAEgAygLMj0uY2VudHJpZnVnYWwuY2VudHJpZnVnZS5wcm90b2NvbC5QcmVzZW5jZVJlc3VsdC5QcmVzZW5jZUVudHJ5GlwKDVByZXNlbmNlRW50cnkSCwoDa2V5GAEgASgJEjoKBXZhbHVlGAIgASgLMisuY2VudHJpZnVnYWwuY2VudHJpZnVnZS5wcm90b2NvbC5DbGllbnRJbmZvOgI4ASInChRQcmVzZW5jZVN0YXRzUmVxdWVzdBIPCgdjaGFubmVsGAEgASgJIj0KE1ByZXNlbmNlU3RhdHNSZXN1bHQSEwoLbnVtX2NsaWVudHMYASABKA0SEQoJbnVtX3VzZXJzGAIgASgNIi8KDlN0cmVhbVBvc2l0aW9uEg4KBm9mZnNldBgBIAEoBBINCgVlcG9jaBgCIAEoCSKfAQoOSGlzdG9yeVJlcXVlc3QSDwoHY2hhbm5lbBgBIAEoCRINCgVsaW1pdBgHIAEoBRI+CgVzaW5jZRgIIAEoCzIvLmNlbnRyaWZ1Z2FsLmNlbnRyaWZ1Z2UucHJvdG9jb2wuU3RyZWFtUG9zaXRpb24SDwoHcmV2ZXJzZRgJIAEoCEoECAIQA0oECAMQBEoECAQQBUoECAUQBkoECAYQByJyCg1IaXN0b3J5UmVzdWx0EkIKDHB1YmxpY2F0aW9ucxgBIAMoCzIsLmNlbnRyaWZ1Z2FsLmNlbnRyaWZ1Z2UucHJvdG9jb2wuUHVibGljYXRpb24SDQoFZXBvY2gYAiABKAkSDgoGb2Zmc2V0GAMgASgEIg0KC1BpbmdSZXF1ZXN0IgwKClBpbmdSZXN1bHQiKgoKUlBDUmVxdWVzdBIMCgRkYXRhGAEgASgMEg4KBm1ldGhvZBgCIAEoCSIZCglSUENSZXN1bHQSDAoEZGF0YRgBIAEoDCIbCgtTZW5kUmVxdWVzdBIMCgRkYXRhGAEgASgMQiFaH2dpdGh1Yi5jb20vY2VudHJpZnVnYWwvcHJvdG9jb2xiBnByb3RvMw");

/**
 * @generated from message centrifugal.centrifuge.protocol.Error
 */
export type Error = Message$1<"centrifugal.centrifuge.protocol.Error"> & {
  /**
   * @generated from field: uint32 code = 1;
   */
  code: number;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: bool temporary = 3;
   */
  temporary: boolean;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.Error.
 * Use `create(ErrorSchema)` to create a new message.
 */
export const ErrorSchema: GenMessage<Error> = /*@__PURE__*/
  messageDesc(file_client, 0);

/**
 * @generated from message centrifugal.centrifuge.protocol.EmulationRequest
 */
export type EmulationRequest = Message$1<"centrifugal.centrifuge.protocol.EmulationRequest"> & {
  /**
   * @generated from field: string node = 1;
   */
  node: string;

  /**
   * @generated from field: string session = 2;
   */
  session: string;

  /**
   * @generated from field: bytes data = 3;
   */
  data: Uint8Array;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.EmulationRequest.
 * Use `create(EmulationRequestSchema)` to create a new message.
 */
export const EmulationRequestSchema: GenMessage<EmulationRequest> = /*@__PURE__*/
  messageDesc(file_client, 1);

/**
 * Command sent from a client to a server.
 * ProtocolVersion2 uses id and one of the possible request messages.
 *
 * @generated from message centrifugal.centrifuge.protocol.Command
 */
export type Command = Message$1<"centrifugal.centrifuge.protocol.Command"> & {
  /**
   * Id of command to let client match replies to commands.
   *
   * @generated from field: uint32 id = 1;
   */
  id: number;

  /**
   * ProtocolVersion2 client can send one of the following requests. Server will
   * only take the first non-null request out of these and may return an error if
   * client passed more than one request. We are not using oneof here due to JSON
   * interoperability concerns.
   *
   * @generated from field: centrifugal.centrifuge.protocol.ConnectRequest connect = 4;
   */
  connect?: ConnectRequest;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.SubscribeRequest subscribe = 5;
   */
  subscribe?: SubscribeRequest;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.UnsubscribeRequest unsubscribe = 6;
   */
  unsubscribe?: UnsubscribeRequest;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.PublishRequest publish = 7;
   */
  publish?: PublishRequest;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.PresenceRequest presence = 8;
   */
  presence?: PresenceRequest;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.PresenceStatsRequest presence_stats = 9;
   */
  presenceStats?: PresenceStatsRequest;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.HistoryRequest history = 10;
   */
  history?: HistoryRequest;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.PingRequest ping = 11;
   */
  ping?: PingRequest;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.SendRequest send = 12;
   */
  send?: SendRequest;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.RPCRequest rpc = 13;
   */
  rpc?: RPCRequest;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.RefreshRequest refresh = 14;
   */
  refresh?: RefreshRequest;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.SubRefreshRequest sub_refresh = 15;
   */
  subRefresh?: SubRefreshRequest;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.Command.
 * Use `create(CommandSchema)` to create a new message.
 */
export const CommandSchema: GenMessage<Command> = /*@__PURE__*/
  messageDesc(file_client, 2);

/**
 * Reply sent from a server to a client.
 * ProtocolVersion2 uses id and one of the possible concrete result messages.
 *
 * @generated from message centrifugal.centrifuge.protocol.Reply
 */
export type Reply = Message$1<"centrifugal.centrifuge.protocol.Reply"> & {
  /**
   * Id will only be set to a value > 0 for replies to commands. For pushes
   * it will have zero value.
   *
   * @generated from field: uint32 id = 1;
   */
  id: number;

  /**
   * Error can only be set in replies to commands. For pushes it will have zero value.
   *
   * @generated from field: centrifugal.centrifuge.protocol.Error error = 2;
   */
  error?: Error;

  /**
   * ProtocolVersion2 server can send one of the following fields. We are not using
   * oneof here due to JSON interoperability concerns.
   *
   * @generated from field: centrifugal.centrifuge.protocol.Push push = 4;
   */
  push?: Push;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.ConnectResult connect = 5;
   */
  connect?: ConnectResult;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.SubscribeResult subscribe = 6;
   */
  subscribe?: SubscribeResult;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.UnsubscribeResult unsubscribe = 7;
   */
  unsubscribe?: UnsubscribeResult;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.PublishResult publish = 8;
   */
  publish?: PublishResult;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.PresenceResult presence = 9;
   */
  presence?: PresenceResult;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.PresenceStatsResult presence_stats = 10;
   */
  presenceStats?: PresenceStatsResult;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.HistoryResult history = 11;
   */
  history?: HistoryResult;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.PingResult ping = 12;
   */
  ping?: PingResult;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.RPCResult rpc = 13;
   */
  rpc?: RPCResult;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.RefreshResult refresh = 14;
   */
  refresh?: RefreshResult;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.SubRefreshResult sub_refresh = 15;
   */
  subRefresh?: SubRefreshResult;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.Reply.
 * Use `create(ReplySchema)` to create a new message.
 */
export const ReplySchema: GenMessage<Reply> = /*@__PURE__*/
  messageDesc(file_client, 3);

/**
 * Push can be sent to a client as part of Reply in case of bidirectional transport or
 * without additional wrapping in case of unidirectional transports.
 * ProtocolVersion2 uses channel and one of the possible concrete push messages.
 *
 * @generated from message centrifugal.centrifuge.protocol.Push
 */
export type Push = Message$1<"centrifugal.centrifuge.protocol.Push"> & {
  /**
   * @generated from field: string channel = 2;
   */
  channel: string;

  /**
   * ProtocolVersion2 server can push one of the following fields to the client. We are
   * not using oneof here due to JSON interoperability concerns.
   *
   * @generated from field: centrifugal.centrifuge.protocol.Publication pub = 4;
   */
  pub?: Publication;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.Join join = 5;
   */
  join?: Join;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.Leave leave = 6;
   */
  leave?: Leave;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.Unsubscribe unsubscribe = 7;
   */
  unsubscribe?: Unsubscribe;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.Message message = 8;
   */
  message?: Message;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.Subscribe subscribe = 9;
   */
  subscribe?: Subscribe;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.Connect connect = 10;
   */
  connect?: Connect;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.Disconnect disconnect = 11;
   */
  disconnect?: Disconnect;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.Refresh refresh = 12;
   */
  refresh?: Refresh;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.Push.
 * Use `create(PushSchema)` to create a new message.
 */
export const PushSchema: GenMessage<Push> = /*@__PURE__*/
  messageDesc(file_client, 4);

/**
 * @generated from message centrifugal.centrifuge.protocol.ClientInfo
 */
export type ClientInfo = Message$1<"centrifugal.centrifuge.protocol.ClientInfo"> & {
  /**
   * @generated from field: string user = 1;
   */
  user: string;

  /**
   * @generated from field: string client = 2;
   */
  client: string;

  /**
   * @generated from field: bytes conn_info = 3;
   */
  connInfo: Uint8Array;

  /**
   * @generated from field: bytes chan_info = 4;
   */
  chanInfo: Uint8Array;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.ClientInfo.
 * Use `create(ClientInfoSchema)` to create a new message.
 */
export const ClientInfoSchema: GenMessage<ClientInfo> = /*@__PURE__*/
  messageDesc(file_client, 5);

/**
 * @generated from message centrifugal.centrifuge.protocol.Publication
 */
export type Publication = Message$1<"centrifugal.centrifuge.protocol.Publication"> & {
  /**
   * @generated from field: bytes data = 4;
   */
  data: Uint8Array;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.ClientInfo info = 5;
   */
  info?: ClientInfo;

  /**
   * @generated from field: uint64 offset = 6;
   */
  offset: bigint;

  /**
   * @generated from field: map<string, string> tags = 7;
   */
  tags: { [key: string]: string };

  /**
   * When set indicates that data in Publication is a delta from previous data.
   *
   * @generated from field: bool delta = 8;
   */
  delta: boolean;

  /**
   * Optional time of publication as Unix timestamp milliseconds.
   *
   * @generated from field: int64 time = 9;
   */
  time: bigint;

  /**
   * Optional channel name if Publication relates to wildcard subscription.
   *
   * @generated from field: string channel = 10;
   */
  channel: string;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.Publication.
 * Use `create(PublicationSchema)` to create a new message.
 */
export const PublicationSchema: GenMessage<Publication> = /*@__PURE__*/
  messageDesc(file_client, 6);

/**
 * @generated from message centrifugal.centrifuge.protocol.Join
 */
export type Join = Message$1<"centrifugal.centrifuge.protocol.Join"> & {
  /**
   * @generated from field: centrifugal.centrifuge.protocol.ClientInfo info = 1;
   */
  info?: ClientInfo;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.Join.
 * Use `create(JoinSchema)` to create a new message.
 */
export const JoinSchema: GenMessage<Join> = /*@__PURE__*/
  messageDesc(file_client, 7);

/**
 * @generated from message centrifugal.centrifuge.protocol.Leave
 */
export type Leave = Message$1<"centrifugal.centrifuge.protocol.Leave"> & {
  /**
   * @generated from field: centrifugal.centrifuge.protocol.ClientInfo info = 1;
   */
  info?: ClientInfo;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.Leave.
 * Use `create(LeaveSchema)` to create a new message.
 */
export const LeaveSchema: GenMessage<Leave> = /*@__PURE__*/
  messageDesc(file_client, 8);

/**
 * @generated from message centrifugal.centrifuge.protocol.Unsubscribe
 */
export type Unsubscribe = Message$1<"centrifugal.centrifuge.protocol.Unsubscribe"> & {
  /**
   * @generated from field: uint32 code = 2;
   */
  code: number;

  /**
   * @generated from field: string reason = 3;
   */
  reason: string;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.Unsubscribe.
 * Use `create(UnsubscribeSchema)` to create a new message.
 */
export const UnsubscribeSchema: GenMessage<Unsubscribe> = /*@__PURE__*/
  messageDesc(file_client, 9);

/**
 * @generated from message centrifugal.centrifuge.protocol.Subscribe
 */
export type Subscribe = Message$1<"centrifugal.centrifuge.protocol.Subscribe"> & {
  /**
   * @generated from field: bool recoverable = 1;
   */
  recoverable: boolean;

  /**
   * @generated from field: string epoch = 4;
   */
  epoch: string;

  /**
   * @generated from field: uint64 offset = 5;
   */
  offset: bigint;

  /**
   * @generated from field: bool positioned = 6;
   */
  positioned: boolean;

  /**
   * @generated from field: bytes data = 7;
   */
  data: Uint8Array;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.Subscribe.
 * Use `create(SubscribeSchema)` to create a new message.
 */
export const SubscribeSchema: GenMessage<Subscribe> = /*@__PURE__*/
  messageDesc(file_client, 10);

/**
 * @generated from message centrifugal.centrifuge.protocol.Message
 */
export type Message = Message$1<"centrifugal.centrifuge.protocol.Message"> & {
  /**
   * @generated from field: bytes data = 1;
   */
  data: Uint8Array;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.Message.
 * Use `create(MessageSchema)` to create a new message.
 */
export const MessageSchema: GenMessage<Message> = /*@__PURE__*/
  messageDesc(file_client, 11);

/**
 * @generated from message centrifugal.centrifuge.protocol.Connect
 */
export type Connect = Message$1<"centrifugal.centrifuge.protocol.Connect"> & {
  /**
   * @generated from field: string client = 1;
   */
  client: string;

  /**
   * @generated from field: string version = 2;
   */
  version: string;

  /**
   * @generated from field: bytes data = 3;
   */
  data: Uint8Array;

  /**
   * @generated from field: map<string, centrifugal.centrifuge.protocol.SubscribeResult> subs = 4;
   */
  subs: { [key: string]: SubscribeResult };

  /**
   * @generated from field: bool expires = 5;
   */
  expires: boolean;

  /**
   * @generated from field: uint32 ttl = 6;
   */
  ttl: number;

  /**
   * @generated from field: uint32 ping = 7;
   */
  ping: number;

  /**
   * @generated from field: bool pong = 8;
   */
  pong: boolean;

  /**
   * @generated from field: string session = 9;
   */
  session: string;

  /**
   * @generated from field: string node = 10;
   */
  node: string;

  /**
   * Server time as Unix timestamp in milliseconds (not sent by default).
   *
   * @generated from field: int64 time = 11;
   */
  time: bigint;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.Connect.
 * Use `create(ConnectSchema)` to create a new message.
 */
export const ConnectSchema: GenMessage<Connect> = /*@__PURE__*/
  messageDesc(file_client, 12);

/**
 * @generated from message centrifugal.centrifuge.protocol.Disconnect
 */
export type Disconnect = Message$1<"centrifugal.centrifuge.protocol.Disconnect"> & {
  /**
   * @generated from field: uint32 code = 1;
   */
  code: number;

  /**
   * @generated from field: string reason = 2;
   */
  reason: string;

  /**
   * @generated from field: bool reconnect = 3;
   */
  reconnect: boolean;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.Disconnect.
 * Use `create(DisconnectSchema)` to create a new message.
 */
export const DisconnectSchema: GenMessage<Disconnect> = /*@__PURE__*/
  messageDesc(file_client, 13);

/**
 * @generated from message centrifugal.centrifuge.protocol.Refresh
 */
export type Refresh = Message$1<"centrifugal.centrifuge.protocol.Refresh"> & {
  /**
   * @generated from field: bool expires = 1;
   */
  expires: boolean;

  /**
   * @generated from field: uint32 ttl = 2;
   */
  ttl: number;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.Refresh.
 * Use `create(RefreshSchema)` to create a new message.
 */
export const RefreshSchema: GenMessage<Refresh> = /*@__PURE__*/
  messageDesc(file_client, 14);

/**
 * @generated from message centrifugal.centrifuge.protocol.ConnectRequest
 */
export type ConnectRequest = Message$1<"centrifugal.centrifuge.protocol.ConnectRequest"> & {
  /**
   * @generated from field: string token = 1;
   */
  token: string;

  /**
   * @generated from field: bytes data = 2;
   */
  data: Uint8Array;

  /**
   * @generated from field: map<string, centrifugal.centrifuge.protocol.SubscribeRequest> subs = 3;
   */
  subs: { [key: string]: SubscribeRequest };

  /**
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * @generated from field: string version = 5;
   */
  version: string;

  /**
   * @generated from field: map<string, string> headers = 6;
   */
  headers: { [key: string]: string };
};

/**
 * Describes the message centrifugal.centrifuge.protocol.ConnectRequest.
 * Use `create(ConnectRequestSchema)` to create a new message.
 */
export const ConnectRequestSchema: GenMessage<ConnectRequest> = /*@__PURE__*/
  messageDesc(file_client, 15);

/**
 * @generated from message centrifugal.centrifuge.protocol.ConnectResult
 */
export type ConnectResult = Message$1<"centrifugal.centrifuge.protocol.ConnectResult"> & {
  /**
   * @generated from field: string client = 1;
   */
  client: string;

  /**
   * @generated from field: string version = 2;
   */
  version: string;

  /**
   * @generated from field: bool expires = 3;
   */
  expires: boolean;

  /**
   * @generated from field: uint32 ttl = 4;
   */
  ttl: number;

  /**
   * @generated from field: bytes data = 5;
   */
  data: Uint8Array;

  /**
   * @generated from field: map<string, centrifugal.centrifuge.protocol.SubscribeResult> subs = 6;
   */
  subs: { [key: string]: SubscribeResult };

  /**
   * @generated from field: uint32 ping = 7;
   */
  ping: number;

  /**
   * @generated from field: bool pong = 8;
   */
  pong: boolean;

  /**
   * @generated from field: string session = 9;
   */
  session: string;

  /**
   * @generated from field: string node = 10;
   */
  node: string;

  /**
   * Server time as Unix timestamp in milliseconds (not sent by default).
   *
   * @generated from field: int64 time = 11;
   */
  time: bigint;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.ConnectResult.
 * Use `create(ConnectResultSchema)` to create a new message.
 */
export const ConnectResultSchema: GenMessage<ConnectResult> = /*@__PURE__*/
  messageDesc(file_client, 16);

/**
 * @generated from message centrifugal.centrifuge.protocol.RefreshRequest
 */
export type RefreshRequest = Message$1<"centrifugal.centrifuge.protocol.RefreshRequest"> & {
  /**
   * @generated from field: string token = 1;
   */
  token: string;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.RefreshRequest.
 * Use `create(RefreshRequestSchema)` to create a new message.
 */
export const RefreshRequestSchema: GenMessage<RefreshRequest> = /*@__PURE__*/
  messageDesc(file_client, 17);

/**
 * @generated from message centrifugal.centrifuge.protocol.RefreshResult
 */
export type RefreshResult = Message$1<"centrifugal.centrifuge.protocol.RefreshResult"> & {
  /**
   * @generated from field: string client = 1;
   */
  client: string;

  /**
   * @generated from field: string version = 2;
   */
  version: string;

  /**
   * @generated from field: bool expires = 3;
   */
  expires: boolean;

  /**
   * @generated from field: uint32 ttl = 4;
   */
  ttl: number;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.RefreshResult.
 * Use `create(RefreshResultSchema)` to create a new message.
 */
export const RefreshResultSchema: GenMessage<RefreshResult> = /*@__PURE__*/
  messageDesc(file_client, 18);

/**
 * @generated from message centrifugal.centrifuge.protocol.SubscribeRequest
 */
export type SubscribeRequest = Message$1<"centrifugal.centrifuge.protocol.SubscribeRequest"> & {
  /**
   * @generated from field: string channel = 1;
   */
  channel: string;

  /**
   * @generated from field: string token = 2;
   */
  token: string;

  /**
   * @generated from field: bool recover = 3;
   */
  recover: boolean;

  /**
   * @generated from field: string epoch = 6;
   */
  epoch: string;

  /**
   * @generated from field: uint64 offset = 7;
   */
  offset: bigint;

  /**
   * @generated from field: bytes data = 8;
   */
  data: Uint8Array;

  /**
   * @generated from field: bool positioned = 9;
   */
  positioned: boolean;

  /**
   * @generated from field: bool recoverable = 10;
   */
  recoverable: boolean;

  /**
   * @generated from field: bool join_leave = 11;
   */
  joinLeave: boolean;

  /**
   * @generated from field: string delta = 12;
   */
  delta: string;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.SubscribeRequest.
 * Use `create(SubscribeRequestSchema)` to create a new message.
 */
export const SubscribeRequestSchema: GenMessage<SubscribeRequest> = /*@__PURE__*/
  messageDesc(file_client, 19);

/**
 * @generated from message centrifugal.centrifuge.protocol.SubscribeResult
 */
export type SubscribeResult = Message$1<"centrifugal.centrifuge.protocol.SubscribeResult"> & {
  /**
   * @generated from field: bool expires = 1;
   */
  expires: boolean;

  /**
   * @generated from field: uint32 ttl = 2;
   */
  ttl: number;

  /**
   * @generated from field: bool recoverable = 3;
   */
  recoverable: boolean;

  /**
   * @generated from field: string epoch = 6;
   */
  epoch: string;

  /**
   * @generated from field: repeated centrifugal.centrifuge.protocol.Publication publications = 7;
   */
  publications: Publication[];

  /**
   * @generated from field: bool recovered = 8;
   */
  recovered: boolean;

  /**
   * @generated from field: uint64 offset = 9;
   */
  offset: bigint;

  /**
   * @generated from field: bool positioned = 10;
   */
  positioned: boolean;

  /**
   * @generated from field: bytes data = 11;
   */
  data: Uint8Array;

  /**
   * @generated from field: bool was_recovering = 12;
   */
  wasRecovering: boolean;

  /**
   * @generated from field: bool delta = 13;
   */
  delta: boolean;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.SubscribeResult.
 * Use `create(SubscribeResultSchema)` to create a new message.
 */
export const SubscribeResultSchema: GenMessage<SubscribeResult> = /*@__PURE__*/
  messageDesc(file_client, 20);

/**
 * @generated from message centrifugal.centrifuge.protocol.SubRefreshRequest
 */
export type SubRefreshRequest = Message$1<"centrifugal.centrifuge.protocol.SubRefreshRequest"> & {
  /**
   * @generated from field: string channel = 1;
   */
  channel: string;

  /**
   * @generated from field: string token = 2;
   */
  token: string;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.SubRefreshRequest.
 * Use `create(SubRefreshRequestSchema)` to create a new message.
 */
export const SubRefreshRequestSchema: GenMessage<SubRefreshRequest> = /*@__PURE__*/
  messageDesc(file_client, 21);

/**
 * @generated from message centrifugal.centrifuge.protocol.SubRefreshResult
 */
export type SubRefreshResult = Message$1<"centrifugal.centrifuge.protocol.SubRefreshResult"> & {
  /**
   * @generated from field: bool expires = 1;
   */
  expires: boolean;

  /**
   * @generated from field: uint32 ttl = 2;
   */
  ttl: number;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.SubRefreshResult.
 * Use `create(SubRefreshResultSchema)` to create a new message.
 */
export const SubRefreshResultSchema: GenMessage<SubRefreshResult> = /*@__PURE__*/
  messageDesc(file_client, 22);

/**
 * @generated from message centrifugal.centrifuge.protocol.UnsubscribeRequest
 */
export type UnsubscribeRequest = Message$1<"centrifugal.centrifuge.protocol.UnsubscribeRequest"> & {
  /**
   * @generated from field: string channel = 1;
   */
  channel: string;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.UnsubscribeRequest.
 * Use `create(UnsubscribeRequestSchema)` to create a new message.
 */
export const UnsubscribeRequestSchema: GenMessage<UnsubscribeRequest> = /*@__PURE__*/
  messageDesc(file_client, 23);

/**
 * @generated from message centrifugal.centrifuge.protocol.UnsubscribeResult
 */
export type UnsubscribeResult = Message$1<"centrifugal.centrifuge.protocol.UnsubscribeResult"> & {
};

/**
 * Describes the message centrifugal.centrifuge.protocol.UnsubscribeResult.
 * Use `create(UnsubscribeResultSchema)` to create a new message.
 */
export const UnsubscribeResultSchema: GenMessage<UnsubscribeResult> = /*@__PURE__*/
  messageDesc(file_client, 24);

/**
 * @generated from message centrifugal.centrifuge.protocol.PublishRequest
 */
export type PublishRequest = Message$1<"centrifugal.centrifuge.protocol.PublishRequest"> & {
  /**
   * @generated from field: string channel = 1;
   */
  channel: string;

  /**
   * @generated from field: bytes data = 2;
   */
  data: Uint8Array;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.PublishRequest.
 * Use `create(PublishRequestSchema)` to create a new message.
 */
export const PublishRequestSchema: GenMessage<PublishRequest> = /*@__PURE__*/
  messageDesc(file_client, 25);

/**
 * @generated from message centrifugal.centrifuge.protocol.PublishResult
 */
export type PublishResult = Message$1<"centrifugal.centrifuge.protocol.PublishResult"> & {
};

/**
 * Describes the message centrifugal.centrifuge.protocol.PublishResult.
 * Use `create(PublishResultSchema)` to create a new message.
 */
export const PublishResultSchema: GenMessage<PublishResult> = /*@__PURE__*/
  messageDesc(file_client, 26);

/**
 * @generated from message centrifugal.centrifuge.protocol.PresenceRequest
 */
export type PresenceRequest = Message$1<"centrifugal.centrifuge.protocol.PresenceRequest"> & {
  /**
   * @generated from field: string channel = 1;
   */
  channel: string;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.PresenceRequest.
 * Use `create(PresenceRequestSchema)` to create a new message.
 */
export const PresenceRequestSchema: GenMessage<PresenceRequest> = /*@__PURE__*/
  messageDesc(file_client, 27);

/**
 * @generated from message centrifugal.centrifuge.protocol.PresenceResult
 */
export type PresenceResult = Message$1<"centrifugal.centrifuge.protocol.PresenceResult"> & {
  /**
   * @generated from field: map<string, centrifugal.centrifuge.protocol.ClientInfo> presence = 1;
   */
  presence: { [key: string]: ClientInfo };
};

/**
 * Describes the message centrifugal.centrifuge.protocol.PresenceResult.
 * Use `create(PresenceResultSchema)` to create a new message.
 */
export const PresenceResultSchema: GenMessage<PresenceResult> = /*@__PURE__*/
  messageDesc(file_client, 28);

/**
 * @generated from message centrifugal.centrifuge.protocol.PresenceStatsRequest
 */
export type PresenceStatsRequest = Message$1<"centrifugal.centrifuge.protocol.PresenceStatsRequest"> & {
  /**
   * @generated from field: string channel = 1;
   */
  channel: string;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.PresenceStatsRequest.
 * Use `create(PresenceStatsRequestSchema)` to create a new message.
 */
export const PresenceStatsRequestSchema: GenMessage<PresenceStatsRequest> = /*@__PURE__*/
  messageDesc(file_client, 29);

/**
 * @generated from message centrifugal.centrifuge.protocol.PresenceStatsResult
 */
export type PresenceStatsResult = Message$1<"centrifugal.centrifuge.protocol.PresenceStatsResult"> & {
  /**
   * @generated from field: uint32 num_clients = 1;
   */
  numClients: number;

  /**
   * @generated from field: uint32 num_users = 2;
   */
  numUsers: number;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.PresenceStatsResult.
 * Use `create(PresenceStatsResultSchema)` to create a new message.
 */
export const PresenceStatsResultSchema: GenMessage<PresenceStatsResult> = /*@__PURE__*/
  messageDesc(file_client, 30);

/**
 * @generated from message centrifugal.centrifuge.protocol.StreamPosition
 */
export type StreamPosition = Message$1<"centrifugal.centrifuge.protocol.StreamPosition"> & {
  /**
   * @generated from field: uint64 offset = 1;
   */
  offset: bigint;

  /**
   * @generated from field: string epoch = 2;
   */
  epoch: string;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.StreamPosition.
 * Use `create(StreamPositionSchema)` to create a new message.
 */
export const StreamPositionSchema: GenMessage<StreamPosition> = /*@__PURE__*/
  messageDesc(file_client, 31);

/**
 * @generated from message centrifugal.centrifuge.protocol.HistoryRequest
 */
export type HistoryRequest = Message$1<"centrifugal.centrifuge.protocol.HistoryRequest"> & {
  /**
   * @generated from field: string channel = 1;
   */
  channel: string;

  /**
   * @generated from field: int32 limit = 7;
   */
  limit: number;

  /**
   * @generated from field: centrifugal.centrifuge.protocol.StreamPosition since = 8;
   */
  since?: StreamPosition;

  /**
   * @generated from field: bool reverse = 9;
   */
  reverse: boolean;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.HistoryRequest.
 * Use `create(HistoryRequestSchema)` to create a new message.
 */
export const HistoryRequestSchema: GenMessage<HistoryRequest> = /*@__PURE__*/
  messageDesc(file_client, 32);

/**
 * @generated from message centrifugal.centrifuge.protocol.HistoryResult
 */
export type HistoryResult = Message$1<"centrifugal.centrifuge.protocol.HistoryResult"> & {
  /**
   * @generated from field: repeated centrifugal.centrifuge.protocol.Publication publications = 1;
   */
  publications: Publication[];

  /**
   * @generated from field: string epoch = 2;
   */
  epoch: string;

  /**
   * @generated from field: uint64 offset = 3;
   */
  offset: bigint;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.HistoryResult.
 * Use `create(HistoryResultSchema)` to create a new message.
 */
export const HistoryResultSchema: GenMessage<HistoryResult> = /*@__PURE__*/
  messageDesc(file_client, 33);

/**
 * @generated from message centrifugal.centrifuge.protocol.PingRequest
 */
export type PingRequest = Message$1<"centrifugal.centrifuge.protocol.PingRequest"> & {
};

/**
 * Describes the message centrifugal.centrifuge.protocol.PingRequest.
 * Use `create(PingRequestSchema)` to create a new message.
 */
export const PingRequestSchema: GenMessage<PingRequest> = /*@__PURE__*/
  messageDesc(file_client, 34);

/**
 * @generated from message centrifugal.centrifuge.protocol.PingResult
 */
export type PingResult = Message$1<"centrifugal.centrifuge.protocol.PingResult"> & {
};

/**
 * Describes the message centrifugal.centrifuge.protocol.PingResult.
 * Use `create(PingResultSchema)` to create a new message.
 */
export const PingResultSchema: GenMessage<PingResult> = /*@__PURE__*/
  messageDesc(file_client, 35);

/**
 * @generated from message centrifugal.centrifuge.protocol.RPCRequest
 */
export type RPCRequest = Message$1<"centrifugal.centrifuge.protocol.RPCRequest"> & {
  /**
   * @generated from field: bytes data = 1;
   */
  data: Uint8Array;

  /**
   * @generated from field: string method = 2;
   */
  method: string;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.RPCRequest.
 * Use `create(RPCRequestSchema)` to create a new message.
 */
export const RPCRequestSchema: GenMessage<RPCRequest> = /*@__PURE__*/
  messageDesc(file_client, 36);

/**
 * @generated from message centrifugal.centrifuge.protocol.RPCResult
 */
export type RPCResult = Message$1<"centrifugal.centrifuge.protocol.RPCResult"> & {
  /**
   * @generated from field: bytes data = 1;
   */
  data: Uint8Array;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.RPCResult.
 * Use `create(RPCResultSchema)` to create a new message.
 */
export const RPCResultSchema: GenMessage<RPCResult> = /*@__PURE__*/
  messageDesc(file_client, 37);

/**
 * @generated from message centrifugal.centrifuge.protocol.SendRequest
 */
export type SendRequest = Message$1<"centrifugal.centrifuge.protocol.SendRequest"> & {
  /**
   * @generated from field: bytes data = 1;
   */
  data: Uint8Array;
};

/**
 * Describes the message centrifugal.centrifuge.protocol.SendRequest.
 * Use `create(SendRequestSchema)` to create a new message.
 */
export const SendRequestSchema: GenMessage<SendRequest> = /*@__PURE__*/
  messageDesc(file_client, 38);

