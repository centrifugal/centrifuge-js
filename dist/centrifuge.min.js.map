{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///centrifuge.min.js","webpack:///webpack/bootstrap 2579663b1a35d88936e3","webpack:///./src/centrifuge.js","webpack:///./src/subscription.js","webpack:///./src/json.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/index.js","webpack:///./node_modules/events/events.js","webpack:///./src/utils.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","10","global","_interopRequireDefault","obj","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","create","constructor","value","writable","setPrototypeOf","__proto__","Centrifuge","undefined","_typeof","Symbol","iterator","_createClass","defineProperties","target","props","length","descriptor","key","protoProps","staticProps","_events","_events2","_subscription","_subscription2","_json","_utils","_EventEmitter","url","options","_this","getPrototypeOf","_url","_websocket","_sockjs","_isSockjs","_binary","_methodType","_pushType","_encoder","_decoder","_status","_reconnect","_reconnecting","_transport","_transportName","_transportClosed","_messageId","_clientID","_refreshRequired","_subs","_serverSubs","_lastSeq","_lastGen","_lastOffset","_lastEpoch","_messages","_isBatching","_isSubscribeBatching","_privateChannels","_numRefreshFailed","_refreshTimeout","_pingTimeout","_pongTimeout","_subRefreshTimeouts","_retries","_callbacks","_latency","_latencyStart","_connectData","_token","_xhrID","_xhrs","_dispatchPromise","Promise","resolve","_config","debug","websocket","sockjs","promise","minRetry","maxRetry","timeout","ping","pingInterval","pongWaitTimeout","privateChannelPrefix","onTransportClose","sockjsServer","sockjsTransports","refreshEndpoint","refreshHeaders","refreshParams","refreshData","refreshAttempts","refreshInterval","onRefreshFailed","onRefresh","subscribeEndpoint","subscribeHeaders","subscribeParams","subRefreshInterval","onPrivateSubscribe","_configure","token","data","headers","params","callback","_this2","query","_debug","JSON","stringify","xhr","XMLHttpRequest","ActiveXObject","encodeURIComponent","open","withCredentials","setRequestHeader","headerName","onreadystatechange","readyState","status","parsed","parse","responseText","e","error","_log","setTimeout","send","log","arguments","WebSocket","format","_formatOverride","Error","JsonMethodType","JsonPushType","JsonEncoder","JsonDecoder","configuration","extend","startsWith","indexOf","_setFormat","SockJS","newStatus","interval","backoff","xhrID","abort","reconnect","_stopPing","id","callbacks","clearTimeout","errback","_createErrorObject","channel","sub","_isSuccess","_triggerUnsubscribe","_recover","_shouldResubscribe","_setSubscribing","_setUnsubscribed","_abortInflightXHRs","_clearSubRefreshTimeout","transport","OPEN","commands","_isTransportOpen","command","encodeCommands","_this3","sockjsOptions","transports","server","_websocketSupported","binaryType","onopen","onheartbeat","_restartPing","msg","subs","hasSubs","recoverable","recover","seq","gen","offset","epoch","Date","_call","then","resolveCtx","_connectResponse","decodeCommandResult","CONNECT","result","next","rejectCtx","code","_disconnect","onerror","onclose","closeEvent","reason","needReconnect","advice","event","_getRetryInterval","_refresh","_connect","onmessage","_dataReceived","_rpc","method","_this4","RPC","isConnected","reject","SEND","_transportSend","PUBLISH","_this5","replies","decodeReplies","finishDispatch","_dispatchSynchronized","_this6","_dispatchReply","reply","_handleReply","_handlePush","_this7","_addMessage","_registerCall","_setStatus","_setupTransport","shouldReconnect","_isDisconnected","_clearConnectedState","emit","close","_this8","_refreshFailed","clientID","_newXHRID","cb","resp","jitter","Math","round","random","max","REFRESH","_refreshResponse","_refreshError","context","_ajax","err","_this9","_this10","expires","client","_getTTLMilliseconds","ttl","_this11","channelsData","channels","channelData","SUB_REFRESH","_getSub","_subRefreshResponse","_subRefreshError","_this12","subRefreshTimeout","_subRefresh","_this13","isResubscribe","_this14","_setNew","SUBSCRIBE","startSubscribeBatching","_subscribe","stopSubscribeBatching","_needRecover","_getLastSeq","_getLastGen","_getLastOffset","_getLastEpoch","_subscribeResponse","_subscribeError","UNSUBSCRIBE","min","isRecover","_this15","wasReconnecting","_resetRetry","getTime","startBatching","stopBatching","_startPing","ctx","latency","_processServerSubs","recovered","subCtx","pubs","publications","reverse","_handlePublication","_this16","_isSubscribing","message","_setSubscribeError","_this17","positioned","_setSubscribeSuccess","_recoverable","errorExists","join","info","_isServerSub","leave","unsub","unsubscribe","resubscribe","subscribe","pub","push","decodePush","type","PUBLICATION","decodePushData","MESSAGE","_handleMessage","JOIN","_handleJoin","LEAVE","_handleLeave","UNSUB","_handleUnsub","SUB","_handleSub","messages","slice","_this18","PING","_pingResponse","lastSeq","lastOffset","lastGen","lastEpoch","_this19","isFunction","_nextMessageId","_isConnected","_ping","_flush","_this20","authChannels","batch","_ret2","events","currentSub","_setEvents","_isUnsubscribed","Subscription","EventEmitter","11","_STATE_NEW","centrifuge","_centrifuge","_error","_isResubscribe","_ready","_subscriptionPromise","_noResubscribe","_initializePromise","_promises","_promiseId","on","errContext","_resolve","_reject","toString","knownEvents","ev","successContext","_getSubscribeSuccessContext","_getSubscribeErrorContext","noResubscribe","needTrigger","streamPosition","subscribeErrorContext","_unsubscribe","subPromise","_isError","res","rej","_nextPromiseId","_methodCall","PRESENCE","PRESENCE_STATS","filter","since","limit","HISTORY","12","encodedCommands","encodedReplies","split","methodType","pushType","3","g","Function","eval","window","31","6","ProcessEmitWarning","warning","console","warn","init","$getMaxListeners","that","_maxListeners","defaultMaxListeners","_addListener","listener","prepend","existing","_eventsCount","newListener","unshift","warned","w","String","emitter","count","onceWrapper","args","fired","removeListener","wrapFn","ReflectApply","_onceWrap","state","wrapped","bind","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","listenerCount","arr","copy","Array","spliceOne","list","index","pop","ret","ReflectOwnKeys","R","Reflect","apply","receiver","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","concat","NumberIsNaN","Number","isNaN","set","arg","RangeError","setMaxListeners","getMaxListeners","doError","er","handler","len","listeners","addListener","prependListener","once","prependOnceListener","position","originalListener","shift","off","removeAllListeners","keys","rawListeners","eventNames","7","prefix","lastIndexOf","level","logger","step","pow","floor","a","b"],"mappings":"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","file":"centrifuge.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Centrifuge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Centrifuge\"] = factory();\n\telse\n\t\troot[\"Centrifuge\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Centrifuge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Centrifuge\"] = factory();\n\telse\n\t\troot[\"Centrifuge\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 31);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 10:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Centrifuge = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = __webpack_require__(6);\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _subscription = __webpack_require__(11);\n\nvar _subscription2 = _interopRequireDefault(_subscription);\n\nvar _json = __webpack_require__(12);\n\nvar _utils = __webpack_require__(7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _errorTimeout = 'timeout';\nvar _errorConnectionClosed = 'connection closed';\n\nvar Centrifuge = exports.Centrifuge = function (_EventEmitter) {\n  _inherits(Centrifuge, _EventEmitter);\n\n  function Centrifuge(url, options) {\n    _classCallCheck(this, Centrifuge);\n\n    var _this = _possibleConstructorReturn(this, (Centrifuge.__proto__ || Object.getPrototypeOf(Centrifuge)).call(this));\n\n    _this._url = url;\n    _this._websocket = null;\n    _this._sockjs = null;\n    _this._isSockjs = false;\n    _this._binary = false;\n    _this._methodType = null;\n    _this._pushType = null;\n    _this._encoder = null;\n    _this._decoder = null;\n    _this._status = 'disconnected';\n    _this._reconnect = true;\n    _this._reconnecting = false;\n    _this._transport = null;\n    _this._transportName = null;\n    _this._transportClosed = true;\n    _this._messageId = 0;\n    _this._clientID = null;\n    _this._refreshRequired = false;\n    _this._subs = {};\n    _this._serverSubs = {};\n    _this._lastSeq = {};\n    _this._lastGen = {};\n    _this._lastOffset = {};\n    _this._lastEpoch = {};\n    _this._messages = [];\n    _this._isBatching = false;\n    _this._isSubscribeBatching = false;\n    _this._privateChannels = {};\n    _this._numRefreshFailed = 0;\n    _this._refreshTimeout = null;\n    _this._pingTimeout = null;\n    _this._pongTimeout = null;\n    _this._subRefreshTimeouts = {};\n    _this._retries = 0;\n    _this._callbacks = {};\n    _this._latency = null;\n    _this._latencyStart = null;\n    _this._connectData = null;\n    _this._token = null;\n    _this._xhrID = 0;\n    _this._xhrs = {};\n    _this._dispatchPromise = Promise.resolve();\n    _this._config = {\n      debug: false,\n      websocket: null,\n      sockjs: null,\n      promise: null,\n      minRetry: 1000,\n      maxRetry: 20000,\n      timeout: 5000,\n      ping: true,\n      pingInterval: 25000,\n      pongWaitTimeout: 5000,\n      privateChannelPrefix: '$',\n      onTransportClose: null,\n      sockjsServer: null,\n      sockjsTransports: ['websocket', 'xdr-streaming', 'xhr-streaming', 'eventsource', 'iframe-eventsource', 'iframe-htmlfile', 'xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling'],\n      refreshEndpoint: '/centrifuge/refresh',\n      refreshHeaders: {},\n      refreshParams: {},\n      refreshData: {},\n      refreshAttempts: null,\n      refreshInterval: 1000,\n      onRefreshFailed: null,\n      onRefresh: null,\n      subscribeEndpoint: '/centrifuge/subscribe',\n      subscribeHeaders: {},\n      subscribeParams: {},\n      subRefreshInterval: 1000,\n      onPrivateSubscribe: null\n    };\n    _this._configure(options);\n    return _this;\n  }\n\n  _createClass(Centrifuge, [{\n    key: 'setToken',\n    value: function setToken(token) {\n      this._token = token;\n    }\n  }, {\n    key: 'setConnectData',\n    value: function setConnectData(data) {\n      this._connectData = data;\n    }\n  }, {\n    key: 'setRefreshHeaders',\n    value: function setRefreshHeaders(headers) {\n      this._config.refreshHeaders = headers;\n    }\n  }, {\n    key: 'setRefreshParams',\n    value: function setRefreshParams(params) {\n      this._config.refreshParams = params;\n    }\n  }, {\n    key: 'setRefreshData',\n    value: function setRefreshData(data) {\n      this._config.refreshData = data;\n    }\n  }, {\n    key: 'setSubscribeHeaders',\n    value: function setSubscribeHeaders(headers) {\n      this._config.subscribeHeaders = headers;\n    }\n  }, {\n    key: 'setSubscribeParams',\n    value: function setSubscribeParams(params) {\n      this._config.subscribeParams = params;\n    }\n  }, {\n    key: '_ajax',\n    value: function _ajax(url, params, headers, data, callback) {\n      var _this2 = this;\n\n      var query = '';\n      this._debug('sending AJAX request to', url, 'with data', JSON.stringify(data));\n\n      var xhr = global.XMLHttpRequest ? new global.XMLHttpRequest() : new global.ActiveXObject('Microsoft.XMLHTTP');\n\n      for (var i in params) {\n        if (params.hasOwnProperty(i)) {\n          if (query.length > 0) {\n            query += '&';\n          }\n          query += encodeURIComponent(i) + '=' + encodeURIComponent(params[i]);\n        }\n      }\n      if (query.length > 0) {\n        query = '?' + query;\n      }\n      xhr.open('POST', url + query, true);\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = true;\n      }\n\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n      xhr.setRequestHeader('Content-Type', 'application/json');\n      for (var headerName in headers) {\n        if (headers.hasOwnProperty(headerName)) {\n          xhr.setRequestHeader(headerName, headers[headerName]);\n        }\n      }\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var _data = void 0,\n                parsed = false;\n            try {\n              _data = JSON.parse(xhr.responseText);\n              parsed = true;\n            } catch (e) {\n              callback({\n                error: 'Invalid JSON. Data was: ' + xhr.responseText,\n                status: 200,\n                data: null\n              });\n            }\n            if (parsed) {\n              // prevents double execution.\n              callback({\n                data: _data,\n                status: 200\n              });\n            }\n          } else {\n            _this2._log('wrong status code in AJAX response', xhr.status);\n            callback({\n              status: xhr.status,\n              data: null\n            });\n          }\n        }\n      };\n      setTimeout(function () {\n        return xhr.send(JSON.stringify(data));\n      }, 20);\n      return xhr;\n    }\n  }, {\n    key: '_log',\n    value: function _log() {\n      (0, _utils.log)('info', arguments);\n    }\n  }, {\n    key: '_debug',\n    value: function _debug() {\n      if (this._config.debug === true) {\n        (0, _utils.log)('debug', arguments);\n      }\n    }\n  }, {\n    key: '_websocketSupported',\n    value: function _websocketSupported() {\n      if (this._config.websocket !== null) {\n        return true;\n      }\n      return !(typeof WebSocket !== 'function' && (typeof WebSocket === 'undefined' ? 'undefined' : _typeof(WebSocket)) !== 'object');\n    }\n  }, {\n    key: '_setFormat',\n    value: function _setFormat(format) {\n      if (this._formatOverride(format)) {\n        return;\n      }\n      if (format === 'protobuf') {\n        throw new Error('not implemented by JSON only Centrifuge client – use client with Protobuf');\n      }\n      this._binary = false;\n      this._methodType = _json.JsonMethodType;\n      this._pushType = _json.JsonPushType;\n      this._encoder = new _json.JsonEncoder();\n      this._decoder = new _json.JsonDecoder();\n    }\n  }, {\n    key: '_formatOverride',\n    value: function _formatOverride(format) {\n      return false;\n    }\n  }, {\n    key: '_configure',\n    value: function _configure(configuration) {\n      if (!('Promise' in global)) {\n        throw new Error('Promise polyfill required');\n      }\n\n      (0, _utils.extend)(this._config, configuration || {});\n      this._debug('centrifuge config', this._config);\n\n      if (!this._url) {\n        throw new Error('url required');\n      }\n\n      if ((0, _utils.startsWith)(this._url, 'ws') && this._url.indexOf('format=protobuf') > -1) {\n        this._setFormat('protobuf');\n      } else {\n        this._setFormat('json');\n      }\n\n      if ((0, _utils.startsWith)(this._url, 'http')) {\n        this._debug('client will try to connect to SockJS endpoint');\n        if (this._config.sockjs !== null) {\n          this._debug('SockJS explicitly provided in options');\n          this._sockjs = this._config.sockjs;\n        } else {\n          if (typeof global.SockJS === 'undefined') {\n            throw new Error('SockJS not found, use ws:// in url or include SockJS');\n          }\n          this._debug('use globally defined SockJS');\n          this._sockjs = global.SockJS;\n        }\n      } else {\n        this._debug('client will connect to websocket endpoint');\n      }\n    }\n  }, {\n    key: '_setStatus',\n    value: function _setStatus(newStatus) {\n      if (this._status !== newStatus) {\n        this._debug('Status', this._status, '->', newStatus);\n        this._status = newStatus;\n      }\n    }\n  }, {\n    key: '_isDisconnected',\n    value: function _isDisconnected() {\n      return this._status === 'disconnected';\n    }\n  }, {\n    key: '_isConnecting',\n    value: function _isConnecting() {\n      return this._status === 'connecting';\n    }\n  }, {\n    key: '_isConnected',\n    value: function _isConnected() {\n      return this._status === 'connected';\n    }\n  }, {\n    key: '_nextMessageId',\n    value: function _nextMessageId() {\n      return ++this._messageId;\n    }\n  }, {\n    key: '_resetRetry',\n    value: function _resetRetry() {\n      this._debug('reset retries count to 0');\n      this._retries = 0;\n    }\n  }, {\n    key: '_getRetryInterval',\n    value: function _getRetryInterval() {\n      var interval = (0, _utils.backoff)(this._retries, this._config.minRetry, this._config.maxRetry);\n\n      this._retries += 1;\n      return interval;\n    }\n  }, {\n    key: '_abortInflightXHRs',\n    value: function _abortInflightXHRs() {\n      for (var xhrID in this._xhrs) {\n        try {\n          this._xhrs[xhrID].abort();\n        } catch (e) {\n          this._debug('error aborting xhr', e);\n        }\n        delete this._xhrs[xhrID];\n      }\n    }\n  }, {\n    key: '_clearConnectedState',\n    value: function _clearConnectedState(reconnect) {\n      this._clientID = null;\n      this._stopPing();\n\n      // fire errbacks of registered outgoing calls.\n      for (var id in this._callbacks) {\n        if (this._callbacks.hasOwnProperty(id)) {\n          var callbacks = this._callbacks[id];\n          clearTimeout(callbacks.timeout);\n          var errback = callbacks.errback;\n          if (!errback) {\n            continue;\n          }\n          errback({ error: this._createErrorObject('disconnected') });\n        }\n      }\n      this._callbacks = {};\n\n      // fire unsubscribe events\n      for (var channel in this._subs) {\n        if (this._subs.hasOwnProperty(channel)) {\n          var sub = this._subs[channel];\n\n          if (reconnect) {\n            if (sub._isSuccess()) {\n              sub._triggerUnsubscribe();\n              sub._recover = true;\n            }\n            if (sub._shouldResubscribe()) {\n              sub._setSubscribing();\n            }\n          } else {\n            sub._setUnsubscribed();\n          }\n        }\n      }\n\n      this._abortInflightXHRs();\n\n      // clear refresh timer\n      if (this._refreshTimeout !== null) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n\n      // clear sub refresh timers\n      for (var _channel in this._subRefreshTimeouts) {\n        if (this._subRefreshTimeouts.hasOwnProperty(_channel) && this._subRefreshTimeouts[_channel]) {\n          this._clearSubRefreshTimeout(_channel);\n        }\n      }\n      this._subRefreshTimeouts = {};\n\n      if (!this._reconnect) {\n        // completely clear subscriptions\n        this._subs = {};\n      }\n    }\n  }, {\n    key: '_isTransportOpen',\n    value: function _isTransportOpen() {\n      if (this._isSockjs) {\n        return this._transport && this._transport.transport && this._transport.transport.readyState === this._transport.transport.OPEN;\n      }\n      return this._transport && this._transport.readyState === this._transport.OPEN;\n    }\n  }, {\n    key: '_transportSend',\n    value: function _transportSend(commands) {\n      if (!commands.length) {\n        return true;\n      }\n\n      if (!this._isTransportOpen()) {\n        // resolve pending commands with error if transport is not open\n        for (var command in commands) {\n          var id = command.id;\n          if (!(id in this._callbacks)) {\n            continue;\n          }\n          var callbacks = this._callbacks[id];\n          clearTimeout(this._callbacks[id].timeout);\n          delete this._callbacks[id];\n          var errback = callbacks.errback;\n          errback({ error: this._createErrorObject(_errorConnectionClosed, 0) });\n        }\n        return false;\n      }\n      this._transport.send(this._encoder.encodeCommands(commands));\n      return true;\n    }\n  }, {\n    key: '_setupTransport',\n    value: function _setupTransport() {\n      var _this3 = this;\n\n      this._isSockjs = false;\n\n      // detect transport to use - SockJS or Websocket\n      if (this._sockjs !== null) {\n        var sockjsOptions = {\n          transports: this._config.sockjsTransports\n        };\n\n        if (this._config.sockjsServer !== null) {\n          sockjsOptions.server = this._config.sockjsServer;\n        }\n        this._isSockjs = true;\n        this._transport = new this._sockjs(this._url, null, sockjsOptions);\n      } else {\n        if (!this._websocketSupported()) {\n          this._debug('No Websocket support and no SockJS configured, can not connect');\n          return;\n        }\n        if (this._config.websocket !== null) {\n          this._websocket = this._config.websocket;\n        } else {\n          this._websocket = WebSocket;\n        }\n        this._transport = new this._websocket(this._url);\n        if (this._binary === true) {\n          this._transport.binaryType = 'arraybuffer';\n        }\n      }\n\n      this._transport.onopen = function () {\n        _this3._transportClosed = false;\n\n        if (_this3._isSockjs) {\n          _this3._transportName = 'sockjs-' + _this3._transport.transport;\n          _this3._transport.onheartbeat = function () {\n            return _this3._restartPing();\n          };\n        } else {\n          _this3._transportName = 'websocket';\n        }\n\n        // Can omit method here due to zero value.\n        var msg = {\n          // method: this._methodType.CONNECT\n        };\n\n        if (_this3._token || _this3._connectData) {\n          msg.params = {};\n        }\n\n        if (_this3._token) {\n          msg.params.token = _this3._token;\n        }\n\n        if (_this3._connectData) {\n          msg.params.data = _this3._connectData;\n        }\n\n        var subs = {};\n        var hasSubs = false;\n        for (var channel in _this3._serverSubs) {\n          if (_this3._serverSubs.hasOwnProperty(channel) && _this3._serverSubs[channel].recoverable) {\n            hasSubs = true;\n            var sub = {\n              'recover': true\n            };\n            if (_this3._serverSubs[channel].seq || _this3._serverSubs[channel].gen) {\n              if (_this3._serverSubs[channel].seq) {\n                sub['seq'] = _this3._serverSubs[channel].seq;\n              }\n              if (_this3._serverSubs[channel].gen) {\n                sub['gen'] = _this3._serverSubs[channel].gen;\n              }\n            } else {\n              if (_this3._serverSubs[channel].offset) {\n                sub['offset'] = _this3._serverSubs[channel].offset;\n              }\n            }\n            if (_this3._serverSubs[channel].epoch) {\n              sub['epoch'] = _this3._serverSubs[channel].epoch;\n            }\n            subs[channel] = sub;\n          }\n        }\n        if (hasSubs) {\n          if (!msg.params) {\n            msg.params = {};\n          }\n          msg.params.subs = subs;\n        }\n\n        _this3._latencyStart = new Date();\n        _this3._call(msg).then(function (resolveCtx) {\n          _this3._connectResponse(_this3._decoder.decodeCommandResult(_this3._methodType.CONNECT, resolveCtx.result), hasSubs);\n          if (resolveCtx.next) {\n            resolveCtx.next();\n          }\n        }, function (rejectCtx) {\n          var err = rejectCtx.error;\n          if (err.code === 109) {\n            // token expired.\n            _this3._refreshRequired = true;\n          }\n          _this3._disconnect('connect error', true);\n          if (rejectCtx.next) {\n            rejectCtx.next();\n          }\n        });\n      };\n\n      this._transport.onerror = function (error) {\n        _this3._debug('transport level error', error);\n      };\n\n      this._transport.onclose = function (closeEvent) {\n        _this3._transportClosed = true;\n        var reason = _errorConnectionClosed;\n        var needReconnect = true;\n\n        if (closeEvent && 'reason' in closeEvent && closeEvent.reason) {\n          try {\n            var advice = JSON.parse(closeEvent.reason);\n            _this3._debug('reason is an advice object', advice);\n            reason = advice.reason;\n            needReconnect = advice.reconnect;\n          } catch (e) {\n            reason = closeEvent.reason;\n            _this3._debug('reason is a plain string', reason);\n          }\n        }\n\n        // onTransportClose callback should be executed every time transport was closed.\n        // This can be helpful to catch failed connection events (because our disconnect\n        // event only called once and every future attempts to connect do not fire disconnect\n        // event again).\n        if (_this3._config.onTransportClose !== null) {\n          _this3._config.onTransportClose({\n            event: closeEvent,\n            reason: reason,\n            reconnect: needReconnect\n          });\n        }\n\n        _this3._disconnect(reason, needReconnect);\n\n        if (_this3._reconnect === true) {\n          _this3._reconnecting = true;\n          var interval = _this3._getRetryInterval();\n\n          _this3._debug('reconnect after ' + interval + ' milliseconds');\n          setTimeout(function () {\n            if (_this3._reconnect === true) {\n              if (_this3._refreshRequired) {\n                _this3._refresh();\n              } else {\n                _this3._connect();\n              }\n            }\n          }, interval);\n        }\n      };\n\n      this._transport.onmessage = function (event) {\n        _this3._dataReceived(event.data);\n      };\n    }\n  }, {\n    key: 'rpc',\n    value: function rpc(data) {\n      return this._rpc('', data);\n    }\n  }, {\n    key: 'namedRPC',\n    value: function namedRPC(method, data) {\n      return this._rpc(method, data);\n    }\n  }, {\n    key: '_rpc',\n    value: function _rpc(method, data) {\n      var _this4 = this;\n\n      var params = {\n        data: data\n      };\n      if (method !== '') {\n        params.method = method;\n      };\n      var msg = {\n        method: this._methodType.RPC,\n        params: params\n      };\n\n      if (!this.isConnected()) {\n        return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n      }\n\n      return this._call(msg).then(function (resolveCtx) {\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n        return _this4._decoder.decodeCommandResult(_this4._methodType.RPC, resolveCtx.result);\n      }, function (rejectCtx) {\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n        return Promise.reject(rejectCtx.error);\n      });\n    }\n  }, {\n    key: 'send',\n    value: function send(data) {\n      var msg = {\n        method: this._methodType.SEND,\n        params: {\n          data: data\n        }\n      };\n\n      if (!this.isConnected()) {\n        return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n      }\n\n      var sent = this._transportSend([msg]); // can send async message to server without id set\n      if (!sent) {\n        return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n      };\n      return Promise.resolve({});\n    }\n  }, {\n    key: 'publish',\n    value: function publish(channel, data) {\n      var msg = {\n        method: this._methodType.PUBLISH,\n        params: {\n          channel: channel,\n          data: data\n        }\n      };\n\n      if (!this.isConnected()) {\n        return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n      }\n\n      return this._call(msg).then(function (result) {\n        if (result.next) {\n          result.next();\n        }\n        return {};\n      });\n    }\n  }, {\n    key: '_dataReceived',\n    value: function _dataReceived(data) {\n      var _this5 = this;\n\n      var replies = this._decoder.decodeReplies(data);\n      // we have to guarantee order of events in replies processing - i.e. start processing\n      // next reply only when we finished processing of current one. Without syncing things in\n      // this way we could get wrong publication events order as reply promises resolve\n      // on next loop tick so for loop continues before we finished emitting all reply events.\n      this._dispatchPromise = this._dispatchPromise.then(function () {\n        var finishDispatch = void 0;\n        _this5._dispatchPromise = new Promise(function (resolve) {\n          finishDispatch = resolve;\n        });\n        _this5._dispatchSynchronized(replies, finishDispatch);\n      });\n      this._restartPing();\n    }\n  }, {\n    key: '_dispatchSynchronized',\n    value: function _dispatchSynchronized(replies, finishDispatch) {\n      var _this6 = this;\n\n      var p = Promise.resolve();\n\n      var _loop = function _loop(i) {\n        if (replies.hasOwnProperty(i)) {\n          p = p.then(function () {\n            return _this6._dispatchReply(replies[i]);\n          });\n        }\n      };\n\n      for (var i in replies) {\n        _loop(i);\n      }\n      p = p.then(function () {\n        finishDispatch();\n      });\n    }\n  }, {\n    key: '_dispatchReply',\n    value: function _dispatchReply(reply) {\n      var next;\n      var p = new Promise(function (resolve) {\n        next = resolve;\n      });\n\n      if (reply === undefined || reply === null) {\n        this._debug('dispatch: got undefined or null reply');\n        next();\n        return p;\n      }\n\n      var id = reply.id;\n\n      if (id && id > 0) {\n        this._handleReply(reply, next);\n      } else {\n        this._handlePush(reply.result, next);\n      }\n\n      return p;\n    }\n  }, {\n    key: '_call',\n    value: function _call(msg) {\n      var _this7 = this;\n\n      return new Promise(function (resolve, reject) {\n        var id = _this7._addMessage(msg);\n        _this7._registerCall(id, resolve, reject);\n      });\n    }\n  }, {\n    key: '_connect',\n    value: function _connect() {\n      if (this.isConnected()) {\n        this._debug('connect called when already connected');\n        return;\n      }\n      if (this._status === 'connecting') {\n        return;\n      }\n\n      this._debug('start connecting');\n      this._setStatus('connecting');\n      this._clientID = null;\n      this._reconnect = true;\n      this._setupTransport();\n    }\n  }, {\n    key: '_disconnect',\n    value: function _disconnect(reason, shouldReconnect) {\n\n      var reconnect = shouldReconnect || false;\n      if (reconnect === false) {\n        this._reconnect = false;\n      }\n\n      if (this._isDisconnected()) {\n        if (!reconnect) {\n          this._clearConnectedState(reconnect);\n        }\n        return;\n      }\n\n      this._clearConnectedState(reconnect);\n\n      this._debug('disconnected:', reason, shouldReconnect);\n      this._setStatus('disconnected');\n\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n      if (this._reconnecting === false) {\n        // fire unsubscribe events for server side subs.\n        for (var channel in this._serverSubs) {\n          if (this._serverSubs.hasOwnProperty(channel)) {\n            this.emit('unsubscribe', { channel: channel });\n          }\n        }\n        this.emit('disconnect', {\n          reason: reason,\n          reconnect: reconnect\n        });\n      }\n\n      if (reconnect === false) {\n        this._subs = {};\n        this._serverSubs = {};\n      }\n\n      if (!this._transportClosed) {\n        this._transport.close();\n      }\n    }\n  }, {\n    key: '_refreshFailed',\n    value: function _refreshFailed() {\n      this._numRefreshFailed = 0;\n      if (!this._isDisconnected()) {\n        this._disconnect('refresh failed', false);\n      }\n      if (this._config.onRefreshFailed !== null) {\n        this._config.onRefreshFailed();\n      }\n    }\n  }, {\n    key: '_refresh',\n    value: function _refresh() {\n      var _this8 = this;\n\n      // ask application for new connection token.\n      this._debug('refresh token');\n\n      if (this._config.refreshAttempts === 0) {\n        this._debug('refresh attempts set to 0, do not send refresh request at all');\n        this._refreshFailed();\n        return;\n      }\n\n      if (this._refreshTimeout !== null) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n\n      var clientID = this._clientID;\n      var xhrID = this._newXHRID();\n\n      var cb = function cb(resp) {\n        if (xhrID in _this8._xhrs) {\n          delete _this8._xhrs[xhrID];\n        }\n        if (_this8._clientID !== clientID) {\n          return;\n        }\n        if (resp.error || resp.status !== 200) {\n          // We don't perform any connection status related actions here as we are\n          // relying on server that must close connection eventually.\n          if (resp.error) {\n            _this8._debug('error refreshing connection token', resp.error);\n          } else {\n            _this8._debug('error refreshing connection token: wrong status code', resp.status);\n          }\n          _this8._numRefreshFailed++;\n          if (_this8._refreshTimeout !== null) {\n            clearTimeout(_this8._refreshTimeout);\n            _this8._refreshTimeout = null;\n          }\n          if (_this8._config.refreshAttempts !== null && _this8._numRefreshFailed >= _this8._config.refreshAttempts) {\n            _this8._refreshFailed();\n            return;\n          }\n          var jitter = Math.round(Math.random() * 1000 * Math.max(_this8._numRefreshFailed, 20));\n          var interval = _this8._config.refreshInterval + jitter;\n          _this8._refreshTimeout = setTimeout(function () {\n            return _this8._refresh();\n          }, interval);\n          return;\n        }\n        _this8._numRefreshFailed = 0;\n        _this8._token = resp.data.token;\n        if (!_this8._token) {\n          _this8._refreshFailed();\n          return;\n        }\n        if (_this8._isDisconnected() && _this8._reconnect) {\n          _this8._debug('token refreshed, connect from scratch');\n          _this8._connect();\n        } else {\n          _this8._debug('send refreshed token');\n          var msg = {\n            method: _this8._methodType.REFRESH,\n            params: {\n              token: _this8._token\n            }\n          };\n          _this8._call(msg).then(function (resolveCtx) {\n            _this8._refreshResponse(_this8._decoder.decodeCommandResult(_this8._methodType.REFRESH, resolveCtx.result));\n            if (resolveCtx.next) {\n              resolveCtx.next();\n            }\n          }, function (rejectCtx) {\n            _this8._refreshError(rejectCtx.error);\n            if (rejectCtx.next) {\n              rejectCtx.next();\n            }\n          });\n        }\n      };\n\n      if (this._config.onRefresh !== null) {\n        var context = {};\n        this._config.onRefresh(context, cb);\n      } else {\n        var xhr = this._ajax(this._config.refreshEndpoint, this._config.refreshParams, this._config.refreshHeaders, this._config.refreshData, cb);\n        this._xhrs[xhrID] = xhr;\n      }\n    }\n  }, {\n    key: '_refreshError',\n    value: function _refreshError(err) {\n      var _this9 = this;\n\n      this._debug('refresh error', err);\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n      var interval = this._config.refreshInterval + Math.round(Math.random() * 1000);\n      this._refreshTimeout = setTimeout(function () {\n        return _this9._refresh();\n      }, interval);\n    }\n  }, {\n    key: '_refreshResponse',\n    value: function _refreshResponse(result) {\n      var _this10 = this;\n\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n        this._refreshTimeout = null;\n      }\n      if (result.expires) {\n        this._clientID = result.client;\n        this._refreshTimeout = setTimeout(function () {\n          return _this10._refresh();\n        }, this._getTTLMilliseconds(result.ttl));\n      }\n    }\n  }, {\n    key: '_newXHRID',\n    value: function _newXHRID() {\n      this._xhrID++;\n      return this._xhrID;\n    }\n  }, {\n    key: '_subRefresh',\n    value: function _subRefresh(channel) {\n      var _this11 = this;\n\n      this._debug('refresh subscription token for channel', channel);\n\n      if (this._subRefreshTimeouts[channel] !== undefined) {\n        this._clearSubRefreshTimeout(channel);\n      } else {\n        return;\n      }\n\n      var clientID = this._clientID;\n      var xhrID = this._newXHRID();\n\n      var cb = function cb(resp) {\n        if (xhrID in _this11._xhrs) {\n          delete _this11._xhrs[xhrID];\n        }\n        if (resp.error || resp.status !== 200 || _this11._clientID !== clientID) {\n          return;\n        }\n        var channelsData = {};\n        if (resp.data.channels) {\n          for (var i in resp.data.channels) {\n            var channelData = resp.data.channels[i];\n            if (!channelData.channel) {\n              continue;\n            }\n            channelsData[channelData.channel] = channelData.token;\n          }\n        }\n\n        var token = channelsData[channel];\n        if (!token) {\n          return;\n        }\n        var msg = {\n          method: _this11._methodType.SUB_REFRESH,\n          params: {\n            channel: channel,\n            token: token\n          }\n        };\n\n        var sub = _this11._getSub(channel);\n        if (sub === null) {\n          return;\n        }\n\n        _this11._call(msg).then(function (resolveCtx) {\n          _this11._subRefreshResponse(channel, _this11._decoder.decodeCommandResult(_this11._methodType.SUB_REFRESH, resolveCtx.result));\n          if (resolveCtx.next) {\n            resolveCtx.next();\n          }\n        }, function (rejectCtx) {\n          _this11._subRefreshError(channel, rejectCtx.error);\n          if (rejectCtx.next) {\n            rejectCtx.next();\n          }\n        });\n      };\n\n      var data = {\n        client: this._clientID,\n        channels: [channel]\n      };\n\n      if (this._config.onPrivateSubscribe !== null) {\n        this._config.onPrivateSubscribe({\n          data: data\n        }, cb);\n      } else {\n        var xhr = this._ajax(this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n        this._xhrs[xhrID] = xhr;\n      }\n    }\n  }, {\n    key: '_clearSubRefreshTimeout',\n    value: function _clearSubRefreshTimeout(channel) {\n      if (this._subRefreshTimeouts[channel] !== undefined) {\n        clearTimeout(this._subRefreshTimeouts[channel]);\n        delete this._subRefreshTimeouts[channel];\n      }\n    }\n  }, {\n    key: '_subRefreshError',\n    value: function _subRefreshError(channel, err) {\n      var _this12 = this;\n\n      this._debug('subscription refresh error', channel, err);\n      this._clearSubRefreshTimeout(channel);\n      var sub = this._getSub(channel);\n      if (sub === null) {\n        return;\n      }\n      var jitter = Math.round(Math.random() * 1000);\n      var subRefreshTimeout = setTimeout(function () {\n        return _this12._subRefresh(channel);\n      }, this._config.subRefreshInterval + jitter);\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n      return;\n    }\n  }, {\n    key: '_subRefreshResponse',\n    value: function _subRefreshResponse(channel, result) {\n      var _this13 = this;\n\n      this._debug('subscription refresh success', channel);\n      this._clearSubRefreshTimeout(channel);\n      var sub = this._getSub(channel);\n      if (sub === null) {\n        return;\n      }\n      if (result.expires === true) {\n        var subRefreshTimeout = setTimeout(function () {\n          return _this13._subRefresh(channel);\n        }, this._getTTLMilliseconds(result.ttl));\n        this._subRefreshTimeouts[channel] = subRefreshTimeout;\n      }\n      return;\n    }\n  }, {\n    key: '_subscribe',\n    value: function _subscribe(sub, isResubscribe) {\n      var _this14 = this;\n\n      this._debug('subscribing on', sub.channel);\n      var channel = sub.channel;\n\n      if (!(channel in this._subs)) {\n        this._subs[channel] = sub;\n      }\n\n      if (!this.isConnected()) {\n        // subscribe will be called later\n        sub._setNew();\n        return;\n      }\n\n      sub._setSubscribing(isResubscribe);\n\n      var msg = {\n        method: this._methodType.SUBSCRIBE,\n        params: {\n          channel: channel\n        }\n      };\n\n      // If channel name does not start with privateChannelPrefix - then we\n      // can just send subscription message to Centrifuge. If channel name\n      // starts with privateChannelPrefix - then this is a private channel\n      // and we should ask web application backend for permission first.\n      if ((0, _utils.startsWith)(channel, this._config.privateChannelPrefix)) {\n        // private channel.\n        if (this._isSubscribeBatching) {\n          this._privateChannels[channel] = true;\n        } else {\n          this.startSubscribeBatching();\n          this._subscribe(sub);\n          this.stopSubscribeBatching();\n        }\n      } else {\n        var recover = sub._needRecover();\n\n        if (recover === true) {\n          msg.params.recover = true;\n          var seq = this._getLastSeq(channel);\n          var gen = this._getLastGen(channel);\n          if (seq || gen) {\n            if (seq) {\n              msg.params.seq = seq;\n            }\n            if (gen) {\n              msg.params.gen = gen;\n            }\n          } else {\n            var offset = this._getLastOffset(channel);\n            if (offset) {\n              msg.params.offset = offset;\n            }\n          }\n          var epoch = this._getLastEpoch(channel);\n          if (epoch) {\n            msg.params.epoch = epoch;\n          }\n        }\n\n        this._call(msg).then(function (resolveCtx) {\n          _this14._subscribeResponse(channel, recover, _this14._decoder.decodeCommandResult(_this14._methodType.SUBSCRIBE, resolveCtx.result));\n          if (resolveCtx.next) {\n            resolveCtx.next();\n          }\n        }, function (rejectCtx) {\n          _this14._subscribeError(channel, rejectCtx.error);\n          if (rejectCtx.next) {\n            rejectCtx.next();\n          }\n        });\n      }\n    }\n  }, {\n    key: '_unsubscribe',\n    value: function _unsubscribe(sub) {\n      delete this._subs[sub.channel];\n      delete this._lastOffset[sub.channel];\n      delete this._lastSeq[sub.channel];\n      delete this._lastGen[sub.channel];\n      if (this.isConnected()) {\n        // No need to unsubscribe in disconnected state - i.e. client already unsubscribed.\n        this._addMessage({\n          method: this._methodType.UNSUBSCRIBE,\n          params: {\n            channel: sub.channel\n          }\n        });\n      }\n    }\n  }, {\n    key: '_getTTLMilliseconds',\n    value: function _getTTLMilliseconds(ttl) {\n      // https://stackoverflow.com/questions/12633405/what-is-the-maximum-delay-for-setinterval\n      return Math.min(ttl * 1000, 2147483647);\n    }\n  }, {\n    key: 'getSub',\n    value: function getSub(channel) {\n      return this._getSub(channel);\n    }\n  }, {\n    key: '_getSub',\n    value: function _getSub(channel) {\n      var sub = this._subs[channel];\n      if (!sub) {\n        return null;\n      }\n      return sub;\n    }\n  }, {\n    key: '_isServerSub',\n    value: function _isServerSub(channel) {\n      return this._serverSubs[channel] !== undefined;\n    }\n  }, {\n    key: '_connectResponse',\n    value: function _connectResponse(result, isRecover) {\n      var _this15 = this;\n\n      var wasReconnecting = this._reconnecting;\n      this._reconnecting = false;\n      this._resetRetry();\n      this._refreshRequired = false;\n\n      if (this.isConnected()) {\n        return;\n      }\n\n      if (this._latencyStart !== null) {\n        this._latency = new Date().getTime() - this._latencyStart.getTime();\n        this._latencyStart = null;\n      }\n\n      this._clientID = result.client;\n      this._setStatus('connected');\n\n      if (this._refreshTimeout) {\n        clearTimeout(this._refreshTimeout);\n      }\n\n      if (result.expires) {\n        this._refreshTimeout = setTimeout(function () {\n          return _this15._refresh();\n        }, this._getTTLMilliseconds(result.ttl));\n      }\n\n      this.startBatching();\n      this.startSubscribeBatching();\n      for (var channel in this._subs) {\n        if (this._subs.hasOwnProperty(channel)) {\n          var sub = this._subs[channel];\n          if (sub._shouldResubscribe()) {\n            this._subscribe(sub, wasReconnecting);\n          }\n        }\n      }\n      this.stopSubscribeBatching();\n      this.stopBatching();\n\n      this._startPing();\n\n      var ctx = {\n        client: result.client,\n        transport: this._transportName,\n        latency: this._latency\n      };\n      if (result.data) {\n        ctx.data = result.data;\n      }\n\n      this.emit('connect', ctx);\n\n      if (result.subs) {\n        this._processServerSubs(result.subs, isRecover);\n      }\n    }\n  }, {\n    key: '_processServerSubs',\n    value: function _processServerSubs(subs, isRecover) {\n      for (var channel in subs) {\n        if (subs.hasOwnProperty(channel)) {\n          var sub = subs[channel];\n          var recovered = sub.recovered === true;\n          var subCtx = { channel: channel, isResubscribe: isRecover, recovered: recovered };\n          this.emit('subscribe', subCtx);\n        }\n      }\n      for (var _channel2 in subs) {\n        if (subs.hasOwnProperty(_channel2)) {\n          var _sub = subs[_channel2];\n          if (_sub.recovered) {\n            var pubs = _sub.publications;\n            if (pubs && pubs.length > 0) {\n\n              // handle legacy order.\n              // TODO: remove as soon as Centrifuge v1 released.\n              if (pubs.length > 1 && (!pubs[0].offset || pubs[0].offset > pubs[1].offset)) {\n                pubs = pubs.reverse();\n              }\n\n              for (var i in pubs) {\n                if (pubs.hasOwnProperty(i)) {\n                  this._handlePublication(_channel2, pubs[i]);\n                }\n              }\n            }\n          }\n          this._serverSubs[_channel2] = {\n            'seq': _sub.seq,\n            'gen': _sub.gen,\n            'offset': _sub.offset,\n            'epoch': _sub.epoch,\n            'recoverable': _sub.recoverable\n          };\n        }\n      }\n    }\n  }, {\n    key: '_stopPing',\n    value: function _stopPing() {\n      if (this._pongTimeout !== null) {\n        clearTimeout(this._pongTimeout);\n        this._pongTimeout = null;\n      }\n      if (this._pingTimeout !== null) {\n        clearTimeout(this._pingTimeout);\n        this._pingTimeout = null;\n      }\n    }\n  }, {\n    key: '_startPing',\n    value: function _startPing() {\n      var _this16 = this;\n\n      if (this._config.ping !== true || this._config.pingInterval <= 0) {\n        return;\n      }\n      if (!this.isConnected()) {\n        return;\n      }\n\n      this._pingTimeout = setTimeout(function () {\n        if (!_this16.isConnected()) {\n          _this16._stopPing();\n          return;\n        }\n        _this16.ping();\n        _this16._pongTimeout = setTimeout(function () {\n          _this16._disconnect('no ping', true);\n        }, _this16._config.pongWaitTimeout);\n      }, this._config.pingInterval);\n    }\n  }, {\n    key: '_restartPing',\n    value: function _restartPing() {\n      this._stopPing();\n      this._startPing();\n    }\n  }, {\n    key: '_subscribeError',\n    value: function _subscribeError(channel, error) {\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      if (!sub._isSubscribing()) {\n        return;\n      }\n      if (error.code === 0 && error.message === _errorTimeout) {\n        // client side timeout.\n        this._disconnect('timeout', true);\n        return;\n      }\n      sub._setSubscribeError(error);\n    }\n  }, {\n    key: '_subscribeResponse',\n    value: function _subscribeResponse(channel, isRecover, result) {\n      var _this17 = this;\n\n      var sub = this._getSub(channel);\n      if (!sub) {\n        return;\n      }\n      if (!sub._isSubscribing()) {\n        return;\n      }\n\n      var recovered = false;\n      if ('recovered' in result) {\n        recovered = result.recovered;\n      }\n      var positioned = false;\n      if ('positioned' in result) {\n        positioned = result.positioned;\n      }\n      var epoch = '';\n      if ('epoch' in result) {\n        epoch = result.epoch;\n      }\n      var offset = 0;\n      if ('offset' in result) {\n        offset = result.offset;\n      }\n      sub._setSubscribeSuccess(recovered, positioned, offset, epoch);\n\n      var pubs = result.publications;\n      if (pubs && pubs.length > 0) {\n        if (pubs.length >= 2 && !pubs[0].offset && !pubs[1].offset) {\n          // handle legacy order.\n          pubs = pubs.reverse();\n        }\n        for (var i in pubs) {\n          if (pubs.hasOwnProperty(i)) {\n            this._handlePublication(channel, pubs[i]);\n          }\n        }\n      }\n\n      if (result.recoverable && (!isRecover || !recovered)) {\n        this._lastSeq[channel] = result.seq || 0;\n        this._lastGen[channel] = result.gen || 0;\n        this._lastOffset[channel] = result.offset || 0;\n      }\n\n      this._lastEpoch[channel] = result.epoch || '';\n\n      if (result.recoverable) {\n        sub._recoverable = true;\n      }\n\n      if (result.expires === true) {\n        var subRefreshTimeout = setTimeout(function () {\n          return _this17._subRefresh(channel);\n        }, this._getTTLMilliseconds(result.ttl));\n        this._subRefreshTimeouts[channel] = subRefreshTimeout;\n      }\n    }\n  }, {\n    key: '_handleReply',\n    value: function _handleReply(reply, next) {\n      var id = reply.id;\n      var result = reply.result;\n\n      if (!(id in this._callbacks)) {\n        next();\n        return;\n      }\n      var callbacks = this._callbacks[id];\n      clearTimeout(this._callbacks[id].timeout);\n      delete this._callbacks[id];\n\n      if (!(0, _utils.errorExists)(reply)) {\n        var callback = callbacks.callback;\n        if (!callback) {\n          return;\n        }\n        callback({ result: result, next: next });\n      } else {\n        var errback = callbacks.errback;\n        if (!errback) {\n          next();\n          return;\n        }\n        var error = reply.error;\n        errback({ error: error, next: next });\n      }\n    }\n  }, {\n    key: '_handleJoin',\n    value: function _handleJoin(channel, join) {\n      var ctx = { 'info': join.info };\n      var sub = this._getSub(channel);\n      if (!sub) {\n        if (this._isServerSub(channel)) {\n          ctx.channel = channel;\n          this.emit('join', ctx);\n        }\n        return;\n      }\n      sub.emit('join', ctx);\n    }\n  }, {\n    key: '_handleLeave',\n    value: function _handleLeave(channel, leave) {\n      var ctx = { 'info': leave.info };\n      var sub = this._getSub(channel);\n      if (!sub) {\n        if (this._isServerSub(channel)) {\n          ctx.channel = channel;\n          this.emit('leave', ctx);\n        }\n        return;\n      }\n      sub.emit('leave', ctx);\n    }\n  }, {\n    key: '_handleUnsub',\n    value: function _handleUnsub(channel, unsub) {\n      var ctx = {};\n      var sub = this._getSub(channel);\n      if (!sub) {\n        if (this._isServerSub(channel)) {\n          delete this._serverSubs[channel];\n          ctx.channel = channel;\n          this.emit('unsubscribe', ctx);\n        }\n        return;\n      }\n      sub.unsubscribe();\n      if (unsub.resubscribe === true) {\n        sub.subscribe();\n      }\n    }\n  }, {\n    key: '_handleSub',\n    value: function _handleSub(channel, sub) {\n      this._serverSubs[channel] = {\n        'seq': sub.seq,\n        'gen': sub.gen,\n        'offset': sub.offset,\n        'epoch': sub.epoch,\n        'recoverable': sub.recoverable\n      };\n      var ctx = { 'channel': channel, isResubscribe: false, recovered: false };\n      this.emit('subscribe', ctx);\n    }\n  }, {\n    key: '_handlePublication',\n    value: function _handlePublication(channel, pub) {\n      var sub = this._getSub(channel);\n      var ctx = {\n        'data': pub.data,\n        'seq': pub.seq,\n        'gen': pub.gen,\n        'offset': pub.offset\n      };\n      if (pub.info) {\n        ctx.info = pub.info;\n      }\n      if (!sub) {\n        if (this._isServerSub(channel)) {\n          if (pub.seq !== undefined) {\n            this._serverSubs[channel].seq = pub.seq;\n          }\n          if (pub.gen !== undefined) {\n            this._serverSubs[channel].gen = pub.gen;\n          }\n          if (pub.offset !== undefined) {\n            this._serverSubs[channel].offset = pub.offset;\n          }\n          ctx.channel = channel;\n          this.emit('publish', ctx);\n        }\n        return;\n      }\n      if (pub.seq !== undefined) {\n        this._lastSeq[channel] = pub.seq;\n      }\n      if (pub.gen !== undefined) {\n        this._lastGen[channel] = pub.gen;\n      }\n      if (pub.offset !== undefined) {\n        this._lastOffset[channel] = pub.offset;\n      }\n      sub.emit('publish', ctx);\n    }\n  }, {\n    key: '_handleMessage',\n    value: function _handleMessage(message) {\n      this.emit('message', message.data);\n    }\n  }, {\n    key: '_handlePush',\n    value: function _handlePush(data, next) {\n      var push = this._decoder.decodePush(data);\n      var type = 0;\n      if ('type' in push) {\n        type = push['type'];\n      }\n      var channel = push.channel;\n\n      if (type === this._pushType.PUBLICATION) {\n        var pub = this._decoder.decodePushData(this._pushType.PUBLICATION, push.data);\n        this._handlePublication(channel, pub);\n      } else if (type === this._pushType.MESSAGE) {\n        var message = this._decoder.decodePushData(this._pushType.MESSAGE, push.data);\n        this._handleMessage(message);\n      } else if (type === this._pushType.JOIN) {\n        var join = this._decoder.decodePushData(this._pushType.JOIN, push.data);\n        this._handleJoin(channel, join);\n      } else if (type === this._pushType.LEAVE) {\n        var leave = this._decoder.decodePushData(this._pushType.LEAVE, push.data);\n        this._handleLeave(channel, leave);\n      } else if (type === this._pushType.UNSUB) {\n        var unsub = this._decoder.decodePushData(this._pushType.UNSUB, push.data);\n        this._handleUnsub(channel, unsub);\n      } else if (type === this._pushType.SUB) {\n        var sub = this._decoder.decodePushData(this._pushType.SUB, push.data);\n        this._handleSub(channel, sub);\n      }\n      next();\n    }\n  }, {\n    key: '_flush',\n    value: function _flush() {\n      var messages = this._messages.slice(0);\n      this._messages = [];\n      this._transportSend(messages);\n    }\n  }, {\n    key: '_ping',\n    value: function _ping() {\n      var _this18 = this;\n\n      var msg = {\n        method: this._methodType.PING\n      };\n      this._call(msg).then(function (resolveCtx) {\n        _this18._pingResponse(_this18._decoder.decodeCommandResult(_this18._methodType.PING, resolveCtx.result));\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, function (rejectCtx) {\n        _this18._debug('ping error', rejectCtx.error);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    }\n  }, {\n    key: '_pingResponse',\n    value: function _pingResponse(result) {\n      if (!this.isConnected()) {\n        return;\n      }\n      this._stopPing();\n      this._startPing();\n    }\n  }, {\n    key: '_getLastSeq',\n    value: function _getLastSeq(channel) {\n      var lastSeq = this._lastSeq[channel];\n      if (lastSeq) {\n        return lastSeq;\n      }\n      return 0;\n    }\n  }, {\n    key: '_getLastOffset',\n    value: function _getLastOffset(channel) {\n      var lastOffset = this._lastOffset[channel];\n      if (lastOffset) {\n        return lastOffset;\n      }\n      return 0;\n    }\n  }, {\n    key: '_getLastGen',\n    value: function _getLastGen(channel) {\n      var lastGen = this._lastGen[channel];\n      if (lastGen) {\n        return lastGen;\n      }\n      return 0;\n    }\n  }, {\n    key: '_getLastEpoch',\n    value: function _getLastEpoch(channel) {\n      var lastEpoch = this._lastEpoch[channel];\n      if (lastEpoch) {\n        return lastEpoch;\n      }\n      return '';\n    }\n  }, {\n    key: '_createErrorObject',\n    value: function _createErrorObject(message, code) {\n      var errObject = {\n        message: message,\n        code: code || 0\n      };\n\n      return errObject;\n    }\n  }, {\n    key: '_registerCall',\n    value: function _registerCall(id, callback, errback) {\n      var _this19 = this;\n\n      this._callbacks[id] = {\n        callback: callback,\n        errback: errback,\n        timeout: null\n      };\n      this._callbacks[id].timeout = setTimeout(function () {\n        delete _this19._callbacks[id];\n        if ((0, _utils.isFunction)(errback)) {\n          errback({ error: _this19._createErrorObject(_errorTimeout) });\n        }\n      }, this._config.timeout);\n    }\n  }, {\n    key: '_addMessage',\n    value: function _addMessage(message) {\n      var id = this._nextMessageId();\n      message.id = id;\n      if (this._isBatching === true) {\n        this._messages.push(message);\n      } else {\n        this._transportSend([message]);\n      }\n      return id;\n    }\n  }, {\n    key: 'isConnected',\n    value: function isConnected() {\n      return this._isConnected();\n    }\n  }, {\n    key: 'connect',\n    value: function connect() {\n      this._connect();\n    }\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {\n      this._disconnect('client', false);\n    }\n  }, {\n    key: 'ping',\n    value: function ping() {\n      return this._ping();\n    }\n  }, {\n    key: 'startBatching',\n    value: function startBatching() {\n      // start collecting messages without sending them to Centrifuge until flush\n      // method called\n      this._isBatching = true;\n    }\n  }, {\n    key: 'stopBatching',\n    value: function stopBatching() {\n      this._isBatching = false;\n      this._flush();\n    }\n  }, {\n    key: 'startSubscribeBatching',\n    value: function startSubscribeBatching() {\n      // start collecting private channels to create bulk authentication\n      // request to subscribeEndpoint when stopSubscribeBatching will be called\n      this._isSubscribeBatching = true;\n    }\n  }, {\n    key: 'stopSubscribeBatching',\n    value: function stopSubscribeBatching() {\n      var _this20 = this;\n\n      // create request to subscribeEndpoint with collected private channels\n      // to ask if this client can subscribe on each channel\n      this._isSubscribeBatching = false;\n      var authChannels = this._privateChannels;\n      this._privateChannels = {};\n\n      var channels = [];\n\n      for (var channel in authChannels) {\n        if (authChannels.hasOwnProperty(channel)) {\n          var sub = this._getSub(channel);\n          if (!sub) {\n            continue;\n          }\n          channels.push(channel);\n        }\n      }\n\n      if (channels.length === 0) {\n        this._debug('no private channels found, no need to make request');\n        return;\n      }\n\n      var data = {\n        client: this._clientID,\n        channels: channels\n      };\n\n      var clientID = this._clientID;\n      var xhrID = this._newXHRID();\n\n      var cb = function cb(resp) {\n        if (xhrID in _this20._xhrs) {\n          delete _this20._xhrs[xhrID];\n        }\n        if (_this20._clientID !== clientID) {\n          return;\n        }\n        if (resp.error || resp.status !== 200) {\n          _this20._debug('authorization request failed');\n          for (var i in channels) {\n            if (channels.hasOwnProperty(i)) {\n              var _channel3 = channels[i];\n              _this20._subscribeError(_channel3, _this20._createErrorObject('authorization request failed'));\n            }\n          }\n          return;\n        }\n\n        var channelsData = {};\n        if (resp.data.channels) {\n          for (var _i in resp.data.channels) {\n            var channelData = resp.data.channels[_i];\n            if (!channelData.channel) {\n              continue;\n            }\n            channelsData[channelData.channel] = channelData.token;\n          }\n        }\n\n        // try to send all subscriptions in one request.\n        var batch = false;\n\n        if (!_this20._isBatching) {\n          _this20.startBatching();\n          batch = true;\n        }\n\n        for (var _i2 in channels) {\n          if (channels.hasOwnProperty(_i2)) {\n            var _ret2 = function () {\n              var channel = channels[_i2];\n              var token = channelsData[channel];\n\n              if (!token) {\n                // subscription:error\n                _this20._subscribeError(channel, _this20._createErrorObject('permission denied', 103));\n                return 'continue';\n              } else {\n                var msg = {\n                  method: _this20._methodType.SUBSCRIBE,\n                  params: {\n                    channel: channel,\n                    token: token\n                  }\n                };\n\n                var _sub2 = _this20._getSub(channel);\n                if (_sub2 === null) {\n                  return 'continue';\n                }\n\n                var recover = _sub2._needRecover();\n\n                if (recover === true) {\n                  msg.params.recover = true;\n                  var seq = _this20._getLastSeq(channel);\n                  var gen = _this20._getLastGen(channel);\n                  if (seq || gen) {\n                    if (seq) {\n                      msg.params.seq = seq;\n                    }\n                    if (gen) {\n                      msg.params.gen = gen;\n                    }\n                  } else {\n                    var offset = _this20._getLastOffset(channel);\n                    if (offset) {\n                      msg.params.offset = offset;\n                    }\n                  }\n                  var epoch = _this20._getLastEpoch(channel);\n                  if (epoch) {\n                    msg.params.epoch = epoch;\n                  }\n                }\n                _this20._call(msg).then(function (resolveCtx) {\n                  _this20._subscribeResponse(channel, recover, _this20._decoder.decodeCommandResult(_this20._methodType.SUBSCRIBE, resolveCtx.result));\n                  if (resolveCtx.next) {\n                    resolveCtx.next();\n                  }\n                }, function (rejectCtx) {\n                  _this20._subscribeError(channel, rejectCtx.error);\n                  if (rejectCtx.next) {\n                    rejectCtx.next();\n                  }\n                });\n              }\n            }();\n\n            if (_ret2 === 'continue') continue;\n          }\n        }\n\n        if (batch) {\n          _this20.stopBatching();\n        }\n      };\n\n      if (this._config.onPrivateSubscribe !== null) {\n        this._config.onPrivateSubscribe({\n          data: data\n        }, cb);\n      } else {\n        var xhr = this._ajax(this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n        this._xhrs[xhrID] = xhr;\n      }\n    }\n  }, {\n    key: 'subscribe',\n    value: function subscribe(channel, events) {\n      var currentSub = this._getSub(channel);\n      if (currentSub !== null) {\n        currentSub._setEvents(events);\n        if (currentSub._isUnsubscribed()) {\n          currentSub.subscribe();\n        }\n        return currentSub;\n      }\n      var sub = new _subscription2.default(this, channel, events);\n      this._subs[channel] = sub;\n      sub.subscribe();\n      return sub;\n    }\n  }]);\n\n  return Centrifuge;\n}(_events2.default);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ }),\n\n/***/ 11:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = __webpack_require__(6);\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _utils = __webpack_require__(7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _STATE_NEW = 0;\nvar _STATE_SUBSCRIBING = 1;\nvar _STATE_SUCCESS = 2;\nvar _STATE_ERROR = 3;\nvar _STATE_UNSUBSCRIBED = 4;\n\nvar Subscription = function (_EventEmitter) {\n  _inherits(Subscription, _EventEmitter);\n\n  function Subscription(centrifuge, channel, events) {\n    _classCallCheck(this, Subscription);\n\n    var _this = _possibleConstructorReturn(this, (Subscription.__proto__ || Object.getPrototypeOf(Subscription)).call(this));\n\n    _this.channel = channel;\n    _this._centrifuge = centrifuge;\n    _this._status = _STATE_NEW;\n    _this._error = null;\n    _this._isResubscribe = false;\n    _this._ready = false;\n    _this._subscriptionPromise = null;\n    _this._noResubscribe = false;\n    _this._recoverable = false;\n    _this._recover = false;\n    _this._setEvents(events);\n    _this._initializePromise();\n    _this._promises = {};\n    _this._promiseId = 0;\n    _this.on('error', function (errContext) {\n      this._centrifuge._debug('subscription error', errContext);\n    });\n    return _this;\n  }\n\n  _createClass(Subscription, [{\n    key: '_nextPromiseId',\n    value: function _nextPromiseId() {\n      return ++this._promiseId;\n    }\n  }, {\n    key: '_initializePromise',\n    value: function _initializePromise() {\n      var _this2 = this;\n\n      // this helps us to wait until subscription will successfully\n      // subscribe and call actions such as presence, history etc in\n      // synchronous way.\n      this._ready = false;\n\n      this._subscriptionPromise = new Promise(function (resolve, reject) {\n        _this2._resolve = function (value) {\n          _this2._ready = true;\n          resolve(value);\n        };\n        _this2._reject = function (err) {\n          _this2._ready = true;\n          reject(err);\n        };\n      }).then(function () {}, function () {});\n    }\n  }, {\n    key: '_needRecover',\n    value: function _needRecover() {\n      return this._recoverable === true && this._recover === true;\n    }\n  }, {\n    key: '_setEvents',\n    value: function _setEvents(events) {\n      if (!events) {\n        return;\n      }\n      if ((0, _utils.isFunction)(events)) {\n        // events is just a function to handle publication received from channel.\n        this.on('publish', events);\n      } else if (Object.prototype.toString.call(events) === Object.prototype.toString.call({})) {\n        var knownEvents = ['publish', 'join', 'leave', 'unsubscribe', 'subscribe', 'error'];\n        for (var i = 0, l = knownEvents.length; i < l; i++) {\n          var ev = knownEvents[i];\n          if (ev in events) {\n            this.on(ev, events[ev]);\n          }\n        }\n      }\n    }\n  }, {\n    key: '_isNew',\n    value: function _isNew() {\n      return this._status === _STATE_NEW;\n    }\n  }, {\n    key: '_isUnsubscribed',\n    value: function _isUnsubscribed() {\n      return this._status === _STATE_UNSUBSCRIBED;\n    }\n  }, {\n    key: '_isSubscribing',\n    value: function _isSubscribing() {\n      return this._status === _STATE_SUBSCRIBING;\n    }\n  }, {\n    key: '_isReady',\n    value: function _isReady() {\n      return this._status === _STATE_SUCCESS || this._status === _STATE_ERROR;\n    }\n  }, {\n    key: '_isSuccess',\n    value: function _isSuccess() {\n      return this._status === _STATE_SUCCESS;\n    }\n  }, {\n    key: '_isError',\n    value: function _isError() {\n      return this._status === _STATE_ERROR;\n    }\n  }, {\n    key: '_setNew',\n    value: function _setNew() {\n      this._status = _STATE_NEW;\n    }\n  }, {\n    key: '_setSubscribing',\n    value: function _setSubscribing(isResubscribe) {\n      this._isResubscribe = isResubscribe || false;\n      if (this._ready === true) {\n        // new promise for this subscription\n        this._initializePromise();\n      }\n      this._status = _STATE_SUBSCRIBING;\n    }\n  }, {\n    key: '_setSubscribeSuccess',\n    value: function _setSubscribeSuccess(recovered, positioned, offset, epoch) {\n      if (this._status === _STATE_SUCCESS) {\n        return;\n      }\n      this._status = _STATE_SUCCESS;\n      var successContext = this._getSubscribeSuccessContext(recovered, positioned, offset, epoch);\n\n      this._recover = false;\n      this.emit('subscribe', successContext);\n      this._resolve(successContext);\n      for (var id in this._promises) {\n        clearTimeout(this._promises[id].timeout);\n        this._promises[id].resolve();\n        delete this._promises[id];\n      }\n    }\n  }, {\n    key: '_setSubscribeError',\n    value: function _setSubscribeError(err) {\n      if (this._status === _STATE_ERROR) {\n        return;\n      }\n      this._status = _STATE_ERROR;\n      this._error = err;\n      var errContext = this._getSubscribeErrorContext();\n      this.emit('error', errContext);\n      this._reject(errContext);\n      for (var id in this._promises) {\n        clearTimeout(this._promises[id].timeout);\n        this._promises[id].reject(err);\n        delete this._promises[id];\n      }\n    }\n  }, {\n    key: '_triggerUnsubscribe',\n    value: function _triggerUnsubscribe() {\n      this.emit('unsubscribe', {\n        channel: this.channel\n      });\n    }\n  }, {\n    key: '_setUnsubscribed',\n    value: function _setUnsubscribed(noResubscribe) {\n      this._centrifuge._clearSubRefreshTimeout(this.channel);\n      if (this._status === _STATE_UNSUBSCRIBED) {\n        return;\n      }\n      var needTrigger = this._status === _STATE_SUCCESS;\n      this._status = _STATE_UNSUBSCRIBED;\n      if (noResubscribe === true) {\n        this._recover = false;\n        this._noResubscribe = true;\n        delete this._centrifuge._lastSeq[this.channel];\n        delete this._centrifuge._lastGen[this.channel];\n        delete this._centrifuge._lastEpoch[this.channel];\n      }\n      if (needTrigger) {\n        this._triggerUnsubscribe();\n      }\n    }\n  }, {\n    key: '_shouldResubscribe',\n    value: function _shouldResubscribe() {\n      return !this._noResubscribe;\n    }\n  }, {\n    key: '_getSubscribeSuccessContext',\n    value: function _getSubscribeSuccessContext(recovered, positioned, offset, epoch) {\n      var ctx = {\n        channel: this.channel,\n        isResubscribe: this._isResubscribe,\n        recovered: recovered\n      };\n      if (positioned) {\n        ctx.streamPosition = {\n          'offset': offset,\n          'epoch': epoch\n        };\n      };\n      return ctx;\n    }\n  }, {\n    key: '_getSubscribeErrorContext',\n    value: function _getSubscribeErrorContext() {\n      var subscribeErrorContext = this._error;\n      subscribeErrorContext.channel = this.channel;\n      subscribeErrorContext.isResubscribe = this._isResubscribe;\n      return subscribeErrorContext;\n    }\n  }, {\n    key: 'ready',\n    value: function ready(callback, errback) {\n      if (this._ready) {\n        if (this._isSuccess()) {\n          callback(this._getSubscribeSuccessContext());\n        } else {\n          errback(this._getSubscribeErrorContext());\n        }\n      }\n    }\n  }, {\n    key: 'subscribe',\n    value: function subscribe() {\n      if (this._status === _STATE_SUCCESS) {\n        return;\n      }\n      this._noResubscribe = false;\n      this._centrifuge._subscribe(this);\n    }\n  }, {\n    key: 'unsubscribe',\n    value: function unsubscribe() {\n      this._setUnsubscribed(true);\n      this._centrifuge._unsubscribe(this);\n    }\n  }, {\n    key: '_methodCall',\n    value: function _methodCall(message, type) {\n      var _this3 = this;\n\n      var methodCallPromise = new Promise(function (resolve, reject) {\n        var subPromise = void 0;\n        if (_this3._isSuccess()) {\n          subPromise = Promise.resolve();\n        } else if (_this3._isError()) {\n          subPromise = Promise.reject(_this3._error);\n        } else {\n          subPromise = new Promise(function (res, rej) {\n            var timeout = setTimeout(function () {\n              rej({ 'code': 0, 'message': 'timeout' });\n            }, _this3._centrifuge._config.timeout);\n            _this3._promises[_this3._nextPromiseId()] = {\n              timeout: timeout,\n              resolve: res,\n              reject: rej\n            };\n          });\n        }\n        subPromise.then(function () {\n          return _this3._centrifuge._call(message).then(function (resolveCtx) {\n            resolve(_this3._centrifuge._decoder.decodeCommandResult(type, resolveCtx.result));\n            if (resolveCtx.next) {\n              resolveCtx.next();\n            }\n          }, function (rejectCtx) {\n            reject(rejectCtx.error);\n            if (rejectCtx.next) {\n              rejectCtx.next();\n            }\n          });\n        }, function (error) {\n          reject(error);\n        });\n      });\n      return methodCallPromise;\n    }\n  }, {\n    key: 'publish',\n    value: function publish(data) {\n      return this._methodCall({\n        method: this._centrifuge._methodType.PUBLISH,\n        params: {\n          channel: this.channel,\n          data: data\n        }\n      }, this._centrifuge._methodType.PUBLISH);\n    }\n  }, {\n    key: 'presence',\n    value: function presence() {\n      return this._methodCall({\n        method: this._centrifuge._methodType.PRESENCE,\n        params: {\n          channel: this.channel\n        }\n      }, this._centrifuge._methodType.PRESENCE);\n    }\n  }, {\n    key: 'presenceStats',\n    value: function presenceStats() {\n      return this._methodCall({\n        method: this._centrifuge._methodType.PRESENCE_STATS,\n        params: {\n          channel: this.channel\n        }\n      }, this._centrifuge._methodType.PRESENCE_STATS);\n    }\n  }, {\n    key: 'history',\n    value: function history(filter) {\n      var params = {\n        channel: this.channel\n      };\n      if (filter !== undefined) {\n        if (filter.since) {\n          params['use_since'] = true;\n          if (filter.since.offset) {\n            params['offset'] = filter.since.offset;\n          }\n          if (filter.since.epoch) {\n            params['epoch'] = filter.since.epoch;\n          }\n        };\n        if (filter.limit !== undefined) {\n          params['use_limit'] = true;\n          params['limit'] = filter.limit;\n        }\n      };\n      return this._methodCall({\n        method: this._centrifuge._methodType.HISTORY,\n        params: params\n      }, this._centrifuge._methodType.HISTORY);\n    }\n  }]);\n\n  return Subscription;\n}(_events2.default);\n\nexports.default = Subscription;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 12:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar JsonMethodType = exports.JsonMethodType = {\n  CONNECT: 0,\n  SUBSCRIBE: 1,\n  UNSUBSCRIBE: 2,\n  PUBLISH: 3,\n  PRESENCE: 4,\n  PRESENCE_STATS: 5,\n  HISTORY: 6,\n  PING: 7,\n  SEND: 8,\n  RPC: 9,\n  REFRESH: 10,\n  SUB_REFRESH: 11\n};\n\nvar JsonPushType = exports.JsonPushType = {\n  PUBLICATION: 0,\n  JOIN: 1,\n  LEAVE: 2,\n  UNSUB: 3,\n  MESSAGE: 4,\n  SUB: 5\n};\n\nvar JsonEncoder = exports.JsonEncoder = function () {\n  function JsonEncoder() {\n    _classCallCheck(this, JsonEncoder);\n  }\n\n  _createClass(JsonEncoder, [{\n    key: 'encodeCommands',\n    value: function encodeCommands(commands) {\n      var encodedCommands = [];\n      for (var i in commands) {\n        if (commands.hasOwnProperty(i)) {\n          encodedCommands.push(JSON.stringify(commands[i]));\n        }\n      }\n      return encodedCommands.join('\\n');\n    }\n  }]);\n\n  return JsonEncoder;\n}();\n\nvar JsonDecoder = exports.JsonDecoder = function () {\n  function JsonDecoder() {\n    _classCallCheck(this, JsonDecoder);\n  }\n\n  _createClass(JsonDecoder, [{\n    key: 'decodeReplies',\n    value: function decodeReplies(data) {\n      var replies = [];\n      var encodedReplies = data.split('\\n');\n      for (var i in encodedReplies) {\n        if (encodedReplies.hasOwnProperty(i)) {\n          if (!encodedReplies[i]) {\n            continue;\n          }\n          var reply = JSON.parse(encodedReplies[i]);\n          replies.push(reply);\n        }\n      }\n      return replies;\n    }\n  }, {\n    key: 'decodeCommandResult',\n    value: function decodeCommandResult(methodType, data) {\n      return data;\n    }\n  }, {\n    key: 'decodePush',\n    value: function decodePush(data) {\n      return data;\n    }\n  }, {\n    key: 'decodePushData',\n    value: function decodePushData(pushType, data) {\n      return data;\n    }\n  }]);\n\n  return JsonDecoder;\n}();\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n\n/***/ 31:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _centrifuge = __webpack_require__(10);\n\nexports.default = _centrifuge.Centrifuge;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 6:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = $getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  var args = [];\n  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    ReflectApply(this.listener, this.target, args);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\n\n/***/ }),\n\n/***/ 7:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.startsWith = startsWith;\nexports.isFunction = isFunction;\nexports.log = log;\nexports.backoff = backoff;\nexports.errorExists = errorExists;\nexports.extend = extend;\nfunction startsWith(value, prefix) {\n  return value.lastIndexOf(prefix, 0) === 0;\n};\n\nfunction isFunction(value) {\n  if (value === undefined || value === null) {\n    return false;\n  }\n  return typeof value === 'function';\n};\n\nfunction log(level, args) {\n  if (global.console) {\n    var logger = global.console[level];\n\n    if (isFunction(logger)) {\n      logger.apply(global.console, args);\n    }\n  }\n};\n\nfunction backoff(step, min, max) {\n  var jitter = 0.5 * Math.random();\n  var interval = Math.min(max, min * Math.pow(2, step + 1));\n\n  return Math.floor((1 - jitter) * interval);\n};\n\nfunction errorExists(data) {\n  return 'error' in data && data.error !== null;\n};\n\nfunction extend(a, b) {\n  for (var key in b) {\n    if (b.hasOwnProperty(key)) {\n      a[key] = b[key];\n    }\n  }\n  return a;\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ })\n\n/******/ });\n});\n\n\n// WEBPACK FOOTER //\n// centrifuge.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 31);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2579663b1a35d88936e3","import EventEmitter from 'events';\nimport Subscription from './subscription';\n\nimport {\n  JsonEncoder,\n  JsonDecoder,\n  JsonMethodType,\n  JsonPushType\n} from './json';\n\nimport {\n  isFunction,\n  log,\n  startsWith,\n  errorExists,\n  backoff,\n  extend\n} from './utils';\n\nconst _errorTimeout = 'timeout';\nconst _errorConnectionClosed = 'connection closed';\n\nexport class Centrifuge extends EventEmitter {\n\n  constructor(url, options) {\n    super();\n    this._url = url;\n    this._websocket = null;\n    this._sockjs = null;\n    this._isSockjs = false;\n    this._binary = false;\n    this._methodType = null;\n    this._pushType = null;\n    this._encoder = null;\n    this._decoder = null;\n    this._status = 'disconnected';\n    this._reconnect = true;\n    this._reconnecting = false;\n    this._transport = null;\n    this._transportName = null;\n    this._transportClosed = true;\n    this._messageId = 0;\n    this._clientID = null;\n    this._refreshRequired = false;\n    this._subs = {};\n    this._serverSubs = {};\n    this._lastSeq = {};\n    this._lastGen = {};\n    this._lastOffset = {};\n    this._lastEpoch = {};\n    this._messages = [];\n    this._isBatching = false;\n    this._isSubscribeBatching = false;\n    this._privateChannels = {};\n    this._numRefreshFailed = 0;\n    this._refreshTimeout = null;\n    this._pingTimeout = null;\n    this._pongTimeout = null;\n    this._subRefreshTimeouts = {};\n    this._retries = 0;\n    this._callbacks = {};\n    this._latency = null;\n    this._latencyStart = null;\n    this._connectData = null;\n    this._token = null;\n    this._xhrID = 0;\n    this._xhrs = {};\n    this._dispatchPromise = Promise.resolve();\n    this._config = {\n      debug: false,\n      websocket: null,\n      sockjs: null,\n      promise: null,\n      minRetry: 1000,\n      maxRetry: 20000,\n      timeout: 5000,\n      ping: true,\n      pingInterval: 25000,\n      pongWaitTimeout: 5000,\n      privateChannelPrefix: '$',\n      onTransportClose: null,\n      sockjsServer: null,\n      sockjsTransports: [\n        'websocket',\n        'xdr-streaming',\n        'xhr-streaming',\n        'eventsource',\n        'iframe-eventsource',\n        'iframe-htmlfile',\n        'xdr-polling',\n        'xhr-polling',\n        'iframe-xhr-polling',\n        'jsonp-polling'\n      ],\n      refreshEndpoint: '/centrifuge/refresh',\n      refreshHeaders: {},\n      refreshParams: {},\n      refreshData: {},\n      refreshAttempts: null,\n      refreshInterval: 1000,\n      onRefreshFailed: null,\n      onRefresh: null,\n      subscribeEndpoint: '/centrifuge/subscribe',\n      subscribeHeaders: {},\n      subscribeParams: {},\n      subRefreshInterval: 1000,\n      onPrivateSubscribe: null\n    };\n    this._configure(options);\n  }\n\n  setToken(token) {\n    this._token = token;\n  }\n\n  setConnectData(data) {\n    this._connectData = data;\n  }\n\n  setRefreshHeaders(headers) {\n    this._config.refreshHeaders = headers;\n  }\n  setRefreshParams(params) {\n    this._config.refreshParams = params;\n  }\n  setRefreshData(data) {\n    this._config.refreshData = data;\n  }\n\n  setSubscribeHeaders(headers) {\n    this._config.subscribeHeaders = headers;\n  }\n  setSubscribeParams(params) {\n    this._config.subscribeParams = params;\n  }\n\n  _ajax(url, params, headers, data, callback) {\n    let query = '';\n    this._debug('sending AJAX request to', url, 'with data', JSON.stringify(data));\n\n    const xhr = (global.XMLHttpRequest ? new global.XMLHttpRequest() : new global.ActiveXObject('Microsoft.XMLHTTP'));\n\n    for (const i in params) {\n      if (params.hasOwnProperty(i)) {\n        if (query.length > 0) {\n          query += '&';\n        }\n        query += encodeURIComponent(i) + '=' + encodeURIComponent(params[i]);\n      }\n    }\n    if (query.length > 0) {\n      query = '?' + query;\n    }\n    xhr.open('POST', url + query, true);\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = true;\n    }\n\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    for (const headerName in headers) {\n      if (headers.hasOwnProperty(headerName)) {\n        xhr.setRequestHeader(headerName, headers[headerName]);\n      }\n    }\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          let data, parsed = false;\n          try {\n            data = JSON.parse(xhr.responseText);\n            parsed = true;\n          } catch (e) {\n            callback({\n              error: 'Invalid JSON. Data was: ' + xhr.responseText,\n              status: 200,\n              data: null\n            });\n          }\n          if (parsed) { // prevents double execution.\n            callback({\n              data: data,\n              status: 200\n            });\n          }\n        } else {\n          this._log('wrong status code in AJAX response', xhr.status);\n          callback({\n            status: xhr.status,\n            data: null\n          });\n        }\n      }\n    };\n    setTimeout(() => xhr.send(JSON.stringify(data)), 20);\n    return xhr;\n  };\n\n  _log() {\n    log('info', arguments);\n  };\n\n  _debug() {\n    if (this._config.debug === true) {\n      log('debug', arguments);\n    }\n  };\n\n  _websocketSupported() {\n    if (this._config.websocket !== null) {\n      return true;\n    }\n    return !(typeof WebSocket !== 'function' && typeof WebSocket !== 'object');\n  };\n\n  _setFormat(format) {\n    if (this._formatOverride(format)) {\n      return;\n    }\n    if (format === 'protobuf') {\n      throw new Error('not implemented by JSON only Centrifuge client – use client with Protobuf');\n    }\n    this._binary = false;\n    this._methodType = JsonMethodType;\n    this._pushType = JsonPushType;\n    this._encoder = new JsonEncoder();\n    this._decoder = new JsonDecoder();\n  }\n\n  _formatOverride(format) {\n    return false;\n  }\n\n  _configure(configuration) {\n    if (!('Promise' in global)) {\n      throw new Error('Promise polyfill required');\n    }\n\n    extend(this._config, configuration || {});\n    this._debug('centrifuge config', this._config);\n\n    if (!this._url) {\n      throw new Error('url required');\n    }\n\n    if (startsWith(this._url, 'ws') && this._url.indexOf('format=protobuf') > -1) {\n      this._setFormat('protobuf');\n    } else {\n      this._setFormat('json');\n    }\n\n    if (startsWith(this._url, 'http')) {\n      this._debug('client will try to connect to SockJS endpoint');\n      if (this._config.sockjs !== null) {\n        this._debug('SockJS explicitly provided in options');\n        this._sockjs = this._config.sockjs;\n      } else {\n        if (typeof global.SockJS === 'undefined') {\n          throw new Error('SockJS not found, use ws:// in url or include SockJS');\n        }\n        this._debug('use globally defined SockJS');\n        this._sockjs = global.SockJS;\n      }\n    } else {\n      this._debug('client will connect to websocket endpoint');\n    }\n  };\n\n  _setStatus(newStatus) {\n    if (this._status !== newStatus) {\n      this._debug('Status', this._status, '->', newStatus);\n      this._status = newStatus;\n    }\n  };\n\n  _isDisconnected() {\n    return this._status === 'disconnected';\n  };\n\n  _isConnecting() {\n    return this._status === 'connecting';\n  };\n\n  _isConnected() {\n    return this._status === 'connected';\n  };\n\n  _nextMessageId() {\n    return ++this._messageId;\n  };\n\n  _resetRetry() {\n    this._debug('reset retries count to 0');\n    this._retries = 0;\n  };\n\n  _getRetryInterval() {\n    const interval = backoff(this._retries, this._config.minRetry, this._config.maxRetry);\n\n    this._retries += 1;\n    return interval;\n  };\n\n  _abortInflightXHRs() {\n    for (const xhrID in this._xhrs) {\n      try {\n        this._xhrs[xhrID].abort();\n      } catch (e) {\n        this._debug('error aborting xhr', e);\n      }\n      delete this._xhrs[xhrID];\n    }\n  };\n\n  _clearConnectedState(reconnect) {\n    this._clientID = null;\n    this._stopPing();\n\n    // fire errbacks of registered outgoing calls.\n    for (const id in this._callbacks) {\n      if (this._callbacks.hasOwnProperty(id)) {\n        const callbacks = this._callbacks[id];\n        clearTimeout(callbacks.timeout);\n        const errback = callbacks.errback;\n        if (!errback) {\n          continue;\n        }\n        errback({error: this._createErrorObject('disconnected')});\n      }\n    }\n    this._callbacks = {};\n\n    // fire unsubscribe events\n    for (const channel in this._subs) {\n      if (this._subs.hasOwnProperty(channel)) {\n        const sub = this._subs[channel];\n\n        if (reconnect) {\n          if (sub._isSuccess()) {\n            sub._triggerUnsubscribe();\n            sub._recover = true;\n          }\n          if (sub._shouldResubscribe()) {\n            sub._setSubscribing();\n          }\n        } else {\n          sub._setUnsubscribed();\n        }\n      }\n    }\n\n    this._abortInflightXHRs();\n\n    // clear refresh timer\n    if (this._refreshTimeout !== null) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n\n    // clear sub refresh timers\n    for (const channel in this._subRefreshTimeouts) {\n      if (this._subRefreshTimeouts.hasOwnProperty(channel) && this._subRefreshTimeouts[channel]) {\n        this._clearSubRefreshTimeout(channel);\n      }\n    }\n    this._subRefreshTimeouts = {};\n\n    if (!this._reconnect) {\n      // completely clear subscriptions\n      this._subs = {};\n    }\n  };\n\n  _isTransportOpen() {\n    if (this._isSockjs) {\n      return this._transport &&\n        this._transport.transport &&\n        this._transport.transport.readyState === this._transport.transport.OPEN;\n    }\n    return this._transport && this._transport.readyState === this._transport.OPEN;\n  };\n\n  _transportSend(commands) {\n    if (!commands.length) {\n      return true;\n    }\n\n    if (!this._isTransportOpen()) {\n      // resolve pending commands with error if transport is not open\n      for (let command in commands) {\n        let id = command.id;\n        if (!(id in this._callbacks)) {\n          continue;\n        }\n        const callbacks = this._callbacks[id];\n        clearTimeout(this._callbacks[id].timeout);\n        delete this._callbacks[id];\n        const errback = callbacks.errback;\n        errback({error: this._createErrorObject(_errorConnectionClosed, 0)});\n      }\n      return false;\n    }\n    this._transport.send(this._encoder.encodeCommands(commands));\n    return true;\n  }\n\n  _setupTransport() {\n    this._isSockjs = false;\n\n    // detect transport to use - SockJS or Websocket\n    if (this._sockjs !== null) {\n      const sockjsOptions = {\n        transports: this._config.sockjsTransports\n      };\n\n      if (this._config.sockjsServer !== null) {\n        sockjsOptions.server = this._config.sockjsServer;\n      }\n      this._isSockjs = true;\n      this._transport = new this._sockjs(this._url, null, sockjsOptions);\n    } else {\n      if (!this._websocketSupported()) {\n        this._debug('No Websocket support and no SockJS configured, can not connect');\n        return;\n      }\n      if (this._config.websocket !== null) {\n        this._websocket = this._config.websocket;\n      } else {\n        this._websocket = WebSocket;\n      }\n      this._transport = new this._websocket(this._url);\n      if (this._binary === true) {\n        this._transport.binaryType = 'arraybuffer';\n      }\n    }\n\n    this._transport.onopen = () => {\n      this._transportClosed = false;\n\n      if (this._isSockjs) {\n        this._transportName = 'sockjs-' + this._transport.transport;\n        this._transport.onheartbeat = () => this._restartPing();\n      } else {\n        this._transportName = 'websocket';\n      }\n\n      // Can omit method here due to zero value.\n      const msg = {\n        // method: this._methodType.CONNECT\n      };\n\n      if (this._token || this._connectData) {\n        msg.params = {};\n      }\n\n      if (this._token) {\n        msg.params.token = this._token;\n      }\n\n      if (this._connectData) {\n        msg.params.data = this._connectData;\n      }\n\n      let subs = {};\n      let hasSubs = false;\n      for (const channel in this._serverSubs) {\n        if (this._serverSubs.hasOwnProperty(channel) && this._serverSubs[channel].recoverable) {\n          hasSubs = true;\n          let sub = {\n            'recover': true\n          };\n          if (this._serverSubs[channel].seq || this._serverSubs[channel].gen) {\n            if (this._serverSubs[channel].seq) {\n              sub['seq'] = this._serverSubs[channel].seq;\n            }\n            if (this._serverSubs[channel].gen) {\n              sub['gen'] = this._serverSubs[channel].gen;\n            }\n          } else {\n            if (this._serverSubs[channel].offset) {\n              sub['offset'] = this._serverSubs[channel].offset;\n            }\n          }\n          if (this._serverSubs[channel].epoch) {\n            sub['epoch'] = this._serverSubs[channel].epoch;\n          }\n          subs[channel] = sub;\n        }\n      }\n      if (hasSubs) {\n        if (!msg.params) {msg.params = {};}\n        msg.params.subs = subs;\n      }\n\n      this._latencyStart = new Date();\n      this._call(msg).then(resolveCtx => {\n        this._connectResponse(this._decoder.decodeCommandResult(this._methodType.CONNECT, resolveCtx.result), hasSubs);\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        const err = rejectCtx.error;\n        if (err.code === 109) { // token expired.\n          this._refreshRequired = true;\n        }\n        this._disconnect('connect error', true);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    };\n\n    this._transport.onerror = error => {\n      this._debug('transport level error', error);\n    };\n\n    this._transport.onclose = closeEvent => {\n      this._transportClosed = true;\n      let reason = _errorConnectionClosed;\n      let needReconnect = true;\n\n      if (closeEvent && 'reason' in closeEvent && closeEvent.reason) {\n        try {\n          const advice = JSON.parse(closeEvent.reason);\n          this._debug('reason is an advice object', advice);\n          reason = advice.reason;\n          needReconnect = advice.reconnect;\n        } catch (e) {\n          reason = closeEvent.reason;\n          this._debug('reason is a plain string', reason);\n        }\n      }\n\n      // onTransportClose callback should be executed every time transport was closed.\n      // This can be helpful to catch failed connection events (because our disconnect\n      // event only called once and every future attempts to connect do not fire disconnect\n      // event again).\n      if (this._config.onTransportClose !== null) {\n        this._config.onTransportClose({\n          event: closeEvent,\n          reason: reason,\n          reconnect: needReconnect\n        });\n      }\n\n      this._disconnect(reason, needReconnect);\n\n      if (this._reconnect === true) {\n        this._reconnecting = true;\n        const interval = this._getRetryInterval();\n\n        this._debug('reconnect after ' + interval + ' milliseconds');\n        setTimeout(() => {\n          if (this._reconnect === true) {\n            if (this._refreshRequired) {\n              this._refresh();\n            } else {\n              this._connect();\n            }\n          }\n        }, interval);\n      }\n    };\n\n    this._transport.onmessage = event => {\n      this._dataReceived(event.data);\n    };\n  };\n\n  rpc(data) {\n    return this._rpc('', data);\n  }\n\n  namedRPC(method, data) {\n    return this._rpc(method, data);\n  }\n\n  _rpc(method, data) {\n    let params = {\n      data: data\n    };\n    if (method !== '') {\n      params.method = method;\n    };\n    const msg = {\n      method: this._methodType.RPC,\n      params: params\n    };\n\n    if (!this.isConnected()) {\n      return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n    }\n\n    return this._call(msg).then(resolveCtx => {\n      if (resolveCtx.next) {\n        resolveCtx.next();\n      }\n      return this._decoder.decodeCommandResult(this._methodType.RPC, resolveCtx.result);\n    }, rejectCtx => {\n      if (rejectCtx.next) {\n        rejectCtx.next();\n      }\n      return Promise.reject(rejectCtx.error);\n    });\n  }\n\n  send(data) {\n    const msg = {\n      method: this._methodType.SEND,\n      params: {\n        data: data\n      }\n    };\n\n    if (!this.isConnected()) {\n      return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n    }\n\n    const sent = this._transportSend([msg]); // can send async message to server without id set\n    if (!sent) {\n      return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n    };\n    return Promise.resolve({});\n  }\n\n  publish(channel, data) {\n    const msg = {\n      method: this._methodType.PUBLISH,\n      params: {\n        channel: channel,\n        data: data\n      }\n    };\n\n    if (!this.isConnected()) {\n      return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n    }\n\n    return this._call(msg).then(result => {\n      if (result.next) {\n        result.next();\n      }\n      return {};\n    });\n  }\n\n  _dataReceived(data) {\n    const replies = this._decoder.decodeReplies(data);\n    // we have to guarantee order of events in replies processing - i.e. start processing\n    // next reply only when we finished processing of current one. Without syncing things in\n    // this way we could get wrong publication events order as reply promises resolve\n    // on next loop tick so for loop continues before we finished emitting all reply events.\n    this._dispatchPromise = this._dispatchPromise.then(() => {\n      let finishDispatch;\n      this._dispatchPromise = new Promise(resolve =>{\n        finishDispatch = resolve;\n      });\n      this._dispatchSynchronized(replies, finishDispatch);\n    });\n    this._restartPing();\n  }\n\n  _dispatchSynchronized(replies, finishDispatch) {\n    let p = Promise.resolve();\n    for (const i in replies) {\n      if (replies.hasOwnProperty(i)) {\n        p = p.then(() => {\n          return this._dispatchReply(replies[i]);\n        });\n      }\n    }\n    p = p.then(() => {\n      finishDispatch();\n    });\n  }\n\n  _dispatchReply(reply) {\n    var next;\n    const p = new Promise(resolve =>{\n      next = resolve;\n    });\n\n    if (reply === undefined || reply === null) {\n      this._debug('dispatch: got undefined or null reply');\n      next();\n      return p;\n    }\n\n    const id = reply.id;\n\n    if (id && id > 0) {\n      this._handleReply(reply, next);\n    } else {\n      this._handlePush(reply.result, next);\n    }\n\n    return p;\n  };\n\n  _call(msg) {\n    return new Promise((resolve, reject) => {\n      const id = this._addMessage(msg);\n      this._registerCall(id, resolve, reject);\n    });\n  }\n\n  _connect() {\n    if (this.isConnected()) {\n      this._debug('connect called when already connected');\n      return;\n    }\n    if (this._status === 'connecting') {\n      return;\n    }\n\n    this._debug('start connecting');\n    this._setStatus('connecting');\n    this._clientID = null;\n    this._reconnect = true;\n    this._setupTransport();\n  };\n\n  _disconnect(reason, shouldReconnect) {\n\n    const reconnect = shouldReconnect || false;\n    if (reconnect === false) {\n      this._reconnect = false;\n    }\n\n    if (this._isDisconnected()) {\n      if (!reconnect) {\n        this._clearConnectedState(reconnect);\n      }\n      return;\n    }\n\n    this._clearConnectedState(reconnect);\n\n    this._debug('disconnected:', reason, shouldReconnect);\n    this._setStatus('disconnected');\n\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    if (this._reconnecting === false) {\n      // fire unsubscribe events for server side subs.\n      for (const channel in this._serverSubs) {\n        if (this._serverSubs.hasOwnProperty(channel)) {\n          this.emit('unsubscribe', {channel: channel});\n        }\n      }\n      this.emit('disconnect', {\n        reason: reason,\n        reconnect: reconnect\n      });\n    }\n\n    if (reconnect === false) {\n      this._subs = {};\n      this._serverSubs = {};\n    }\n\n    if (!this._transportClosed) {\n      this._transport.close();\n    }\n  };\n\n  _refreshFailed() {\n    this._numRefreshFailed = 0;\n    if (!this._isDisconnected()) {\n      this._disconnect('refresh failed', false);\n    }\n    if (this._config.onRefreshFailed !== null) {\n      this._config.onRefreshFailed();\n    }\n  };\n\n  _refresh() {\n    // ask application for new connection token.\n    this._debug('refresh token');\n\n    if (this._config.refreshAttempts === 0) {\n      this._debug('refresh attempts set to 0, do not send refresh request at all');\n      this._refreshFailed();\n      return;\n    }\n\n    if (this._refreshTimeout !== null) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n\n    const clientID = this._clientID;\n    const xhrID = this._newXHRID();\n\n    const cb = (resp) => {\n      if (xhrID in this._xhrs) {\n        delete this._xhrs[xhrID];\n      }\n      if (this._clientID !== clientID) {\n        return;\n      }\n      if (resp.error || resp.status !== 200) {\n        // We don't perform any connection status related actions here as we are\n        // relying on server that must close connection eventually.\n        if (resp.error) {\n          this._debug('error refreshing connection token', resp.error);\n        } else {\n          this._debug('error refreshing connection token: wrong status code', resp.status);\n        }\n        this._numRefreshFailed++;\n        if (this._refreshTimeout !== null) {\n          clearTimeout(this._refreshTimeout);\n          this._refreshTimeout = null;\n        }\n        if (this._config.refreshAttempts !== null && this._numRefreshFailed >= this._config.refreshAttempts) {\n          this._refreshFailed();\n          return;\n        }\n        const jitter = Math.round(Math.random() * 1000 * Math.max(this._numRefreshFailed, 20));\n        const interval = this._config.refreshInterval + jitter;\n        this._refreshTimeout = setTimeout(() => this._refresh(), interval);\n        return;\n      }\n      this._numRefreshFailed = 0;\n      this._token = resp.data.token;\n      if (!this._token) {\n        this._refreshFailed();\n        return;\n      }\n      if (this._isDisconnected() && this._reconnect) {\n        this._debug('token refreshed, connect from scratch');\n        this._connect();\n      } else {\n        this._debug('send refreshed token');\n        const msg = {\n          method: this._methodType.REFRESH,\n          params: {\n            token: this._token\n          }\n        };\n        this._call(msg).then(resolveCtx => {\n          this._refreshResponse(this._decoder.decodeCommandResult(this._methodType.REFRESH, resolveCtx.result));\n          if (resolveCtx.next) {\n            resolveCtx.next();\n          }\n        }, rejectCtx => {\n          this._refreshError(rejectCtx.error);\n          if (rejectCtx.next) {\n            rejectCtx.next();\n          }\n        });\n      }\n    };\n\n    if (this._config.onRefresh !== null) {\n      const context = {};\n      this._config.onRefresh(context, cb);\n    } else {\n      const xhr = this._ajax(\n        this._config.refreshEndpoint,\n        this._config.refreshParams,\n        this._config.refreshHeaders,\n        this._config.refreshData,\n        cb\n      );\n      this._xhrs[xhrID] = xhr;\n    }\n  };\n\n  _refreshError(err) {\n    this._debug('refresh error', err);\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    const interval = this._config.refreshInterval + Math.round(Math.random() * 1000);\n    this._refreshTimeout = setTimeout(() => this._refresh(), interval);\n  }\n\n  _refreshResponse(result) {\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    if (result.expires) {\n      this._clientID = result.client;\n      this._refreshTimeout = setTimeout(() => this._refresh(), this._getTTLMilliseconds(result.ttl));\n    }\n  };\n\n  _newXHRID() {\n    this._xhrID++;\n    return this._xhrID;\n  }\n\n  _subRefresh(channel) {\n    this._debug('refresh subscription token for channel', channel);\n\n    if (this._subRefreshTimeouts[channel] !== undefined) {\n      this._clearSubRefreshTimeout(channel);\n    } else {\n      return;\n    }\n\n    const clientID = this._clientID;\n    const xhrID = this._newXHRID();\n\n    const cb = (resp) => {\n      if (xhrID in this._xhrs) {\n        delete this._xhrs[xhrID];\n      }\n      if (resp.error || resp.status !== 200 || this._clientID !== clientID) {\n        return;\n      }\n      let channelsData = {};\n      if (resp.data.channels) {\n        for (const i in resp.data.channels) {\n          const channelData = resp.data.channels[i];\n          if (!channelData.channel) {\n            continue;\n          }\n          channelsData[channelData.channel] = channelData.token;\n        }\n      }\n\n      const token = channelsData[channel];\n      if (!token) {\n        return;\n      }\n      const msg = {\n        method: this._methodType.SUB_REFRESH,\n        params: {\n          channel: channel,\n          token: token\n        }\n      };\n\n      const sub = this._getSub(channel);\n      if (sub === null) {\n        return;\n      }\n\n      this._call(msg).then(resolveCtx => {\n        this._subRefreshResponse(\n          channel,\n          this._decoder.decodeCommandResult(this._methodType.SUB_REFRESH, resolveCtx.result)\n        );\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        this._subRefreshError(channel, rejectCtx.error);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    };\n\n    const data = {\n      client: this._clientID,\n      channels: [channel]\n    };\n\n    if (this._config.onPrivateSubscribe !== null) {\n      this._config.onPrivateSubscribe({\n        data: data\n      }, cb);\n    } else {\n      const xhr = this._ajax(\n        this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n      this._xhrs[xhrID] = xhr;\n    }\n  };\n\n  _clearSubRefreshTimeout(channel) {\n    if (this._subRefreshTimeouts[channel] !== undefined) {\n      clearTimeout(this._subRefreshTimeouts[channel]);\n      delete this._subRefreshTimeouts[channel];\n    }\n  }\n\n  _subRefreshError(channel, err) {\n    this._debug('subscription refresh error', channel, err);\n    this._clearSubRefreshTimeout(channel);\n    const sub = this._getSub(channel);\n    if (sub === null) {\n      return;\n    }\n    const jitter = Math.round(Math.random() * 1000);\n    let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), this._config.subRefreshInterval + jitter);\n    this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    return;\n  }\n\n  _subRefreshResponse(channel, result) {\n    this._debug('subscription refresh success', channel);\n    this._clearSubRefreshTimeout(channel);\n    const sub = this._getSub(channel);\n    if (sub === null) {\n      return;\n    }\n    if (result.expires === true) {\n      let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), this._getTTLMilliseconds(result.ttl));\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    }\n    return;\n  };\n\n  _subscribe(sub, isResubscribe) {\n    this._debug('subscribing on', sub.channel);\n    const channel = sub.channel;\n\n    if (!(channel in this._subs)) {\n      this._subs[channel] = sub;\n    }\n\n    if (!this.isConnected()) {\n      // subscribe will be called later\n      sub._setNew();\n      return;\n    }\n\n    sub._setSubscribing(isResubscribe);\n\n    const msg = {\n      method: this._methodType.SUBSCRIBE,\n      params: {\n        channel: channel\n      }\n    };\n\n    // If channel name does not start with privateChannelPrefix - then we\n    // can just send subscription message to Centrifuge. If channel name\n    // starts with privateChannelPrefix - then this is a private channel\n    // and we should ask web application backend for permission first.\n    if (startsWith(channel, this._config.privateChannelPrefix)) {\n      // private channel.\n      if (this._isSubscribeBatching) {\n        this._privateChannels[channel] = true;\n      } else {\n        this.startSubscribeBatching();\n        this._subscribe(sub);\n        this.stopSubscribeBatching();\n      }\n    } else {\n      const recover = sub._needRecover();\n\n      if (recover === true) {\n        msg.params.recover = true;\n        const seq = this._getLastSeq(channel);\n        const gen = this._getLastGen(channel);\n        if (seq || gen) {\n          if (seq) {\n            msg.params.seq = seq;\n          }\n          if (gen) {\n            msg.params.gen = gen;\n          }\n        } else {\n          const offset = this._getLastOffset(channel);\n          if (offset) {\n            msg.params.offset = offset;\n          }\n        }\n        const epoch = this._getLastEpoch(channel);\n        if (epoch) {\n          msg.params.epoch = epoch;\n        }\n      }\n\n      this._call(msg).then(resolveCtx => {\n        this._subscribeResponse(\n          channel,\n          recover,\n          this._decoder.decodeCommandResult(this._methodType.SUBSCRIBE, resolveCtx.result)\n        );\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        this._subscribeError(channel, rejectCtx.error);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    }\n  };\n\n  _unsubscribe(sub) {\n    delete this._subs[sub.channel];\n    delete this._lastOffset[sub.channel];\n    delete this._lastSeq[sub.channel];\n    delete this._lastGen[sub.channel];\n    if (this.isConnected()) {\n      // No need to unsubscribe in disconnected state - i.e. client already unsubscribed.\n      this._addMessage({\n        method: this._methodType.UNSUBSCRIBE,\n        params: {\n          channel: sub.channel\n        }\n      });\n    }\n  };\n\n  _getTTLMilliseconds(ttl) {\n    // https://stackoverflow.com/questions/12633405/what-is-the-maximum-delay-for-setinterval\n    return Math.min(ttl * 1000, 2147483647);\n  }\n\n  getSub(channel) {\n    return this._getSub(channel);\n  }\n\n  _getSub(channel) {\n    const sub = this._subs[channel];\n    if (!sub) {\n      return null;\n    }\n    return sub;\n  };\n\n  _isServerSub(channel) {\n    return this._serverSubs[channel] !== undefined;\n  };\n\n  _connectResponse(result, isRecover) {\n    const wasReconnecting = this._reconnecting;\n    this._reconnecting = false;\n    this._resetRetry();\n    this._refreshRequired = false;\n\n    if (this.isConnected()) {\n      return;\n    }\n\n    if (this._latencyStart !== null) {\n      this._latency = (new Date()).getTime() - this._latencyStart.getTime();\n      this._latencyStart = null;\n    }\n\n    this._clientID = result.client;\n    this._setStatus('connected');\n\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n    }\n\n    if (result.expires) {\n      this._refreshTimeout = setTimeout(() => this._refresh(), this._getTTLMilliseconds(result.ttl));\n    }\n\n    this.startBatching();\n    this.startSubscribeBatching();\n    for (const channel in this._subs) {\n      if (this._subs.hasOwnProperty(channel)) {\n        const sub = this._subs[channel];\n        if (sub._shouldResubscribe()) {\n          this._subscribe(sub, wasReconnecting);\n        }\n      }\n    }\n    this.stopSubscribeBatching();\n    this.stopBatching();\n\n    this._startPing();\n\n    const ctx = {\n      client: result.client,\n      transport: this._transportName,\n      latency: this._latency\n    };\n    if (result.data) {\n      ctx.data = result.data;\n    }\n\n    this.emit('connect', ctx);\n\n    if (result.subs) {\n      this._processServerSubs(result.subs, isRecover);\n    }\n  };\n\n  _processServerSubs(subs, isRecover) {\n    for (const channel in subs) {\n      if (subs.hasOwnProperty(channel)) {\n        const sub = subs[channel];\n        const recovered = sub.recovered === true;\n        let subCtx = {channel: channel, isResubscribe: isRecover, recovered: recovered};\n        this.emit('subscribe', subCtx);\n      }\n    }\n    for (const channel in subs) {\n      if (subs.hasOwnProperty(channel)) {\n        const sub = subs[channel];\n        if (sub.recovered) {\n          let pubs = sub.publications;\n          if (pubs && pubs.length > 0) {\n\n            // handle legacy order.\n            // TODO: remove as soon as Centrifuge v1 released.\n            if (pubs.length > 1 && (!pubs[0].offset || pubs[0].offset > pubs[1].offset)) {\n              pubs = pubs.reverse();\n            }\n\n            for (let i in pubs) {\n              if (pubs.hasOwnProperty(i)) {\n                this._handlePublication(channel, pubs[i]);\n              }\n            }\n          }\n        }\n        this._serverSubs[channel] = {\n          'seq': sub.seq,\n          'gen': sub.gen,\n          'offset': sub.offset,\n          'epoch': sub.epoch,\n          'recoverable': sub.recoverable\n        };\n      }\n    }\n  };\n\n  _stopPing() {\n    if (this._pongTimeout !== null) {\n      clearTimeout(this._pongTimeout);\n      this._pongTimeout = null;\n    }\n    if (this._pingTimeout !== null) {\n      clearTimeout(this._pingTimeout);\n      this._pingTimeout = null;\n    }\n  };\n\n  _startPing() {\n    if (this._config.ping !== true || this._config.pingInterval <= 0) {\n      return;\n    }\n    if (!this.isConnected()) {\n      return;\n    }\n\n    this._pingTimeout = setTimeout(() => {\n      if (!this.isConnected()) {\n        this._stopPing();\n        return;\n      }\n      this.ping();\n      this._pongTimeout = setTimeout(() => {\n        this._disconnect('no ping', true);\n      }, this._config.pongWaitTimeout);\n    }, this._config.pingInterval);\n  };\n\n  _restartPing() {\n    this._stopPing();\n    this._startPing();\n  };\n\n  _subscribeError(channel, error) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    if (!sub._isSubscribing()) {\n      return;\n    }\n    if (error.code === 0 && error.message === _errorTimeout) { // client side timeout.\n      this._disconnect('timeout', true);\n      return;\n    }\n    sub._setSubscribeError(error);\n  };\n\n  _subscribeResponse(channel, isRecover, result) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    if (!sub._isSubscribing()) {\n      return;\n    }\n\n    let recovered = false;\n    if ('recovered' in result) {\n      recovered = result.recovered;\n    }\n    let positioned = false;\n    if ('positioned' in result) {\n      positioned = result.positioned;\n    }\n    let epoch = '';\n    if ('epoch' in result) {\n      epoch = result.epoch;\n    }\n    let offset = 0;\n    if ('offset' in result) {\n      offset = result.offset;\n    }\n    sub._setSubscribeSuccess(recovered, positioned, offset, epoch);\n\n    let pubs = result.publications;\n    if (pubs && pubs.length > 0) {\n      if (pubs.length >= 2 && !pubs[0].offset && !pubs[1].offset) {\n        // handle legacy order.\n        pubs = pubs.reverse();\n      }\n      for (let i in pubs) {\n        if (pubs.hasOwnProperty(i)) {\n          this._handlePublication(channel, pubs[i]);\n        }\n      }\n    }\n\n    if (result.recoverable && (!isRecover || !recovered)) {\n      this._lastSeq[channel] = result.seq || 0;\n      this._lastGen[channel] = result.gen || 0;\n      this._lastOffset[channel] = result.offset || 0;\n    }\n\n    this._lastEpoch[channel] = result.epoch || '';\n\n    if (result.recoverable) {\n      sub._recoverable = true;\n    }\n\n    if (result.expires === true) {\n      let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), this._getTTLMilliseconds(result.ttl));\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    }\n  };\n\n  _handleReply(reply, next) {\n    const id = reply.id;\n    const result = reply.result;\n\n    if (!(id in this._callbacks)) {\n      next();\n      return;\n    }\n    const callbacks = this._callbacks[id];\n    clearTimeout(this._callbacks[id].timeout);\n    delete this._callbacks[id];\n\n    if (!errorExists(reply)) {\n      const callback = callbacks.callback;\n      if (!callback) {\n        return;\n      }\n      callback({result, next});\n    } else {\n      const errback = callbacks.errback;\n      if (!errback) {\n        next();\n        return;\n      }\n      const error = reply.error;\n      errback({error, next});\n    }\n  }\n\n  _handleJoin(channel, join) {\n    const ctx = {'info': join.info};\n    const sub = this._getSub(channel);\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        ctx.channel = channel;\n        this.emit('join', ctx);\n      }\n      return;\n    }\n    sub.emit('join', ctx);\n  };\n\n  _handleLeave(channel, leave) {\n    const ctx = {'info': leave.info};\n    const sub = this._getSub(channel);\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        ctx.channel = channel;\n        this.emit('leave', ctx);\n      }\n      return;\n    }\n    sub.emit('leave', ctx);\n  };\n\n  _handleUnsub(channel, unsub) {\n    const ctx = {};\n    const sub = this._getSub(channel);\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        delete this._serverSubs[channel];\n        ctx.channel = channel;\n        this.emit('unsubscribe', ctx);\n      }\n      return;\n    }\n    sub.unsubscribe();\n    if (unsub.resubscribe === true) {\n      sub.subscribe();\n    }\n  };\n\n  _handleSub(channel, sub) {\n    this._serverSubs[channel] = {\n      'seq': sub.seq,\n      'gen': sub.gen,\n      'offset': sub.offset,\n      'epoch': sub.epoch,\n      'recoverable': sub.recoverable\n    };\n    const ctx = {'channel': channel, isResubscribe: false, recovered: false};\n    this.emit('subscribe', ctx);\n  };\n\n  _handlePublication(channel, pub) {\n    const sub = this._getSub(channel);\n    const ctx = {\n      'data': pub.data,\n      'seq': pub.seq,\n      'gen': pub.gen,\n      'offset': pub.offset\n    };\n    if (pub.info) {\n      ctx.info = pub.info;\n    }\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        if (pub.seq !== undefined) {\n          this._serverSubs[channel].seq = pub.seq;\n        }\n        if (pub.gen !== undefined) {\n          this._serverSubs[channel].gen = pub.gen;\n        }\n        if (pub.offset !== undefined) {\n          this._serverSubs[channel].offset = pub.offset;\n        }\n        ctx.channel = channel;\n        this.emit('publish', ctx);\n      }\n      return;\n    }\n    if (pub.seq !== undefined) {\n      this._lastSeq[channel] = pub.seq;\n    }\n    if (pub.gen !== undefined) {\n      this._lastGen[channel] = pub.gen;\n    }\n    if (pub.offset !== undefined) {\n      this._lastOffset[channel] = pub.offset;\n    }\n    sub.emit('publish', ctx);\n  };\n\n  _handleMessage(message) {\n    this.emit('message', message.data);\n  };\n\n  _handlePush(data, next) {\n    const push = this._decoder.decodePush(data);\n    let type = 0;\n    if ('type' in push) {\n      type = push['type'];\n    }\n    const channel = push.channel;\n\n    if (type === this._pushType.PUBLICATION) {\n      const pub = this._decoder.decodePushData(this._pushType.PUBLICATION, push.data);\n      this._handlePublication(channel, pub);\n    } else if (type === this._pushType.MESSAGE) {\n      const message = this._decoder.decodePushData(this._pushType.MESSAGE, push.data);\n      this._handleMessage(message);\n    } else if (type === this._pushType.JOIN) {\n      const join = this._decoder.decodePushData(this._pushType.JOIN, push.data);\n      this._handleJoin(channel, join);\n    } else if (type === this._pushType.LEAVE) {\n      const leave = this._decoder.decodePushData(this._pushType.LEAVE, push.data);\n      this._handleLeave(channel, leave);\n    } else if (type === this._pushType.UNSUB) {\n      const unsub = this._decoder.decodePushData(this._pushType.UNSUB, push.data);\n      this._handleUnsub(channel, unsub);\n    } else if (type === this._pushType.SUB) {\n      const sub = this._decoder.decodePushData(this._pushType.SUB, push.data);\n      this._handleSub(channel, sub);\n    }\n    next();\n  }\n\n  _flush() {\n    const messages = this._messages.slice(0);\n    this._messages = [];\n    this._transportSend(messages);\n  };\n\n  _ping() {\n    const msg = {\n      method: this._methodType.PING\n    };\n    this._call(msg).then(resolveCtx => {\n      this._pingResponse(this._decoder.decodeCommandResult(this._methodType.PING, resolveCtx.result));\n      if (resolveCtx.next) {\n        resolveCtx.next();\n      }\n    }, rejectCtx => {\n      this._debug('ping error', rejectCtx.error);\n      if (rejectCtx.next) {\n        rejectCtx.next();\n      }\n    });\n  };\n\n  _pingResponse(result) {\n    if (!this.isConnected()) {\n      return;\n    }\n    this._stopPing();\n    this._startPing();\n  }\n\n  _getLastSeq(channel) {\n    const lastSeq = this._lastSeq[channel];\n    if (lastSeq) {\n      return lastSeq;\n    }\n    return 0;\n  };\n\n  _getLastOffset(channel) {\n    const lastOffset = this._lastOffset[channel];\n    if (lastOffset) {\n      return lastOffset;\n    }\n    return 0;\n  };\n\n  _getLastGen(channel) {\n    const lastGen = this._lastGen[channel];\n    if (lastGen) {\n      return lastGen;\n    }\n    return 0;\n  };\n\n  _getLastEpoch(channel) {\n    const lastEpoch = this._lastEpoch[channel];\n    if (lastEpoch) {\n      return lastEpoch;\n    }\n    return '';\n  };\n\n  _createErrorObject(message, code) {\n    const errObject = {\n      message: message,\n      code: code || 0\n    };\n\n    return errObject;\n  };\n\n  _registerCall(id, callback, errback) {\n    this._callbacks[id] = {\n      callback: callback,\n      errback: errback,\n      timeout: null\n    };\n    this._callbacks[id].timeout = setTimeout(() => {\n      delete this._callbacks[id];\n      if (isFunction(errback)) {\n        errback({error: this._createErrorObject(_errorTimeout)});\n      }\n    }, this._config.timeout);\n  };\n\n  _addMessage(message) {\n    let id = this._nextMessageId();\n    message.id = id;\n    if (this._isBatching === true) {\n      this._messages.push(message);\n    } else {\n      this._transportSend([message]);\n    }\n    return id;\n  };\n\n  isConnected() {\n    return this._isConnected();\n  }\n\n  connect() {\n    this._connect();\n  };\n\n  disconnect() {\n    this._disconnect('client', false);\n  };\n\n  ping() {\n    return this._ping();\n  }\n\n  startBatching() {\n    // start collecting messages without sending them to Centrifuge until flush\n    // method called\n    this._isBatching = true;\n  };\n\n  stopBatching() {\n    this._isBatching = false;\n    this._flush();\n  };\n\n  startSubscribeBatching() {\n    // start collecting private channels to create bulk authentication\n    // request to subscribeEndpoint when stopSubscribeBatching will be called\n    this._isSubscribeBatching = true;\n  };\n\n  stopSubscribeBatching() {\n    // create request to subscribeEndpoint with collected private channels\n    // to ask if this client can subscribe on each channel\n    this._isSubscribeBatching = false;\n    const authChannels = this._privateChannels;\n    this._privateChannels = {};\n\n    const channels = [];\n\n    for (const channel in authChannels) {\n      if (authChannels.hasOwnProperty(channel)) {\n        const sub = this._getSub(channel);\n        if (!sub) {\n          continue;\n        }\n        channels.push(channel);\n      }\n    }\n\n    if (channels.length === 0) {\n      this._debug('no private channels found, no need to make request');\n      return;\n    }\n\n    const data = {\n      client: this._clientID,\n      channels: channels\n    };\n\n    const clientID = this._clientID;\n    const xhrID = this._newXHRID();\n\n    const cb = (resp) => {\n      if (xhrID in this._xhrs) {\n        delete this._xhrs[xhrID];\n      }\n      if (this._clientID !== clientID) {\n        return;\n      }\n      if (resp.error || resp.status !== 200) {\n        this._debug('authorization request failed');\n        for (const i in channels) {\n          if (channels.hasOwnProperty(i)) {\n            const channel = channels[i];\n            this._subscribeError(channel, this._createErrorObject('authorization request failed'));\n          }\n        }\n        return;\n      }\n\n      let channelsData = {};\n      if (resp.data.channels) {\n        for (const i in resp.data.channels) {\n          const channelData = resp.data.channels[i];\n          if (!channelData.channel) {\n            continue;\n          }\n          channelsData[channelData.channel] = channelData.token;\n        }\n      }\n\n      // try to send all subscriptions in one request.\n      let batch = false;\n\n      if (!this._isBatching) {\n        this.startBatching();\n        batch = true;\n      }\n\n      for (const i in channels) {\n        if (channels.hasOwnProperty(i)) {\n          const channel = channels[i];\n          const token = channelsData[channel];\n\n          if (!token) {\n            // subscription:error\n            this._subscribeError(channel, this._createErrorObject('permission denied', 103));\n            continue;\n          } else {\n            const msg = {\n              method: this._methodType.SUBSCRIBE,\n              params: {\n                channel: channel,\n                token: token\n              }\n            };\n\n            const sub = this._getSub(channel);\n            if (sub === null) {\n              continue;\n            }\n\n            const recover = sub._needRecover();\n\n            if (recover === true) {\n              msg.params.recover = true;\n              const seq = this._getLastSeq(channel);\n              const gen = this._getLastGen(channel);\n              if (seq || gen) {\n                if (seq) {\n                  msg.params.seq = seq;\n                }\n                if (gen) {\n                  msg.params.gen = gen;\n                }\n              } else {\n                const offset = this._getLastOffset(channel);\n                if (offset) {\n                  msg.params.offset = offset;\n                }\n              }\n              const epoch = this._getLastEpoch(channel);\n              if (epoch) {\n                msg.params.epoch = epoch;\n              }\n            }\n            this._call(msg).then(resolveCtx => {\n              this._subscribeResponse(\n                channel,\n                recover,\n                this._decoder.decodeCommandResult(this._methodType.SUBSCRIBE, resolveCtx.result)\n              );\n              if (resolveCtx.next) {\n                resolveCtx.next();\n              }\n            }, rejectCtx => {\n              this._subscribeError(channel, rejectCtx.error);\n              if (rejectCtx.next) {\n                rejectCtx.next();\n              }\n            });\n          }\n        }\n      }\n\n      if (batch) {\n        this.stopBatching();\n      }\n\n    };\n\n    if (this._config.onPrivateSubscribe !== null) {\n      this._config.onPrivateSubscribe({\n        data: data\n      }, cb);\n    } else {\n      const xhr = this._ajax(\n        this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n      this._xhrs[xhrID] = xhr;\n    }\n  };\n\n  subscribe(channel, events) {\n    const currentSub = this._getSub(channel);\n    if (currentSub !== null) {\n      currentSub._setEvents(events);\n      if (currentSub._isUnsubscribed()) {\n        currentSub.subscribe();\n      }\n      return currentSub;\n    }\n    const sub = new Subscription(this, channel, events);\n    this._subs[channel] = sub;\n    sub.subscribe();\n    return sub;\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/centrifuge.js","import EventEmitter from 'events';\n\nimport {\n  isFunction\n} from './utils';\n\nconst _STATE_NEW = 0;\nconst _STATE_SUBSCRIBING = 1;\nconst _STATE_SUCCESS = 2;\nconst _STATE_ERROR = 3;\nconst _STATE_UNSUBSCRIBED = 4;\n\nexport default class Subscription extends EventEmitter {\n  constructor(centrifuge, channel, events) {\n    super();\n    this.channel = channel;\n    this._centrifuge = centrifuge;\n    this._status = _STATE_NEW;\n    this._error = null;\n    this._isResubscribe = false;\n    this._ready = false;\n    this._subscriptionPromise = null;\n    this._noResubscribe = false;\n    this._recoverable = false;\n    this._recover = false;\n    this._setEvents(events);\n    this._initializePromise();\n    this._promises = {};\n    this._promiseId = 0;\n    this.on('error', function (errContext) {\n      this._centrifuge._debug('subscription error', errContext);\n    });\n  }\n\n  _nextPromiseId() {\n    return ++this._promiseId;\n  }\n\n  _initializePromise() {\n    // this helps us to wait until subscription will successfully\n    // subscribe and call actions such as presence, history etc in\n    // synchronous way.\n    this._ready = false;\n\n    this._subscriptionPromise = new Promise((resolve, reject) => {\n      this._resolve = value => {\n        this._ready = true;\n        resolve(value);\n      };\n      this._reject = err => {\n        this._ready = true;\n        reject(err);\n      };\n    }).then(function () {}, function () {});\n  };\n\n  _needRecover() {\n    return this._recoverable === true && this._recover === true;\n  };\n\n  _setEvents(events) {\n    if (!events) {\n      return;\n    }\n    if (isFunction(events)) {\n      // events is just a function to handle publication received from channel.\n      this.on('publish', events);\n    } else if (Object.prototype.toString.call(events) === Object.prototype.toString.call({})) {\n      const knownEvents = ['publish', 'join', 'leave', 'unsubscribe', 'subscribe', 'error'];\n      for (let i = 0, l = knownEvents.length; i < l; i++) {\n        const ev = knownEvents[i];\n        if (ev in events) {\n          this.on(ev, events[ev]);\n        }\n      }\n    }\n  };\n\n  _isNew() {\n    return this._status === _STATE_NEW;\n  };\n\n  _isUnsubscribed() {\n    return this._status === _STATE_UNSUBSCRIBED;\n  };\n\n  _isSubscribing() {\n    return this._status === _STATE_SUBSCRIBING;\n  };\n\n  _isReady() {\n    return this._status === _STATE_SUCCESS || this._status === _STATE_ERROR;\n  };\n\n  _isSuccess() {\n    return this._status === _STATE_SUCCESS;\n  };\n\n  _isError() {\n    return this._status === _STATE_ERROR;\n  };\n\n  _setNew() {\n    this._status = _STATE_NEW;\n  };\n\n  _setSubscribing(isResubscribe) {\n    this._isResubscribe = isResubscribe || false;\n    if (this._ready === true) {\n      // new promise for this subscription\n      this._initializePromise();\n    }\n    this._status = _STATE_SUBSCRIBING;\n  };\n\n  _setSubscribeSuccess(recovered, positioned, offset, epoch) {\n    if (this._status === _STATE_SUCCESS) {\n      return;\n    }\n    this._status = _STATE_SUCCESS;\n    const successContext = this._getSubscribeSuccessContext(recovered, positioned, offset, epoch);\n\n    this._recover = false;\n    this.emit('subscribe', successContext);\n    this._resolve(successContext);\n    for (const id in this._promises) {\n      clearTimeout(this._promises[id].timeout);\n      this._promises[id].resolve();\n      delete this._promises[id];\n    }\n  };\n\n  _setSubscribeError(err) {\n    if (this._status === _STATE_ERROR) {\n      return;\n    }\n    this._status = _STATE_ERROR;\n    this._error = err;\n    const errContext = this._getSubscribeErrorContext();\n    this.emit('error', errContext);\n    this._reject(errContext);\n    for (const id in this._promises) {\n      clearTimeout(this._promises[id].timeout);\n      this._promises[id].reject(err);\n      delete this._promises[id];\n    }\n  };\n\n  _triggerUnsubscribe() {\n    this.emit('unsubscribe', {\n      channel: this.channel\n    });\n  };\n\n  _setUnsubscribed(noResubscribe) {\n    this._centrifuge._clearSubRefreshTimeout(this.channel);\n    if (this._status === _STATE_UNSUBSCRIBED) {\n      return;\n    }\n    const needTrigger = this._status === _STATE_SUCCESS;\n    this._status = _STATE_UNSUBSCRIBED;\n    if (noResubscribe === true) {\n      this._recover = false;\n      this._noResubscribe = true;\n      delete this._centrifuge._lastSeq[this.channel];\n      delete this._centrifuge._lastGen[this.channel];\n      delete this._centrifuge._lastEpoch[this.channel];\n    }\n    if (needTrigger) {\n      this._triggerUnsubscribe();\n    }\n  };\n\n  _shouldResubscribe() {\n    return !this._noResubscribe;\n  };\n\n  _getSubscribeSuccessContext(recovered, positioned, offset, epoch) {\n    let ctx = {\n      channel: this.channel,\n      isResubscribe: this._isResubscribe,\n      recovered: recovered\n    };\n    if (positioned) {\n      ctx.streamPosition = {\n        'offset': offset,\n        'epoch': epoch\n      };\n    };\n    return ctx;\n  };\n\n  _getSubscribeErrorContext() {\n    const subscribeErrorContext = this._error;\n    subscribeErrorContext.channel = this.channel;\n    subscribeErrorContext.isResubscribe = this._isResubscribe;\n    return subscribeErrorContext;\n  };\n\n  ready(callback, errback) {\n    if (this._ready) {\n      if (this._isSuccess()) {\n        callback(this._getSubscribeSuccessContext());\n      } else {\n        errback(this._getSubscribeErrorContext());\n      }\n    }\n  };\n\n  subscribe() {\n    if (this._status === _STATE_SUCCESS) {\n      return;\n    }\n    this._noResubscribe = false;\n    this._centrifuge._subscribe(this);\n  };\n\n  unsubscribe() {\n    this._setUnsubscribed(true);\n    this._centrifuge._unsubscribe(this);\n  };\n\n  _methodCall(message, type) {\n    const methodCallPromise = new Promise((resolve, reject) => {\n      let subPromise;\n      if (this._isSuccess()) {\n        subPromise = Promise.resolve();\n      } else if (this._isError()) {\n        subPromise = Promise.reject(this._error);\n      } else {\n        subPromise = new Promise((res, rej) => {\n          const timeout = setTimeout(function () {\n            rej({'code': 0, 'message': 'timeout'});\n          }, this._centrifuge._config.timeout);\n          this._promises[this._nextPromiseId()] = {\n            timeout: timeout,\n            resolve: res,\n            reject: rej\n          };\n        });\n      }\n      subPromise.then(\n        () => {\n          return this._centrifuge._call(message).then(\n            resolveCtx => {\n              resolve(this._centrifuge._decoder.decodeCommandResult(type, resolveCtx.result));\n              if (resolveCtx.next) {\n                resolveCtx.next();\n              }\n            },\n            rejectCtx => {\n              reject(rejectCtx.error);\n              if (rejectCtx.next) {\n                rejectCtx.next();\n              }\n            }\n          );\n        },\n        error => {\n          reject(error);\n        }\n      );\n    });\n    return methodCallPromise;\n  }\n\n  publish(data) {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PUBLISH,\n      params: {\n        channel: this.channel,\n        data: data\n      }\n    }, this._centrifuge._methodType.PUBLISH);\n  };\n\n  presence() {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PRESENCE,\n      params: {\n        channel: this.channel\n      }\n    }, this._centrifuge._methodType.PRESENCE);\n  };\n\n  presenceStats() {\n    return this._methodCall({\n      method: this._centrifuge._methodType.PRESENCE_STATS,\n      params: {\n        channel: this.channel\n      }\n    }, this._centrifuge._methodType.PRESENCE_STATS);\n  };\n\n  history(filter) {\n    let params = {\n      channel: this.channel\n    };\n    if (filter !== undefined) {\n      if (filter.since) {\n        params['use_since'] = true;\n        if (filter.since.offset) {\n          params['offset'] = filter.since.offset;\n        }\n        if (filter.since.epoch) {\n          params['epoch'] = filter.since.epoch;\n        }\n      };\n      if (filter.limit !== undefined) {\n        params['use_limit'] = true;\n        params['limit'] = filter.limit;\n      }\n    };\n    return this._methodCall({\n      method: this._centrifuge._methodType.HISTORY,\n      params: params\n    }, this._centrifuge._methodType.HISTORY);\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/subscription.js","export const JsonMethodType = {\n  CONNECT: 0,\n  SUBSCRIBE: 1,\n  UNSUBSCRIBE: 2,\n  PUBLISH: 3,\n  PRESENCE: 4,\n  PRESENCE_STATS: 5,\n  HISTORY: 6,\n  PING: 7,\n  SEND: 8,\n  RPC: 9,\n  REFRESH: 10,\n  SUB_REFRESH: 11\n};\n\nexport const JsonPushType = {\n  PUBLICATION: 0,\n  JOIN: 1,\n  LEAVE: 2,\n  UNSUB: 3,\n  MESSAGE: 4,\n  SUB: 5\n};\n\nexport class JsonEncoder {\n  encodeCommands(commands) {\n    const encodedCommands = [];\n    for (const i in commands) {\n      if (commands.hasOwnProperty(i)) {\n        encodedCommands.push(JSON.stringify(commands[i]));\n      }\n    }\n    return encodedCommands.join('\\n');\n  }\n}\n\nexport class JsonDecoder {\n  decodeReplies(data) {\n    const replies = [];\n    const encodedReplies = data.split('\\n');\n    for (const i in encodedReplies) {\n      if (encodedReplies.hasOwnProperty(i)) {\n        if (!encodedReplies[i]) {\n          continue;\n        }\n        const reply = JSON.parse(encodedReplies[i]);\n        replies.push(reply);\n      }\n    }\n    return replies;\n  }\n\n  decodeCommandResult(methodType, data) {\n    return data;\n  }\n\n  decodePush(data) {\n    return data;\n  }\n\n  decodePushData(pushType, data) {\n    return data;\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/json.js","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 3\n// module chunks = 0 1","import {Centrifuge} from './centrifuge.js';\nexport default Centrifuge;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = $getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  var args = [];\n  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    ReflectApply(this.listener, this.target, args);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/events/events.js\n// module id = 6\n// module chunks = 0 1","export function startsWith(value, prefix) {\n  return value.lastIndexOf(prefix, 0) === 0;\n};\n\nexport function isFunction(value) {\n  if (value === undefined || value === null) {\n    return false;\n  }\n  return typeof value === 'function';\n};\n\nexport function log(level, args) {\n  if (global.console) {\n    const logger = global.console[level];\n\n    if (isFunction(logger)) {\n      logger.apply(global.console, args);\n    }\n  }\n};\n\nexport function backoff(step, min, max) {\n  const jitter = 0.5 * Math.random();\n  const interval = Math.min(max, min * Math.pow(2, step + 1));\n\n  return Math.floor((1 - jitter) * interval);\n};\n\nexport function errorExists(data) {\n  return 'error' in data && data.error !== null;\n};\n\nexport function extend(a, b) {\n  for (const key in b) {\n    if (b.hasOwnProperty(key)) {\n      a[key] = b[key];\n    }\n  }\n  return a;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils.js"],"sourceRoot":""}